var beepbox=function(t){"use strict";
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */class e{}function i(t){let e=0;for(let i=0;i<t.length;i++)e+=t[i];const i=e/t.length;for(let e=0;e<t.length;e++)t[e]-=i;return s(t),t.push(0),new Float32Array(t)}function n(t){let e=0;i(t);for(let i=0;i<t.length-1;i++)e+=Math.abs(t[i]);const n=e/(t.length-1);for(let e=0;e<t.length-1;e++)t[e]=t[e]/n;return new Float32Array(t)}function s(t){let e=0,i=new Float32Array(t.length);for(let n=0;n<t.length;n++)i[n]=e,e+=t[n];return i}function r(t,i,n){let s=e.chipNoises[t].samples;if(null==s){if(s=new Float32Array(e.chipNoiseLength+1),e.chipNoises[t].samples=s,0==t){let t=1;for(let i=0;i<e.chipNoiseLength;i++){s[i]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=16384),t=e}}else if(1==t)for(let t=0;t<e.chipNoiseLength;t++)s[t]=2*Math.random()-1;else if(2==t){let t=1;for(let i=0;i<e.chipNoiseLength;i++){s[i]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=32768),t=e}}else if(3==t){let t=1;for(let i=0;i<e.chipNoiseLength;i++){s[i]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=40),t=e}}else if(4==t)a(s,e.chipNoiseLength,10,11,1,1,0),a(s,e.chipNoiseLength,11,14,.6578,.6578,0),i(s,e.chipNoiseLength),n(s,1/Math.sqrt(e.chipNoiseLength));else if(5==t)for(var r=1,o=0;o<e.chipNoiseLength;o++){s[o]=2*(1&r)-1,1==(r+(l=r>>1)&1)&&(l+=40),r=l}else if(6==t)a(s,e.chipNoiseLength,1,10,1,1,0),a(s,e.chipNoiseLength,20,14,-2,-2,0),i(s,e.chipNoiseLength),n(s,1/Math.sqrt(e.chipNoiseLength));else if(7==t)for(r=1,o=0;o<e.chipNoiseLength;o++){s[o]=4*(1&r)*(14*Math.random()+1),1==(r+(l=r>>1)&1)&&(l+=60),r=l}else{if(8!=t)throw new Error("Unrecognized drum index: "+t);for(r=1,o=0;o<32768;o++){var l;s[o]=(1&r)/2+.5,1==(r+(l=r>>1)&1)&&(l-=40),r=l}}s[e.chipNoiseLength]=s[0]}return s}function a(t,e,i,n,s,a,o){const l=0|Math.pow(2,i),h=Math.min(e>>1,0|Math.pow(2,n)),c=r(0,null,null);let u=0;for(let r=l;r<h;r++){let l=s+(a-s)*(Math.log2(r)-i)/(n-i),h=Math.pow(2,7*(l-1)+1)*l;h*=Math.pow(r/2048,o),u+=h,h*=c[r];const f=.61803398875*r*r*Math.PI*2;t[r]=Math.cos(f)*h,t[e-r]=Math.sin(f)*h}return u}function o(t=0){const i=new Float32Array(e.sineWaveLength+1),n=e.sineWaveLength/4;for(let s=0;s<e.sineWaveLength+1;s++)i[s]=2*+(Math.abs(s-n)<t*e.sineWaveLength/2||Math.abs(s-e.sineWaveLength-n)<t*e.sineWaveLength/2)-1;return i}function l(t=!1){const i=new Float32Array(e.sineWaveLength+1);for(let n=0;n<e.sineWaveLength+1;n++)i[n]=2*(n+e.sineWaveLength/4)/e.sineWaveLength%2-1,i[n]=t?-i[n]:i[n];return i}function h(t,i,n){let s=e.arpeggioPatterns[t-1];return null!=s?(2==t&&0==i&&(s=[0,0,1,1]),s[n%s.length]):n%t}function c(t){const e={};for(let i=0;i<t.length;i++){const n=t[i];n.index=i,e[n.name]=n}const i=t;return i.dictionary=e,i}function u(t){return 0!=(1024&t)}function f(t){return 0!=(2048&t)}function p(t){return 0!=(128&t)}function m(t){return 0!=(256&t)}function d(t){return 0!=(512&t)}function y(t){return 0!=(32&t)}function v(t){return 0!=(8&t)}function g(t){return 0!=(16&t)}function b(t){return 0!=(4&t)}function M(t){return 0!=(2&t)}function S(t){return 0!=(64&t)}function w(t){return 0!=(1&t)}e.thresholdVal=-10,e.kneeVal=40,e.ratioVal=12,e.attackVal=0,e.releaseVal=.25,e.scales=c([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]}]),e.keys=c([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),e.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],e.tempoMin=30,e.tempoMax=320,e.echoDelayRange=24,e.echoDelayStepTicks=4,e.echoSustainRange=8,e.echoShelfHz=4e3,e.echoShelfGain=Math.pow(2,-.5),e.reverbShelfHz=8e3,e.reverbShelfGain=Math.pow(2,-1.5),e.reverbRange=32,e.reverbDelayBufferSize=16384,e.reverbDelayBufferMask=e.reverbDelayBufferSize-1,e.beatsPerBarMin=3,e.beatsPerBarMax=16,e.barCountMin=1,e.barCountMax=256,e.instrumentCountMin=1,e.layeredInstrumentCountMax=4,e.patternInstrumentCountMax=10,e.partsPerBeat=24,e.ticksPerPart=2,e.ticksPerArpeggio=3,e.arpeggioPatterns=[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]],e.rhythms=c([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}]),e.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","custom chip","mod"],e.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1],e.chipBaseExpression=.03375,e.fmBaseExpression=.03,e.noiseBaseExpression=.19,e.spectrumBaseExpression=.3,e.drumsetBaseExpression=.45,e.harmonicsBaseExpression=.025,e.pwmBaseExpression=.04725,e.pickedStringBaseExpression=.025,e.distortionBaseVolume=.011,e.bitcrusherBaseVolume=.01,e.rawChipWaves=c([{name:"rounded",expression:.94,samples:i([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:i([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:i([1,-1])},{name:"1/4 pulse",expression:.5,samples:i([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:i([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:i([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:i([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:i([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:i([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:n([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:n([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:n([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:n([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:n([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:n([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:n([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:n([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:n([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:n([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:n([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:i}]),e.chipWaves=function(t){const e=new Array(t.length),i={};for(let n=0;n<e.length;n++){e[n]=Object.assign([],t[n]);const s=e[n];s.index=n,i[s.name]=s}for(let t in i)i[t].samples=s(i[t].samples);const n=e;return n.dictionary=i,n}(e.rawChipWaves),e.chipNoises=c([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null}]),e.filterFreqStep=1/4,e.filterFreqRange=34,e.filterFreqReferenceSetting=28,e.filterFreqReferenceHz=8e3,e.filterFreqMaxHz=e.filterFreqReferenceHz*Math.pow(2,e.filterFreqStep*(e.filterFreqRange-1-e.filterFreqReferenceSetting)),e.filterFreqMinHz=8,e.filterGainRange=15,e.filterGainCenter=7,e.filterGainStep=.5,e.filterMaxPoints=8,e.filterTypeNames=["low-pass","high-pass","peak"],e.filterMorphCount=10,e.filterSimpleCutRange=11,e.filterSimplePeakRange=8,e.fadeInRange=10,e.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],e.fadeOutNeutral=4,e.drumsetFadeOutTicks=48,e.transitions=c([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),e.vibratos=c([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}]),e.vibratoTypes=c([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,.17798,.33],period:266.97}]),e.arpSpeedScale=[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8],e.unisons=c([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8}]),e.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type"],e.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0],e.noteSizeMax=6,e.volumeRange=50,e.volumeLogScale=.1428,e.panCenter=50,e.panMax=2*e.panCenter,e.panDelaySecondsMax=.001,e.chorusRange=8,e.chorusPeriodSeconds=2,e.chorusDelayRange=.0034,e.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],e.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],e.chorusMaxDelay=e.chorusDelayRange*(1+e.chorusDelayOffsets[0].concat(e.chorusDelayOffsets[1]).reduce(((t,e)=>Math.max(t,e)))),e.chords=c([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),e.maxChordSize=9,e.operatorCount=4,e.maxPitchOrOperatorCount=Math.max(e.maxChordSize,e.operatorCount),e.algorithms=c([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}]),e.operatorCarrierInterval=[0,.04,-.073,.091],e.operatorAmplitudeMax=15,e.operatorFrequencies=c([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}]),e.envelopes=c([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4}]),e.feedbacks=c([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}]),e.chipNoiseLength=32768,e.spectrumNoiseLength=32768,e.spectrumBasePitch=24,e.spectrumControlPoints=30,e.spectrumControlPointsPerOctave=7,e.spectrumControlPointBits=3,e.spectrumMax=(1<<e.spectrumControlPointBits)-1,e.harmonicsControlPoints=28,e.harmonicsRendered=64,e.harmonicsRenderedForPickedString=256,e.harmonicsControlPointBits=3,e.harmonicsMax=(1<<e.harmonicsControlPointBits)-1,e.harmonicsWavelength=2048,e.pulseWidthRange=50,e.pulseWidthStepPower=.5,e.pitchChannelCountMin=1,e.pitchChannelCountMax=40,e.noiseChannelCountMin=0,e.noiseChannelCountMax=16,e.modChannelCountMin=0,e.modChannelCountMax=12,e.noiseInterval=6,e.pitchesPerOctave=12,e.drumCount=12,e.pitchOctaves=8,e.modCount=6,e.maxPitch=e.pitchOctaves*e.pitchesPerOctave,e.maximumTonesPerChannel=2*e.maxChordSize,e.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((t=>Math.log2(t)*e.pitchesPerOctave)),e.pitchShiftRange=e.justIntonationSemitones.length,e.pitchShiftCenter=e.pitchShiftRange>>1,e.detuneCenter=200,e.detuneMax=400,e.detuneMin=0,e.songDetuneMin=0,e.songDetuneMax=500,e.sineWaveLength=256,e.sineWaveMask=e.sineWaveLength-1,e.sineWave=function(){const t=new Float32Array(e.sineWaveLength+1);for(let i=0;i<e.sineWaveLength+1;i++)t[i]=Math.sin(i*Math.PI*2/e.sineWaveLength);return t}(),e.pickedStringDispersionCenterFreq=6e3,e.pickedStringDispersionFreqScale=.3,e.pickedStringDispersionFreqMult=4,e.pickedStringShelfHz=4e3,e.distortionRange=8,e.stringSustainRange=15,e.stringDecayRate=.12,e.bitcrusherFreqRange=14,e.bitcrusherOctaveStep=.5,e.bitcrusherQuantizationRange=8,e.maxEnvelopeCount=12,e.defaultAutomationRange=13,e.instrumentAutomationTargets=c([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:e.filterMaxPoints,effect:5,compatibleInstruments:null}]),e.operatorWaves=c([{name:"sine",samples:e.sineWave},{name:"triangle",samples:function(){const t=new Float32Array(e.sineWaveLength+1);for(let i=0;i<e.sineWaveLength+1;i++)t[i]=Math.asin(Math.sin(i*Math.PI*2/e.sineWaveLength))/(Math.PI/2);return t}()},{name:"sawtooth",samples:l()},{name:"pulse width",samples:o()},{name:"ramp",samples:l(!0)},{name:"trapezoid",samples:function(t=2){const i=new Float32Array(e.sineWaveLength+1);for(let n=0;n<e.sineWaveLength+1;n++)i[n]=Math.max(-1,Math.min(1,Math.asin(Math.sin(n*Math.PI*2/e.sineWaveLength))*t));return i}(2)}]),e.pwmOperatorWaves=c([{name:"1%",samples:o(.01)},{name:"5%",samples:o(.05)},{name:"12.5%",samples:o(.125)},{name:"25%",samples:o(.25)},{name:"33%",samples:o(1/3)},{name:"50%",samples:o(.5)},{name:"66%",samples:o(2/3)},{name:"75%",samples:o(.75)},{name:"87.5%",samples:o(.875)},{name:"95%",samples:o(.95)},{name:"99%",samples:o(.99)}]),e.barEditorHeight=10,e.modulators=c([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:e.tempoMax-e.tempoMin,newNoteVol:Math.ceil((e.tempoMax-e.tempoMin)/2),forSong:!0,convertRealFactor:e.tempoMin,associatedEffect:12,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:2*e.reverbRange,newNoteVol:e.reverbRange,forSong:!0,convertRealFactor:-e.reverbRange,associatedEffect:12,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"note volume",pianoName:"Note Vol.",maxRawVol:e.volumeRange,newNoteVol:Math.ceil(e.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-e.volumeRange/2),associatedEffect:12,promptName:"Note Volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:e.panMax,newNoteVol:Math.ceil(e.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:e.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:e.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedback",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:e.pulseWidthRange,newNoteVol:e.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:e.detuneMax-e.detuneMin,newNoteVol:e.detuneCenter,forSong:!1,convertRealFactor:-e.detuneCenter,associatedEffect:8,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:e.songDetuneMax-e.songDetuneMin,newNoteVol:Math.ceil((e.songDetuneMax-e.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:12,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:e.bitcrusherQuantizationRange-1,newNoteVol:Math.round(e.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:e.bitcrusherFreqRange-1,newNoteVol:Math.round(e.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:e.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:e.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:e.chorusRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:e.filterSimpleCutRange-1,newNoteVol:e.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:e.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:e.filterSimpleCutRange-1,newNoteVol:e.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:e.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:e.pitchShiftRange-1,newNoteVol:e.pitchShiftCenter,forSong:!1,convertRealFactor:-e.pitchShiftCenter,associatedEffect:7,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:e.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"mix volume",pianoName:"Mix Vol.",maxRawVol:e.volumeRange,newNoteVol:Math.ceil(e.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-e.volumeRange/2),associatedEffect:12,promptName:"Mix Volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]}]);/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);class k{static valueToPreset(t){const e=t>>6,i=63&t;return k.presetCategories[e].presets[i]}static midiProgramToPresetValue(t){for(let e=0;e<k.presetCategories.length;e++){const i=k.presetCategories[e];for(let n=0;n<i.presets.length;n++){const s=i.presets[n];if(s.generalMidi&&s.midiProgram==t)return(e<<6)+n}}return null}static nameToPresetValue(t){for(let e=0;e<k.presetCategories.length;e++){const i=k.presetCategories[e];for(let n=0;n<i.presets.length;n++){if(i.presets[n].name==t)return(e<<6)+n}}return null}}function I(t,e){for(let i=0;i<t.length;i++)t[i]*=e}function F(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}function P(t,e){const i=F(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let n=i-1;n>=2;n--){const i=1<<n,s=i>>1,r=i<<1,a=2*Math.PI/r,o=Math.cos(a),l=Math.sin(a),h=2*o;for(let n=0;n<e;n+=r){const e=n,r=e+s,a=e+i,c=a+s,u=a+i,f=t[e],p=t[a];t[e]=f+p,t[r]*=2,t[a]=f-p,t[c]*=2;let m=o,d=-l,y=1,v=0;for(let i=1;i<s;i++){const n=e+i,s=a-i,r=a+i,o=u-i,l=t[n],c=t[s],f=t[r],p=t[o],g=l-c,b=f+p;t[n]=l+c,t[s]=p-f,t[r]=g*m-b*d,t[o]=b*m+g*d;const M=h*m-y,S=h*d-v;y=m,v=d,m=M,d=S}}}for(let i=0;i<e;i+=4){const e=i+1,n=i+2,s=i+3,r=t[i],a=2*t[e],o=t[n],l=2*t[s],h=r+o,c=r-o;t[i]=h+a,t[e]=h-a,t[n]=c+l,t[s]=c-l}!function(t,e){const i=F(e);if(i>16)throw new Error("FFT array length must not be greater than 2^16.");const n=16-i;for(let i=0;i<e;i++){let e;if(e=(43690&i)>>1|(21845&i)<<1,e=(52428&e)>>2|(13107&e)<<2,e=(61680&e)>>4|(3855&e)<<4,e=(e>>8|(255&e)<<8)>>n,e>i){let n=t[i];t[i]=t[e],t[e]=n}}}(t,e)}k.version="2.5",k.versionDisplayName="JummBox "+k.version,k.releaseNotesURL="https://jummbus.bitbucket.io/patch_notes/"+k.version+".html",k.isOnMac=/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),k.ctrlSymbol=k.isOnMac?"⌘":"Ctrl+",k.ctrlName=k.isOnMac?"command":"control",k.presetCategories=c([{name:"Custom Instruments",presets:c([{name:"chip wave",customType:0},{name:"FM (expert)",customType:1},{name:"basic noise",customType:2},{name:"spectrum",customType:3},{name:"drumset",customType:4},{name:"harmonics",customType:5},{name:"pulse width",customType:6},{name:"picked string",customType:7},{name:"custom chip",customType:8}])},{name:"Retro Presets",presets:c([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}}])},{name:"Keyboard Presets",presets:c([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}}])},{name:"Idiophone Presets",presets:c([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:7,envelope:"custom"},{frequency:"20×",amplitude:2,envelope:"twang 1"}]}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"13×",amplitude:6,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:11,envelope:"custom"},{frequency:"5×",amplitude:3,envelope:"twang 2"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,feedbackEnvelope:"decay 1",operators:[{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"5×",amplitude:6,envelope:"custom"},{frequency:"8×",amplitude:9,envelope:"custom"},{frequency:"13×",amplitude:11,envelope:"custom"}]}}])},{name:"Guitar Presets",presets:c([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:c([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:c([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:c([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:c([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",vibrato:"light",algorithm:"1 2 3 4",feedbackType:"1→3 2→4",feedbackAmplitude:7,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"3×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"}]}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:c([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"tremolo4",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"~2×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"},{frequency:"7×",amplitude:8,envelope:"custom"}]}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"decay 1",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:12,envelope:"custom"},{frequency:"4×",amplitude:14,envelope:"custom"}]}}])},{name:"Vocal Presets",presets:c([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"tremolo5",vibrato:"none",algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,feedbackEnvelope:"tremolo3",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"16×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:c([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:c([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:29,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"tremolo5",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"~2×",amplitude:2,envelope:"twang 3"},{frequency:"1×",amplitude:0,envelope:"steady"}]}}])},{name:"Flute Presets",presets:c([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,feedbackEnvelope:"decay 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:4,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"~1×",amplitude:1,envelope:"punch"}]}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:c([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}}])},{name:"Drum Presets",presets:c([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}}])},{name:"Novelty Presets",presets:c([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])}]);class T{constructor(){this.t=1,this.i=[void 0],this.o=0,this.l=0,this.h=0}pushFront(t){this.h>=this.t&&this.u(),this.l=this.l-1&this.o,this.i[this.l]=t,this.h++}pushBack(t){this.h>=this.t&&this.u(),this.i[this.l+this.h&this.o]=t,this.h++}popFront(){if(this.h<=0)throw new Error("No elements left to pop.");const t=this.i[this.l];return this.i[this.l]=void 0,this.l=this.l+1&this.o,this.h--,t}popBack(){if(this.h<=0)throw new Error("No elements left to pop.");this.h--;const t=this.l+this.h&this.o,e=this.i[t];return this.i[t]=void 0,e}peakFront(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l]}peakBack(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l+this.h-1&this.o]}count(){return this.h}set(t,e){if(t<0||t>=this.h)throw new Error("Invalid index");this.i[this.l+t&this.o]=e}get(t){if(t<0||t>=this.h)throw new Error("Invalid index");return this.i[this.l+t&this.o]}remove(t){if(t<0||t>=this.h)throw new Error("Invalid index");if(t<=this.h>>1){for(;t>0;)this.set(t,this.get(t-1)),t--;this.popFront()}else{for(t++;t<this.h;)this.set(t-1,this.get(t)),t++;this.popBack()}}u(){if(this.t>=1073741824)throw new Error("Capacity too big.");this.t=this.t<<1;const t=this.i,e=new Array(this.t),i=0|this.h,n=0|this.l;for(let s=0;s<i;s++)e[s]=t[n+s&this.o];for(let t=i;t<this.t;t++)e[t]=void 0;this.l=0,this.i=e,this.o=this.t-1}}class q{constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(t){this.b[0]=t,this.order=0}lowPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),i=1+e;this.a[1]=(1-e)/i,this.b[1]=this.b[0]=1/i,this.order=1}lowPass1stOrderSimplified(t){const e=2*Math.sin(.5*t);this.a[1]=e-1,this.b[0]=e,this.b[1]=0,this.order=1}highPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),i=1+e;this.a[1]=(1-e)/i,this.b[0]=e/i,this.b[1]=-e/i,this.order=1}highShelf1stOrder(t,e){const i=Math.tan(.5*t),n=Math.sqrt(e),s=(i*n-1)/(i*n+1);this.a[1]=s/1,this.b[0]=(1+s+e*(1-s))/2,this.b[1]=(1+s-e*(1-s))/2,this.order=1}allPass1stOrderInvertPhaseAbove(t){const e=(Math.sin(t)-1)/Math.cos(t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(t){const e=(1-t)/(1+t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(t,e){const i=Math.sin(t)/(2*e),n=Math.cos(t),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1-n)/(2*s),this.b[1]=(1-n)/s,this.order=2}lowPass2ndOrderSimplified(t,e){const i=2*Math.sin(t/2),n=1-1/(2*e),s=n+n/(1-i);this.a[1]=2*i+(i-1)*i*s-2,this.a[2]=(i-1)*(i-i*s-1),this.b[0]=i*i,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(t,e){const i=Math.sin(t)/(2*e),n=Math.cos(t),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1+n)/(2*s),this.b[1]=-(1+n)/s,this.order=2}peak2ndOrder(t,e,i){const n=Math.sqrt(e),s=i*t/(n>=1?n:1/n),r=Math.tan(.5*s),a=1+r/n;this.b[0]=(1+r*n)/a,this.b[1]=this.a[1]=-2*Math.cos(t)/a,this.b[2]=(1-r*n)/a,this.a[2]=(1-r/n)/a,this.order=2}}class x{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(t,e){this.analyzeComplex(t,Math.cos(e),Math.sin(e))}analyzeComplex(t,e,i){const n=t.a,s=t.b,r=e,a=-i;let o=s[0]+s[1]*r,l=s[1]*a,h=1+n[1]*r,c=n[1]*a,u=r,f=a;for(let e=2;e<=t.order;e++){const t=u*a+f*r;u=u*r-f*a,f=t,o+=s[e]*u,l+=s[e]*f,h+=n[e]*u,c+=n[e]*f}this.denom=h*h+c*c,this.real=o*h+l*c,this.imag=l*h-o*c}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class D{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(t,e,i,n){if(2!=t.order||2!=e.order)throw new Error;this.a1=t.a[1],this.a2=t.a[2],this.b0=t.b[0],this.b1=t.b[1],this.b2=t.b[2],this.a1Delta=(e.a[1]-t.a[1])*i,this.a2Delta=(e.a[2]-t.a[2])*i,n?(this.b0Delta=Math.pow(e.b[0]/t.b[0],i),this.b1Delta=Math.pow(e.b[1]/t.b[1],i),this.b2Delta=Math.pow(e.b[2]/t.b[2],i)):(this.b0Delta=(e.b[0]-t.b[0])*i,this.b1Delta=(e.b[1]-t.b[1])*i,this.b2Delta=(e.b[2]-t.b[2])*i),this.useMultiplicativeInputCoefficients=n}}const O=1e-24;function R(t,e,i){return i<=(e-=1)?i>=t?i:t:e}function A(t,e,i){if(t<=i&&i<=e)return i;throw new Error(`Value ${i} not in range [${t}, ${e}]`)}const E=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],z=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class H{constructor(t,e,i){this.p=[],this.m=0;for(let n=e;n<i;n++){const e=z[t.charCodeAt(n)];this.p.push(e>>5&1),this.p.push(e>>4&1),this.p.push(e>>3&1),this.p.push(e>>2&1),this.p.push(e>>1&1),this.p.push(1&e)}}read(t){let e=0;for(;t>0;)e<<=1,e+=this.p[this.m++],t--;return e}readLongTail(t,e){let i=t,n=e;for(;this.p[this.m++];)i+=1<<n,n++;for(;n>0;)n--,this.p[this.m++]&&(i+=1<<n);return i}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class L{constructor(){this.v=0,this.p=[]}clear(){this.v=0}write(t,e){for(t--;t>=0;)this.p[this.v++]=e>>>t&1,t--}writeLongTail(t,e,i){if(i<t)throw new Error("value out of bounds");i-=t;let n=e;for(;i>=1<<n;)this.p[this.v++]=1,i-=1<<n,n++;for(this.p[this.v++]=0;n>0;)n--,this.p[this.v++]=i>>>n&1}writePartDuration(t){this.writeLongTail(1,3,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){for(let e=0;e<t.v;e++)this.p[this.v++]=t.p[e]}encodeBase64(t){for(let e=0;e<this.v;e+=6){const i=this.p[e]<<5|this.p[e+1]<<4|this.p[e+2]<<3|this.p[e+3]<<2|this.p[e+4]<<1|this.p[e+5];t.push(E[i])}return t}lengthBase64(){return Math.ceil(this.v/6)}}function N(t,e,i){return{interval:t,time:e,size:i}}class C{constructor(t,e,i,n,s=!1){this.pitches=[t],this.pins=[N(0,0,n),N(0,i-e,s?0:n)],this.start=e,this.end=i,this.continuesLastPattern=!1}pickMainInterval(){let t=0,e=0;for(let i=1;i<this.pins.length;i++){const n=this.pins[i-1],s=this.pins[i];if(n.interval==s.interval){const i=s.time-n.time;t<i&&(t=i,e=n.interval)}}if(0==t){let t=0;for(let i=0;i<this.pins.length;i++){const n=this.pins[i];t<n.size&&(t=n.size,e=n.interval)}}return e}clone(){const t=new C(-1,this.start,this.end,3);t.pitches=this.pitches.concat(),t.pins=[];for(const e of this.pins)t.pins.push(N(e.interval,e.time,e.size));return t.continuesLastPattern=this.continuesLastPattern,t}getEndPinIndex(t){let e;for(e=1;e<this.pins.length-1&&!(this.pins[e].time+this.start>t);e++);return e}}class V{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const t=[];for(const e of this.notes)t.push(e.clone());return t}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(t,i,n){const s=[];for(const r of this.notes){let a=i.instruments[this.instruments[0]],o=Math.max(0,e.modCount-r.pitches[0]-1),l=t.getVolumeCapForSetting(n,a.modulators[o],a.modFilterTypes[o]);const h=[];for(const i of r.pins){let s=n?Math.round(i.size):Math.round(100*i.size/l);h.push({tick:(i.time+r.start)*e.rhythms[t.rhythm].stepsPerBeat/e.partsPerBeat,pitchBend:i.interval,volume:s,forMod:n})}const c={pitches:r.pitches,points:h};0==r.start&&(c.continuesLastPattern=r.continuesLastPattern),s.push(c)}const r={notes:s};return t.patternInstruments&&(r.instruments=this.instruments.map((t=>t+1))),r}fromJsonObject(t,i,n,s,r,a){if(i.patternInstruments)if(Array.isArray(t.instruments)){const s=t.instruments,r=R(e.instrumentCountMin,i.getMaxInstrumentsPerPatternForChannel(n)+1,s.length);for(let t=0;t<r;t++)this.instruments[t]=R(0,n.instruments.length,(0|s[t])-1);this.instruments.length=r}else this.instruments[0]=R(0,n.instruments.length,(0|t.instrument)-1),this.instruments.length=1;if(t.notes&&t.notes.length>0){const o=Math.min(i.beatsPerBar*e.partsPerBeat*(a?e.modCount:1),t.notes.length>>>0);for(let l=0;l<t.notes.length&&!(l>=o);l++){const o=t.notes[l];if(!(o&&o.pitches&&o.pitches.length>=1&&o.points&&o.points.length>=2))continue;const h=new C(0,0,0,0);h.pitches=[],h.pins=[];for(let t=0;t<o.pitches.length;t++){const i=0|o.pitches[t];if(-1==h.pitches.indexOf(i)&&(h.pitches.push(i),h.pitches.length>=e.maxChordSize))break}if(h.pitches.length<1)continue;let c=0;for(let t=0;t<o.points.length;t++){const r=o.points[t];if(null==r||null==r.tick)continue;const l=null==r.pitchBend?0:0|r.pitchBend,u=Math.round(+r.tick*e.partsPerBeat/s);let f,p=n.instruments[this.instruments[0]],m=Math.max(0,e.modCount-h.pitches[0]-1),d=i.getVolumeCapForSetting(a,p.modulators[m],p.modFilterTypes[m]);f=null==r.volume?d:null==r.forMod?Math.max(0,Math.min(d,Math.round((0|r.volume)*d/100))):(0|r.forMod)>0?Math.round(0|r.volume):Math.max(0,Math.min(d,Math.round((0|r.volume)*d/100))),u>i.beatsPerBar*e.partsPerBeat||(0==h.pins.length&&(h.start=u,c=l),h.pins.push(N(l-c,u-h.start,f)))}if(h.pins.length<2)continue;h.end=h.pins[h.pins.length-1].time+h.start;const u=r?e.drumCount-1:e.maxPitch;let f=u,p=0;for(let t=0;t<h.pitches.length;t++)h.pitches[t]+=c,(h.pitches[t]<0||h.pitches[t]>u)&&(h.pitches.splice(t,1),t--),h.pitches[t]<f&&(f=h.pitches[t]),h.pitches[t]>p&&(p=h.pitches[t]);if(!(h.pitches.length<1)){for(let t=0;t<h.pins.length;t++){const e=h.pins[t];e.interval+f<0&&(e.interval=-f),e.interval+p>u&&(e.interval=u-p),t>=2&&e.interval==h.pins[t-1].interval&&e.interval==h.pins[t-2].interval&&e.size==h.pins[t-1].size&&e.size==h.pins[t-2].size&&(h.pins.splice(t-1,1),t--)}0==h.start?h.continuesLastPattern=!0===o.continuesLastPattern:h.continuesLastPattern=!1,this.notes.push(h)}}}}}class G{constructor(t){this.frequency=0,this.amplitude=0,this.waveform=0,this.pulseWidth=.5,this.reset(t)}reset(t){this.frequency=0,this.amplitude=t<=1?e.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(t){this.frequency=t.frequency,this.amplitude=t.amplitude,this.waveform=t.waveform,this.pulseWidth=t.pulseWidth}}class B{constructor(t){this.spectrum=[],this.hash=-1,this.reset(t)}reset(t){for(let i=0;i<e.spectrumControlPoints;i++)if(t)this.spectrum[i]=Math.round(e.spectrumMax*(1/Math.sqrt(1+i/3)));else{const t=0==i||7==i||11==i||14==i||16==i||18==i||21==i||23==i||i>=25;this.spectrum[i]=t?Math.max(0,Math.round(e.spectrumMax*(1-i/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const t=nt.fittingPowerOfTwo(e.spectrumMax+2)-1;let i=0;for(const e of this.spectrum)i=i*t+e>>>0;this.hash=i}}class ${constructor(){this.wave=null,this.g=-1}getCustomWave(t,i){if(this.g==t.hash)return this.wave;this.g=t.hash;const n=e.spectrumNoiseLength;null!=this.wave&&this.wave.length==n+1||(this.wave=new Float32Array(n+1));const s=this.wave;for(let t=0;t<n;t++)s[t]=0;const r=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function o(t){return i+Math.floor(t/e.spectrumControlPointsPerOctave)+r[(t+e.spectrumControlPointsPerOctave)%e.spectrumControlPointsPerOctave]}let l=1;for(let i=0;i<e.spectrumControlPoints+1;i++){const r=i<=0?0:t.spectrum[i-1],h=i>=e.spectrumControlPoints?t.spectrum[e.spectrumControlPoints-1]:t.spectrum[i],c=o(i-1);let u=o(i);i>=e.spectrumControlPoints&&(u=14+.25*(u-14)),0==r&&0==h||(l+=.02*a(s,n,c,u,r/e.spectrumMax,h/e.spectrumMax,-.5))}return t.spectrum[e.spectrumControlPoints-1]>0&&(l+=.02*a(s,n,14+.25*(o(e.spectrumControlPoints)-14),14,t.spectrum[e.spectrumControlPoints-1]/e.spectrumMax,0,-.5)),P(s,n),I(s,5/(Math.sqrt(n)*Math.pow(l,.75))),s[n]=s[0],s}}class W{constructor(){this.harmonics=[],this.hash=-1,this.reset()}reset(){for(let t=0;t<e.harmonicsControlPoints;t++)this.harmonics[t]=0;this.harmonics[0]=e.harmonicsMax,this.harmonics[3]=e.harmonicsMax,this.harmonics[6]=e.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const t=nt.fittingPowerOfTwo(e.harmonicsMax+2)-1;let i=0;for(const e of this.harmonics)i=i*t+e>>>0;this.hash=i}}class j{constructor(){this.wave=null,this.g=-1}getCustomWave(t,i){if(this.g==t.hash&&this.M==i)return this.wave;this.g=t.hash,this.M=i;const n=7==i?e.harmonicsRenderedForPickedString:e.harmonicsRendered,s=e.harmonicsWavelength,a=r(0,null,null);null!=this.wave&&this.wave.length==s+1||(this.wave=new Float32Array(s+1));const o=this.wave;for(let t=0;t<s;t++)o[t]=0;let l=1;for(let i=0;i<n;i++){const r=i+1;let h=i<e.harmonicsControlPoints?t.harmonics[i]:t.harmonics[e.harmonicsControlPoints-1];i>=e.harmonicsControlPoints&&(h*=1-(i-e.harmonicsControlPoints)/(n-e.harmonicsControlPoints));const c=h/e.harmonicsMax;let u=Math.pow(2,h-e.harmonicsMax+1)*Math.sqrt(c);i<e.harmonicsControlPoints&&(l+=u),u*=Math.pow(r,-.25),u*=a[i+589],o[s-r]=u}P(o,s);const h=1/Math.pow(l,.7);for(let t=0;t<o.length;t++)o[t]*=h;return function(t){let e=0;for(let i=0;i<t.length;i++){const n=t[i];t[i]=e,e+=n}}(o),o[s]=o[0],o}}class U{constructor(){this.freq=0,this.gain=e.filterGainCenter,this.type=2}set(t,e){this.freq=t,this.gain=e}getHz(){return U.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(t){return e.filterFreqReferenceHz*Math.pow(2,(t-e.filterFreqReferenceSetting)*e.filterFreqStep)}static getSettingValueFromHz(t){return Math.log2(t/e.filterFreqReferenceHz)/e.filterFreqStep+e.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(t){return Math.max(0,Math.min(e.filterFreqRange-1,Math.round(U.getSettingValueFromHz(t))))}getLinearGain(t=1){const i=(this.gain-e.filterGainCenter)*e.filterGainStep,n=2==this.type?0:-.5,s=n+(i-n)*t;return Math.pow(2,s)}static getRoundedSettingValueFromLinearGain(t){return Math.max(0,Math.min(e.filterGainRange-1,Math.round(Math.log2(t)/e.filterGainStep+e.filterGainCenter)))}toCoefficients(t,i,n=1,s=1){const r=2*Math.PI*Math.max(e.filterFreqMinHz,Math.min(e.filterFreqMaxHz,n*this.getHz()))/i,a=this.getLinearGain(s);switch(this.type){case 0:t.lowPass2ndOrderButterworth(r,a);break;case 1:t.highPass2ndOrderButterworth(r,a);break;case 2:t.peak2ndOrder(r,a,1);break;default:throw new Error}}getVolumeCompensationMult(){const t=(this.freq-e.filterFreqReferenceSetting)*e.filterFreqStep,i=(this.gain-e.filterGainCenter)*e.filterGainStep;switch(this.type){case 0:const n=Math.pow(2,t)*e.filterFreqReferenceHz/8e3,s=(Math.sqrt(1+4*n)-1)/2,r=Math.log2(s);return Math.pow(.5,.2*Math.max(0,i+1)+Math.min(0,Math.max(-3,.595*r+.35*Math.min(0,i+1))));case 1:return Math.pow(.5,.125*Math.max(0,i+1)+Math.min(0,.3*(-t-Math.log2(e.filterFreqReferenceHz/125))+.2*Math.min(0,i+1)));case 2:const a=t+Math.log2(e.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(a/3,2)),2);return Math.pow(.5,.125*Math.max(0,i)+.1*o*Math.min(0,i));default:throw new Error}}}class J{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(t,e,i){let n;this.controlPoints.length<=this.controlPointCount?(n=new U,this.controlPoints[this.controlPointCount]=n):n=this.controlPoints[this.controlPointCount],this.controlPointCount++,n.type=t,n.set(e,i)}toJsonObject(){const t=[];for(let i=0;i<this.controlPointCount;i++){const n=this.controlPoints[i];t.push({type:e.filterTypeNames[n.type],cutoffHz:Math.round(100*n.getHz())/100,linearGain:Math.round(1e4*n.getLinearGain())/1e4})}return t}fromJsonObject(t){if(this.controlPoints.length=0,t)for(const i of t){const t=new U;t.type=e.filterTypeNames.indexOf(i.type),-1==t.type&&(t.type=2),null!=i.cutoffHz?t.freq=U.getRoundedSettingValueFromHz(i.cutoffHz):t.freq=0,null!=i.linearGain?t.gain=U.getRoundedSettingValueFromLinearGain(i.linearGain):t.gain=e.filterGainCenter,this.controlPoints.push(t)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(t,e){if(t.controlPointCount!=e.controlPointCount)return!1;for(let i=0;i<t.controlPointCount;i++)if(t.controlPoints[i].type!=e.controlPoints[i].type)return!1;return!0}static lerpFilters(t,e,i){let n=new J;if(null==t)return t;if(null==e)return e;if(i=Math.max(0,Math.min(1,i)),this.filtersCanMorph(t,e)){for(let s=0;s<t.controlPointCount;s++)n.controlPoints[s]=new U,n.controlPoints[s].type=t.controlPoints[s].type,n.controlPoints[s].freq=t.controlPoints[s].freq+(e.controlPoints[s].freq-t.controlPoints[s].freq)*i,n.controlPoints[s].gain=t.controlPoints[s].gain+(e.controlPoints[s].gain-t.controlPoints[s].gain)*i;return n.controlPointCount=t.controlPointCount,n}return i>=1?e:t}convertLegacySettings(t,e,i){this.reset();const n=2*Math.asin(.475),s=e>1,r=0==e,a=10==t,o=3==i.type||4==i.type||8==i.type||0==i.type,l=48e3,h=8e3*Math.pow(2,.5*(t-10)),c=Math.min(n,2*Math.PI*h/l);if(1==i.type&&!s&&a);else if(r){const t=3.5,e=c*Math.pow(2,t),i=l*(e/(1+e/Math.PI))/(2*Math.PI),n=U.getRoundedSettingValueFromHz(i),s=U.getHzFromSettingValue(n),r=2*Math.PI*s/l,a=new q;a.lowPass1stOrderSimplified(c);const h=new x;h.analyze(a,r);const u=h.magnitude();let f=Math.log2(u);f=.82*(f+t)-t,o&&(f=Math.min(f,-1));const p=Math.pow(2,f),m=U.getRoundedSettingValueFromLinearGain(p);this.addPoint(0,n,m)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),i=.5/t,n=c+(c*(c/(2*Math.PI*8e3/l)*Math.pow(i,.9)+1)-c)*i;let r;r=o?l*Math.min(n,c*Math.pow(2,.25))/(2*Math.PI):l*n/(2*Math.PI);const a=U.getRoundedSettingValueFromHz(r);let h;if(o)h=t;else{const e=new q;e.lowPass2ndOrderSimplified(c,t);const i=new x;i.analyze(e,n),h=i.magnitude()}s||(h=Math.min(h,Math.sqrt(.5)));const u=U.getRoundedSettingValueFromLinearGain(h);this.addPoint(0,a,u)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(t,e,i=!1){this.reset();const n=2*Math.asin(.475),s=0==e&&i,r=48e3,a=8e3*Math.pow(2,.5*(t-10)),o=Math.min(n,2*Math.PI*a/r);if(s){const t=3.5,e=o*Math.pow(2,t),i=r*(e/(1+e/Math.PI))/(2*Math.PI),n=U.getRoundedSettingValueFromHz(i),s=U.getHzFromSettingValue(n),a=2*Math.PI*s/r,l=new q;l.lowPass1stOrderSimplified(o);const h=new x;h.analyze(l,a);const c=h.magnitude();let u=Math.log2(c);u=.82*(u+t)-t;const f=Math.pow(2,u),p=U.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,n,p)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),i=.5/t,n=o+(o*(o/(2*Math.PI*8e3/r)*Math.pow(i,.9)+1)-o)*i;let s;s=r*n/(2*Math.PI);const a=U.getSettingValueFromHz(s);let l;const h=new q;h.lowPass2ndOrderSimplified(o,t);const c=new x;c.analyze(h,n),l=c.magnitude();const u=U.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,a,u)}}}class K{constructor(){this.target=0,this.index=0,this.envelope=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const t={target:e.instrumentAutomationTargets[this.target].name,envelope:e.envelopes[this.envelope].name};return e.instrumentAutomationTargets[this.target].maxCount>1&&(t.index=this.index),t}fromJsonObject(t){this.reset();let i=e.instrumentAutomationTargets.dictionary[t.target];null==i&&(i=e.instrumentAutomationTargets.dictionary.noteVolume),this.target=i.index;let n=e.envelopes.dictionary[t.envelope];null==n&&(n=e.envelopes.dictionary.none),this.envelope=n.index,null!=t.index?this.index=R(0,e.instrumentAutomationTargets[this.target].maxCount,0|t.index):this.index=0}}class Q{constructor(t,i){if(this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.eqFilter=new J,this.eqFilterType=!1,this.eqFilterSimpleCut=e.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.noteFilter=new J,this.noteFilterType=!1,this.noteFilterSimpleCut=e.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.eqSubFilters=[],this.noteSubFilters=[],this.envelopes=[],this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.envelopeCount=0,this.transition=e.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.interval=0,this.vibratoDepth=0,this.vibratoSpeed=10,this.vibratoDelay=0,this.vibratoType=0,this.unison=0,this.effects=0,this.chord=1,this.volume=0,this.pan=e.panCenter,this.panDelay=10,this.arpeggioSpeed=12,this.fastTwoNoteArp=!1,this.legacyTieOver=!1,this.clicklessTransition=!1,this.aliases=!1,this.pulseWidth=e.pulseWidthRange,this.stringSustain=10,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.LFOtime=0,this.nextLFOtime=0,this.arpTime=0,this.customChipWave=new Float32Array(64),this.customChipWaveIntegral=new Float32Array(65),this.operators=[],this.harmonicsWave=new W,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.modChannels=[],this.modInstruments=[],this.modulators=[],this.modFilterTypes=[],this.invalidModulators=[],this.invertWave=!1,i)for(let t=0;t<e.modCount;t++)this.modChannels.push(0),this.modInstruments.push(0),this.modulators.push(e.modulators.dictionary.none.index);this.spectrumWave=new B(t);for(let t=0;t<e.operatorCount;t++)this.operators[t]=new G(t);for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t]=new B(!0);for(let t=0;t<64;t++)this.customChipWave[t]=24-Math.floor(.75*t);let n=0;for(let t=0;t<this.customChipWave.length;t++)n+=this.customChipWave[t];const s=n/this.customChipWave.length;let r=0,a=0;for(let t=0;t<this.customChipWave.length;t++)r+=a,a=this.customChipWave[t]-s,this.customChipWaveIntegral[t]=r;this.customChipWaveIntegral[64]=0}setTypeAndReset(t,i,n){n&&(t=9),this.type=t,this.preset=t,this.volume=0,this.effects=4,this.chorus=e.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor(.5*(e.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(e.echoDelayRange-1)),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=e.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let t=0;t<e.filterMorphCount;t++)this.eqSubFilters[t]=null,this.noteSubFilters[t]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=e.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor(.75*(e.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(e.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(e.bitcrusherQuantizationRange-1)),this.pan=e.panCenter,this.panDelay=10,this.pitchShift=e.pitchShiftCenter,this.detune=e.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.transition=e.transitions.dictionary.normal.index,this.envelopeCount=0,this.invertWave=!1,t){case 0:this.chipWave=2,this.chord=e.chords.dictionary.arpeggio.index;break;case 8:this.chipWave=2,this.chord=e.chords.dictionary.arpeggio.index;for(let t=0;t<64;t++)this.customChipWave[t]=24-Math.floor(.75*t);let n=0;for(let t=0;t<this.customChipWave.length;t++)n+=this.customChipWave[t];const s=n/this.customChipWave.length;let r=0,a=0;for(let t=0;t<this.customChipWave.length;t++)r+=a,a=this.customChipWave[t]-s,this.customChipWaveIntegral[t]=r;this.customChipWaveIntegral[64]=0;break;case 1:this.chord=e.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 2:this.chipNoise=1,this.chord=e.chords.dictionary.arpeggio.index;break;case 3:this.chord=e.chords.dictionary.simultaneous.index,this.spectrumWave.reset(i);break;case 4:this.chord=e.chords.dictionary.simultaneous.index;for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,null==this.drumsetSpectrumWaves[t]&&(this.drumsetSpectrumWaves[t]=new B(!0)),this.drumsetSpectrumWaves[t].reset(i);break;case 5:this.chord=e.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=e.chords.dictionary.arpeggio.index,this.pulseWidth=e.pulseWidthRange;break;case 7:this.chord=e.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 9:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let t=0;t<e.modCount;t++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(e.modulators.dictionary.none.index),this.invalidModulators[t]=!1,this.modFilterTypes[t]=0;break;default:throw new Error("Unrecognized instrument type: "+t)}this.chord!=e.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(t,i){let n=t.filterCutoff,s=t.filterResonance,r=t.filterEnvelope,a=t.pulseEnvelope,o=t.operatorEnvelopes,l=t.feedbackEnvelope;null==n&&(n=0==this.type?6:10),null==s&&(s=0),null==r&&(r=e.envelopes.dictionary.none),null==a&&(a=e.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==o&&(o=[e.envelopes.dictionary[1==this.type?"note size":"none"],e.envelopes.dictionary.none,e.envelopes.dictionary.none,e.envelopes.dictionary.none]),null==l&&(l=e.envelopes.dictionary.none);10==n&&2==r.type&&(r=e.envelopes.dictionary.none);const h=e.algorithms[this.algorithm].carrierCount;let c=!0,u=!0,f=0==r.type||0==a.type;if(1==this.type){f=f||0==l.type;for(let t=0;t<o.length;t++)t<h?0!=o[t].type?u=!1:c=!1:f=f||0==o[t].type}this.envelopeCount=0,1==this.type&&(u&&f?this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteVolume.index,0,e.envelopes.dictionary["note size"].index):c&&!f&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.none.index,0,e.envelopes.dictionary["note size"].index)),1==r.type?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(n,s,r),this.effects&=-33,(i||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=n,this.eqFilterSimplePeak=s)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(n,s,r),this.effects|=32,this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,r.index),(i||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=n,this.noteFilterSimplePeak=s)),1!=a.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.pulseWidth.index,0,a.index);for(let t=0;t<o.length;t++)t<h&&u||1!=o[t].type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.operatorAmplitude.index,t,o[t].index);1!=l.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,l.index)}toJsonObject(){const t={type:e.instrumentTypeNames[this.type],volume:this.volume,eqFilter:this.eqFilter.toJsonObject(),eqFilterType:this.eqFilterType,eqSimpleCut:this.eqFilterSimpleCut,eqSimplePeak:this.eqFilterSimplePeak};this.preset!=this.type&&(t.preset=this.preset);for(let i=0;i<e.filterMorphCount;i++)null!=this.eqSubFilters[i]&&(t["eqSubFilters"+i]=this.eqSubFilters[i].toJsonObject());const i=[];for(const t of e.effectOrder)this.effects&1<<t&&i.push(e.effectNames[t]);if(t.effects=i,u(this.effects)&&(t.transition=e.transitions[this.transition].name,t.clicklessTransition=this.clicklessTransition),f(this.effects)&&(t.chord=this.getChord().name,t.fastTwoNoteArp=this.fastTwoNoteArp,t.arpeggioSpeed=this.arpeggioSpeed),p(this.effects)&&(t.pitchShiftSemitones=this.pitchShift),m(this.effects)&&(t.detuneCents=nt.detuneToCents(this.detune)),d(this.effects)&&(-1==this.vibrato&&(this.vibrato=5),5!=this.vibrato?t.vibrato=e.vibratos[this.vibrato].name:t.vibrato="custom",t.vibratoDepth=this.vibratoDepth,t.vibratoDelay=this.vibratoDelay,t.vibratoSpeed=this.vibratoSpeed,t.vibratoType=this.vibratoType),y(this.effects)){t.noteFilterType=this.noteFilterType,t.noteSimpleCut=this.noteFilterSimpleCut,t.noteSimplePeak=this.noteFilterSimplePeak,t.noteFilter=this.noteFilter.toJsonObject();for(let i=0;i<e.filterMorphCount;i++)null!=this.noteSubFilters[i]&&(t["noteSubFilters"+i]=this.noteSubFilters[i].toJsonObject())}if(v(this.effects)&&(t.distortion=Math.round(100*this.distortion/(e.distortionRange-1)),t.aliases=this.aliases),g(this.effects)&&(t.bitcrusherOctave=(e.bitcrusherFreqRange-1-this.bitcrusherFreq)*e.bitcrusherOctaveStep,t.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(e.bitcrusherQuantizationRange-1))),b(this.effects)&&(t.pan=Math.round(100*(this.pan-e.panCenter)/e.panCenter),t.panDelay=this.panDelay),M(this.effects)&&(t.chorus=Math.round(100*this.chorus/(e.chorusRange-1))),S(this.effects)&&(t.echoSustain=Math.round(100*this.echoSustain/(e.echoSustainRange-1)),t.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*e.echoDelayStepTicks/(e.ticksPerPart*e.partsPerBeat))/1e3),w(this.effects)&&(t.reverb=Math.round(100*this.reverb/(e.reverbRange-1))),4!=this.type&&(t.fadeInSeconds=Math.round(1e4*nt.fadeInSettingToSeconds(this.fadeIn))/1e4,t.fadeOutTicks=nt.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){t.harmonics=[];for(let i=0;i<e.harmonicsControlPoints;i++)t.harmonics[i]=Math.round(100*this.harmonicsWave.harmonics[i]/e.harmonicsMax)}if(2==this.type)t.wave=e.chipNoises[this.chipNoise].name;else if(3==this.type){t.spectrum=[];for(let i=0;i<e.spectrumControlPoints;i++)t.spectrum[i]=Math.round(100*this.spectrumWave.spectrum[i]/e.spectrumMax)}else if(4==this.type){t.drums=[];for(let i=0;i<e.drumCount;i++){const n=[];for(let t=0;t<e.spectrumControlPoints;t++)n[t]=Math.round(100*this.drumsetSpectrumWaves[i].spectrum[t]/e.spectrumMax);t.drums[i]={filterEnvelope:this.getDrumsetEnvelope(i).name,spectrum:n}}}else if(0==this.type)t.wave=e.chipWaves[this.chipWave].name,t.unison=e.unisons[this.unison].name;else if(6==this.type)t.pulseWidth=this.pulseWidth;else if(7==this.type)t.unison=e.unisons[this.unison].name,t.stringSustain=Math.round(100*this.stringSustain/(e.stringSustainRange-1));else if(5==this.type)t.unison=e.unisons[this.unison].name;else if(1==this.type){const i=[];for(const t of this.operators)i.push({frequency:e.operatorFrequencies[t.frequency].name,amplitude:t.amplitude,waveform:e.operatorWaves[t.waveform].name,pulseWidth:t.pulseWidth});t.algorithm=e.algorithms[this.algorithm].name,t.feedbackType=e.feedbacks[this.feedbackType].name,t.feedbackAmplitude=this.feedbackAmplitude,t.operators=i}else if(8==this.type){t.wave=e.chipWaves[this.chipWave].name,t.unison=e.unisons[this.unison].name,t.customChipWave=new Float64Array(64),t.customChipWaveIntegral=new Float64Array(65);for(let e=0;e<this.customChipWave.length;e++)t.customChipWave[e]=this.customChipWave[e]}else{if(9!=this.type)throw new Error("Unrecognized instrument type");t.modChannels=[],t.modInstruments=[],t.modSettings=[],t.modStatuses=[];for(let i=0;i<e.modCount;i++)t.modChannels[i]=this.modChannels[i],t.modInstruments[i]=this.modInstruments[i],t.modSettings[i]=this.modulators[i]}const n=[];for(let t=0;t<this.envelopeCount;t++)n.push(this.envelopes[t].toJsonObject());return t.envelopes=n,t}fromJsonObject(t,i,n,s,r,a=0){null==t&&(t={});let o=e.instrumentTypeNames.indexOf(t.type);if(-1==o&&(o=n?9:i?2:0),this.setTypeAndReset(o,i,n),null!=t.preset&&(this.preset=t.preset>>>0),null!=t.volume?this.volume=R(-e.volumeRange/2,e.volumeRange/2+1,0|t.volume):this.volume=0,Array.isArray(t.effects)){let i=0;for(let n=0;n<t.effects.length;n++)i|=1<<e.effectNames.indexOf(t.effects[n]);this.effects=4095&i}else{const e=["none","reverb","chorus","chorus & reverb"];this.effects=e.indexOf(t.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=e.transitions.dictionary.normal.index;const l=t.transition||t.envelope;if(null!=l){let i=e.transitions.dictionary[l];if(null==t.fadeInSeconds||null==t.fadeOutTicks){const t={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[l];null!=t&&(i=e.transitions.dictionary[t.transition],this.fadeIn=nt.secondsToFadeInSetting(t.fadeInSeconds),this.fadeOut=nt.ticksToFadeOutSetting(t.fadeOutTicks))}null!=i&&(this.transition=i.index),this.transition!=e.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=t.fadeInSeconds&&(this.fadeIn=nt.secondsToFadeInSetting(+t.fadeInSeconds)),null!=t.fadeOutTicks&&(this.fadeOut=nt.ticksToFadeOutSetting(+t.fadeOutTicks));{const i=t.chord,n={harmony:"simultaneous"},s=e.chords.dictionary[n[i]]||e.chords.dictionary[i];null!=s?this.chord=s.index:2==this.type?this.chord=e.chords.dictionary.arpeggio.index:7==this.type?this.chord=e.chords.dictionary.strum.index:0==this.type?this.chord=e.chords.dictionary.arpeggio.index:1==this.type?this.chord=e.chords.dictionary["custom interval"].index:this.chord=e.chords.dictionary.simultaneous.index}this.unison=e.unisons.dictionary.none.index;const h=t.unison||t.interval||t.chorus;if(null!=h){const t={union:"none",fifths:"fifth",octaves:"octave"},i=e.unisons.dictionary[t[h]]||e.unisons.dictionary[h];null!=i&&(this.unison=i.index)}"custom harmony"==t.chorus&&(this.unison=e.unisons.dictionary.hum.index,this.chord=e.chords.dictionary["custom interval"].index),this.chord==e.chords.dictionary.simultaneous.index||Array.isArray(t.effects)||(this.effects=2048|this.effects),null!=t.pitchShiftSemitones&&(this.pitchShift=R(0,e.pitchShiftRange,Math.round(+t.pitchShiftSemitones))),null!=t.detuneCents&&(this.detune=R(e.detuneMin,e.detuneMax+1,Math.round(nt.centsToDetune(+t.detuneCents)))),this.vibrato=e.vibratos.dictionary.none.index;const c=t.vibrato||t.effect;if(null!=c){const i={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},n=e.vibratos.dictionary[i[h]]||e.vibratos.dictionary[c];null!=n?this.vibrato=n.index:"custom"==c&&(this.vibrato=e.vibratos.length),this.vibrato==e.vibratos.length?(this.vibratoDepth=t.vibratoDepth,this.vibratoSpeed=t.vibratoSpeed,this.vibratoDelay=t.vibratoDelay,this.vibratoType=t.vibratoType):(this.vibratoDepth=e.vibratos[this.vibrato].amplitude,this.vibratoDelay=e.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=e.vibratos[this.vibrato].type),n!=e.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=t.pan?(this.pan=R(0,e.panMax+1,Math.round(e.panCenter+(0|t.pan)*e.panCenter/100)),this.pan!=e.panCenter&&(this.effects=4|this.effects)):(this.pan=e.panCenter,this.effects=4|this.effects),null!=t.panDelay?this.panDelay=0|t.panDelay:this.panDelay=10,null!=t.detune?this.detune=R(e.detuneMin,e.detuneMax+1,0|t.detune):null==t.detuneCents&&(this.detune=e.detuneCenter),null!=t.distortion&&(this.distortion=R(0,e.distortionRange,Math.round((e.distortionRange-1)*(0|t.distortion)/100))),null!=t.bitcrusherOctave&&(this.bitcrusherFreq=e.bitcrusherFreqRange-1-+t.bitcrusherOctave/e.bitcrusherOctaveStep),null!=t.bitcrusherQuantization&&(this.bitcrusherQuantization=R(0,e.bitcrusherQuantizationRange,Math.round((e.bitcrusherQuantizationRange-1)*(0|t.bitcrusherQuantization)/100))),null!=t.echoSustain&&(this.echoSustain=R(0,e.echoSustainRange,Math.round((e.echoSustainRange-1)*(0|t.echoSustain)/100))),null!=t.echoDelayBeats&&(this.echoDelay=R(0,e.echoDelayRange,Math.round(+t.echoDelayBeats*(e.ticksPerPart*e.partsPerBeat)/e.echoDelayStepTicks-1))),isNaN(t.chorus)||(this.chorus=R(0,e.chorusRange,Math.round((e.chorusRange-1)*(0|t.chorus)/100))),null!=t.reverb?this.reverb=R(0,e.reverbRange,Math.round((e.reverbRange-1)*(0|t.reverb)/100)):this.reverb=a,null!=t.pulseWidth?this.pulseWidth=R(1,e.pulseWidthRange+1,Math.round(t.pulseWidth)):this.pulseWidth=e.pulseWidthRange,null!=t.harmonics){for(let i=0;i<e.harmonicsControlPoints;i++)this.harmonicsWave.harmonics[i]=Math.max(0,Math.min(e.harmonicsMax,Math.round(e.harmonicsMax*+t.harmonics[i]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(null!=t.spectrum)for(let i=0;i<e.spectrumControlPoints;i++)this.spectrumWave.spectrum[i]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+t.spectrum[i]/100)));else this.spectrumWave.reset(i);null!=t.stringSustain?this.stringSustain=R(0,e.stringSustainRange,Math.round((e.stringSustainRange-1)*(0|t.stringSustain)/100)):this.stringSustain=10,2==this.type&&(this.chipNoise=e.chipNoises.findIndex((e=>e.name==t.wave)),-1==this.chipNoise&&(this.chipNoise=1));const u={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},f=t=>null!=u[t]?e.envelopes.dictionary[u[t]]:e.envelopes.dictionary[t];if(4==this.type&&null!=t.drums)for(let i=0;i<e.drumCount;i++){const n=t.drums[i];if(null!=n){if(this.drumsetEnvelopes[i]=e.envelopes.dictionary["twang 2"].index,null!=n.filterEnvelope){const t=f(n.filterEnvelope);null!=t&&(this.drumsetEnvelopes[i]=t.index)}if(null!=n.spectrum)for(let t=0;t<e.spectrumControlPoints;t++)this.drumsetSpectrumWaves[i].spectrum[t]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+n.spectrum[t]/100)))}}if(0==this.type){const i={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=null!=i[t.wave]?i[t.wave]:e.chipWaves.findIndex((e=>e.name==t.wave)),-1==this.chipWave&&(this.chipWave=1)}if(1==this.type){this.algorithm=e.algorithms.findIndex((e=>e.name==t.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=e.feedbacks.findIndex((e=>e.name==t.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0),null!=t.feedbackAmplitude?this.feedbackAmplitude=R(0,e.operatorAmplitudeMax+1,0|t.feedbackAmplitude):this.feedbackAmplitude=0;for(let i=0;i<e.operatorCount;i++){const n=this.operators[i];let s;null!=t.operators&&(s=t.operators[i]),null==s&&(s={}),n.frequency=e.operatorFrequencies.findIndex((t=>t.name==s.frequency)),-1==n.frequency&&(n.frequency=0),null!=s.amplitude?n.amplitude=R(0,e.operatorAmplitudeMax+1,0|s.amplitude):n.amplitude=0,null!=s.waveform?(n.waveform=e.operatorWaves.findIndex((t=>t.name==s.waveform)),-1==n.waveform&&("square"==s.waveform?(n.waveform=e.operatorWaves.dictionary["pulse width"].index,n.pulseWidth=5):n.waveform=0)):n.waveform=0,null!=s.pulseWidth?n.pulseWidth=0|s.pulseWidth:n.pulseWidth=5}}else if(8==this.type){if(t.customChipWave){for(let e=0;e<64;e++)this.customChipWave[e]=t.customChipWave[e];let e=0;for(let t=0;t<this.customChipWave.length;t++)e+=this.customChipWave[t];const i=e/this.customChipWave.length;let n=0,s=0;for(let t=0;t<this.customChipWave.length;t++)n+=s,s=this.customChipWave[t]-i,this.customChipWaveIntegral[t]=n;this.customChipWaveIntegral[64]=0}}else if(9==this.type&&null!=t.modChannels)for(let i=0;i<e.modCount;i++)this.modChannels[i]=t.modChannels[i],this.modInstruments[i]=t.modInstruments[i],this.modulators[i]=t.modSettings[i];if(9!=this.type){this.chord==e.chords.dictionary.arpeggio.index&&null!=t.arpeggioSpeed?this.arpeggioSpeed=t.arpeggioSpeed:this.arpeggioSpeed=s?9:12,null!=t.fastTwoNoteArp?this.fastTwoNoteArp=t.fastTwoNoteArp:this.fastTwoNoteArp=r,null!=t.clicklessTransition?this.clicklessTransition=t.clicklessTransition:this.clicklessTransition=!1,null!=t.aliases?this.aliases=t.aliases:this.aliases=!1,null!=t.noteFilterType&&(this.noteFilterType=t.noteFilterType),null!=t.noteSimpleCut&&(this.noteFilterSimpleCut=t.noteSimpleCut),null!=t.noteSimplePeak&&(this.noteFilterSimplePeak=t.noteSimplePeak),null!=t.noteFilter?this.noteFilter.fromJsonObject(t.noteFilter):this.noteFilter.reset();for(let i=0;i<e.filterMorphCount;i++)Array.isArray(t["noteSubFilters"+i])&&(this.noteSubFilters[i]=new J,this.noteSubFilters[i].fromJsonObject(t["noteSubFilters"+i]));if(null!=t.eqFilterType&&(this.eqFilterType=t.eqFilterType),null!=t.eqSimpleCut&&(this.eqFilterSimpleCut=t.eqSimpleCut),null!=t.eqSimplePeak&&(this.eqFilterSimplePeak=t.eqSimplePeak),Array.isArray(t.eqFilter))this.eqFilter.fromJsonObject(t.eqFilter);else{this.eqFilter.reset();const i={},n=8e3,s=11,r=8;if(null!=t.filterCutoffHz?i.filterCutoff=R(0,s,Math.round(s-1+2*Math.log((0|t.filterCutoffHz)/n)/Math.LN2)):i.filterCutoff=0==this.type?6:10,null!=t.filterResonance?i.filterResonance=R(0,r,Math.round((r-1)*(0|t.filterResonance)/100)):i.filterResonance=0,i.filterEnvelope=f(t.filterEnvelope),i.pulseEnvelope=f(t.pulseEnvelope),i.feedbackEnvelope=f(t.feedbackEnvelope),Array.isArray(t.operators)){i.operatorEnvelopes=[];for(let n=0;n<e.operatorCount;n++){let s;null!=t.operators[n]&&(s=f(t.operators[n].envelope)),i.operatorEnvelopes[n]=null!=s?s:e.envelopes.dictionary.none}}if(null!=t.filter){const e=[10,6,3,0,8,5,2],n=["none","none","none","none","decay 1","decay 2","decay 3"],s=["none","bright","medium","soft","decay bright","decay medium","decay soft"],r={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let a=null!=r[t.filter]?r[t.filter]:s.indexOf(t.filter);-1==a&&(a=0),i.filterCutoff=e[a],i.filterEnvelope=f(n[a]),i.filterResonance=0}this.convertLegacySettings(i,!0)}null!=t.invertWave?this.invertWave=t.invertWave:this.invertWave=!1;for(let i=0;i<e.filterMorphCount;i++)Array.isArray(t["eqSubFilters"+i])&&(this.eqSubFilters[i]=new J,this.eqSubFilters[i].fromJsonObject(t["eqSubFilters"+i]));if(Array.isArray(t.envelopes)){const i=t.envelopes;for(let t=0;t<i.length&&!(this.envelopeCount>=e.maxEnvelopeCount);t++){const e=new K;e.fromJsonObject(i[t]),this.addEnvelope(e.target,e.index,e.envelope)}}}}static frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}addEnvelope(t,i,n){let s=!1;if(this.supportsEnvelopeTarget(t,i)||(s=!0),this.envelopeCount>=e.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new K;const r=this.envelopes[this.envelopeCount];r.target=s?e.instrumentAutomationTargets.dictionary.none.index:t,r.index=s?0:i,r.envelope=n,this.envelopeCount++}supportsEnvelopeTarget(t,i){const n=e.instrumentAutomationTargets[t];if(i>=n.maxCount)return!1;if(null!=n.compatibleInstruments&&-1==n.compatibleInstruments.indexOf(this.type))return!1;if(null!=n.effect&&0==(this.effects&1<<n.effect))return!1;if(n.isFilter){let t=this.noteFilter.controlPointCount;if(this.noteFilterType&&(t=1),i>=t)return!1}return!0}clearInvalidEnvelopeTargets(){for(let t=0;t<this.envelopeCount;t++){const i=this.envelopes[t].target,n=this.envelopes[t].index;this.supportsEnvelopeTarget(i,n)||(this.envelopes[t].target=e.instrumentAutomationTargets.dictionary.none.index,this.envelopes[t].index=0)}}getTransition(){return u(this.effects)?e.transitions[this.transition]:9==this.type?e.transitions.dictionary.interrupt:e.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:nt.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?e.drumsetFadeOutTicks:nt.fadeOutSettingToTicks(this.fadeOut)}getChord(){return f(this.effects)?e.chords[this.chord]:e.chords.dictionary.simultaneous}getDrumsetEnvelope(t){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return e.envelopes[this.drumsetEnvelopes[t]]}}class _{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1,this.name=""}}class Y{constructor(t){this.channels=[],this.limitDecay=4,this.limitRise=4e3,this.compressionThreshold=1,this.limitThreshold=1,this.compressionRatio=1,this.limitRatio=1,this.masterGain=1,this.inVolumeCap=0,this.outVolumeCap=0,this.getNewNoteVolume=(t,i,n,s)=>{if(t&&null!=i&&null!=n&&null!=s){s=e.modCount-s-1;let t=e.modulators[this.channels[i].instruments[n].modulators[s]].newNoteVol,r=e.modulators.dictionary.tempo.index;return this.channels[i].instruments[n].modulators[s]==r&&(t=this.tempo-e.modulators[r].convertRealFactor),null!=t?t:6}return 6},this.getVolumeCap=(t,i,n,s)=>{if(t&&null!=i&&null!=n&&null!=s){s=e.modCount-s-1;let t=this.channels[i].instruments[n],r=e.modulators[t.modulators[s]],a=r.maxRawVol;return null!=a?("eq filter"!=r.name&&"note filter"!=r.name||(a=e.filterMorphCount-1,t.modFilterTypes[s]>0&&t.modFilterTypes[s]%2?a=e.filterFreqRange:t.modFilterTypes[s]>0&&(a=e.filterGainRange)),a):6}return 6},this.getVolumeCapForSetting=(t,i,n)=>{if(t){let t=e.modulators[i].maxRawVol;return null!=t?(null==n||"eq filter"!=e.modulators[i].name&&"note filter"!=e.modulators[i].name||(t=e.filterMorphCount-1,n>0&&n%2?t=e.filterFreqRange:n>0&&(t=e.filterGainRange)),t):e.noteSizeMax}return e.noteSizeMax},null!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?e.layeredInstrumentCountMax:e.instrumentCountMin,this.patternInstruments?e.patternInstrumentCountMax:e.instrumentCountMin)}getMaxInstrumentsPerPattern(t){return this.getMaxInstrumentsPerPatternForChannel(this.channels[t])}getMaxInstrumentsPerPatternForChannel(t){return this.layeredInstruments?Math.min(e.layeredInstrumentCountMax,t.instruments.length):1}getChannelIsNoise(t){return t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(t){return t>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(t=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.title="Unnamed",document.title=k.versionDisplayName,t){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=0;for(let t=0;t<this.getChannelCount();t++){const i=t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount,n=t>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=t&&(this.channels[t]=new _);const s=this.channels[t];s.octave=Math.max(3-t,0);for(let t=0;t<this.patternsPerChannel;t++)s.patterns.length<=t?s.patterns[t]=new V:s.patterns[t].reset();s.patterns.length=this.patternsPerChannel;for(let t=0;t<e.instrumentCountMin;t++)s.instruments.length<=t&&(s.instruments[t]=new Q(i,n)),s.instruments[t].setTypeAndReset(n?9:i?2:0,i,n);s.instruments.length=e.instrumentCountMin;for(let t=0;t<this.barCount;t++)s.bars[t]=t<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let t,i=[];i.push(Y.S),i.push(E[Y.k]),i.push(78);var n=encodeURIComponent(this.title);i.push(E[n.length>>6],E[63&n.length]);for(let t=0;t<n.length;t++)i.push(n.charCodeAt(t));i.push(110,E[this.pitchChannelCount],E[this.noiseChannelCount],E[this.modChannelCount]),i.push(115,E[this.scale]),i.push(107,E[this.key]),i.push(108,E[this.loopStart>>6],E[63&this.loopStart]),i.push(101,E[this.loopLength-1>>6],E[this.loopLength-1&63]),i.push(116,E[this.tempo>>6],E[63&this.tempo]),i.push(97,E[this.beatsPerBar-1]),i.push(103,E[this.barCount-1>>6],E[this.barCount-1&63]),i.push(106,E[this.patternsPerChannel-1>>6],E[this.patternsPerChannel-1&63]),i.push(114,E[this.rhythm]),i.push(79),1!=this.compressionRatio||1!=this.limitRatio||4e3!=this.limitRise||4!=this.limitDecay||1!=this.limitThreshold||1!=this.compressionThreshold||1!=this.masterGain?(i.push(E[Math.round(this.compressionRatio<1?10*this.compressionRatio:10+60*(this.compressionRatio-1))]),i.push(E[Math.round(this.limitRatio<1?10*this.limitRatio:9+this.limitRatio)]),i.push(E[this.limitDecay]),i.push(E[Math.round((this.limitRise-2e3)/250)]),i.push(E[Math.round(20*this.compressionThreshold)]),i.push(E[Math.round(20*this.limitThreshold)]),i.push(E[Math.round(50*this.masterGain)>>6],E[63&Math.round(50*this.masterGain)])):i.push(E[63]),i.push(85);for(let t=0;t<this.getChannelCount();t++){var s=encodeURIComponent(this.channels[t].name);i.push(E[s.length>>6],E[63&s.length]);for(let t=0;t<s.length;t++)i.push(s.charCodeAt(t))}if(i.push(105,E[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let t=0;t<this.getChannelCount();t++)i.push(E[this.channels[t].instruments.length-e.instrumentCountMin]);i.push(111);for(let t=0;t<this.pitchChannelCount;t++)i.push(E[this.channels[t].octave]);for(let t=0;t<this.getChannelCount();t++)for(let n=0;n<this.channels[t].instruments.length;n++){const s=this.channels[t].instruments[n];if(i.push(84,E[s.type]),i.push(118,E[s.volume+e.volumeRange/2>>6],E[s.volume+e.volumeRange/2&63]),i.push(117,E[s.preset>>6],E[63&s.preset]),i.push(102),i.push(E[+s.eqFilterType]),s.eqFilterType)i.push(E[s.eqFilterSimpleCut]),i.push(E[s.eqFilterSimplePeak]);else{if(null==s.eqFilter)i.push(E[0]),console.log("Null EQ filter settings detected in toBase64String for channelIndex "+t+", instrumentIndex "+n);else{i.push(E[s.eqFilter.controlPointCount]);for(let t=0;t<s.eqFilter.controlPointCount;t++){const e=s.eqFilter.controlPoints[t];i.push(E[e.type],E[Math.round(e.freq)],E[Math.round(e.gain)])}}let r=0;for(let t=0;t<e.filterMorphCount-1;t++)r|=+(null!=s.eqSubFilters[t+1])<<t;i.push(E[r>>6],E[63&r]);for(let t=0;t<e.filterMorphCount-1;t++)if(r&1<<t){i.push(E[s.eqSubFilters[t+1].controlPointCount]);for(let e=0;e<s.eqSubFilters[t+1].controlPointCount;e++){const n=s.eqSubFilters[t+1].controlPoints[e];i.push(E[n.type],E[Math.round(n.freq)],E[Math.round(n.gain)])}}}if(i.push(113,E[s.effects>>6],E[63&s.effects]),y(s.effects))if(i.push(E[+s.noteFilterType]),s.noteFilterType)i.push(E[s.noteFilterSimpleCut]),i.push(E[s.noteFilterSimplePeak]);else{if(null==s.noteFilter)i.push(E[0]),console.log("Null note filter settings detected in toBase64String for channelIndex "+t+", instrumentIndex "+n);else{i.push(E[s.noteFilter.controlPointCount]);for(let t=0;t<s.noteFilter.controlPointCount;t++){const e=s.noteFilter.controlPoints[t];i.push(E[e.type],E[Math.round(e.freq)],E[Math.round(e.gain)])}}let r=0;for(let t=0;t<e.filterMorphCount-1;t++)r|=+(null!=s.noteSubFilters[t+1])<<t;i.push(E[r>>6],E[63&r]);for(let t=0;t<e.filterMorphCount-1;t++)if(r&1<<t){i.push(E[s.noteSubFilters[t+1].controlPointCount]);for(let e=0;e<s.noteSubFilters[t+1].controlPointCount;e++){const n=s.noteSubFilters[t+1].controlPoints[e];i.push(E[n.type],E[Math.round(n.freq)],E[Math.round(n.gain)])}}}if(u(s.effects)&&i.push(E[s.transition]),f(s.effects)&&(i.push(E[s.chord]),s.chord==e.chords.dictionary.arpeggio.index&&(i.push(E[s.arpeggioSpeed]),i.push(E[+s.fastTwoNoteArp]))),p(s.effects)&&i.push(E[s.pitchShift]),m(s.effects)&&i.push(E[s.detune-e.detuneMin>>6],E[s.detune-e.detuneMin&63]),d(s.effects)&&(i.push(E[s.vibrato]),s.vibrato==e.vibratos.length&&(i.push(E[Math.round(25*s.vibratoDepth)]),i.push(E[s.vibratoSpeed]),i.push(E[Math.round(s.vibratoDelay)]),i.push(E[s.vibratoType]))),v(s.effects)&&(i.push(E[s.distortion]),i.push(E[+s.aliases])),g(s.effects)&&i.push(E[s.bitcrusherFreq],E[s.bitcrusherQuantization]),b(s.effects)&&(i.push(E[s.pan>>6],E[63&s.pan]),i.push(E[s.panDelay])),M(s.effects)&&i.push(E[s.chorus]),S(s.effects)&&i.push(E[s.echoSustain],E[s.echoDelay]),w(s.effects)&&i.push(E[s.reverb]),4!=s.type&&(i.push(100,E[s.fadeIn],E[s.fadeOut]),i.push(E[+s.clicklessTransition])),5==s.type||7==s.type){i.push(72);const t=new L;for(let i=0;i<e.harmonicsControlPoints;i++)t.write(e.harmonicsControlPointBits,s.harmonicsWave.harmonics[i]);t.encodeBase64(i)}if(0==s.type)i.push(119,E[s.chipWave]),i.push(104,E[s.unison]);else if(1==s.type){i.push(65,E[s.algorithm]),i.push(70,E[s.feedbackType]),i.push(66,E[s.feedbackAmplitude]),i.push(81);for(let t=0;t<e.operatorCount;t++)i.push(E[s.operators[t].frequency]);i.push(80);for(let t=0;t<e.operatorCount;t++)i.push(E[s.operators[t].amplitude]);i.push(82);for(let t=0;t<e.operatorCount;t++)i.push(E[s.operators[t].waveform]),3==s.operators[t].waveform&&i.push(E[s.operators[t].pulseWidth])}else if(8==s.type){i.push(119,E[s.chipWave]),i.push(104,E[s.unison]),i.push(77);for(let t=0;t<64;t++)i.push(E[s.customChipWave[t]+24])}else if(2==s.type)i.push(119,E[s.chipNoise]);else if(3==s.type){i.push(83);const t=new L;for(let i=0;i<e.spectrumControlPoints;i++)t.write(e.spectrumControlPointBits,s.spectrumWave.spectrum[i]);t.encodeBase64(i)}else if(4==s.type){i.push(122);for(let t=0;t<e.drumCount;t++)i.push(E[s.drumsetEnvelopes[t]]);i.push(83);const t=new L;for(let i=0;i<e.drumCount;i++)for(let n=0;n<e.spectrumControlPoints;n++)t.write(e.spectrumControlPointBits,s.drumsetSpectrumWaves[i].spectrum[n]);t.encodeBase64(i)}else if(5==s.type)i.push(104,E[s.unison]);else if(6==s.type)i.push(87,E[s.pulseWidth]);else if(7==s.type)i.push(104,E[s.unison]),i.push(73,E[s.stringSustain]);else if(9!=s.type)throw new Error("Unknown instrument type.");i.push(69,E[s.envelopeCount]);for(let t=0;t<s.envelopeCount;t++)i.push(E[s.envelopes[t].target]),e.instrumentAutomationTargets[s.envelopes[t].target].maxCount>1&&i.push(E[s.envelopes[t].index]),i.push(E[s.envelopes[t].envelope])}i.push(98),t=new L;let r=0;for(;1<<r<this.patternsPerChannel+1;)r++;for(let e=0;e<this.getChannelCount();e++)for(let i=0;i<this.barCount;i++)t.write(r,this.channels[e].bars[i]);t.encodeBase64(i),i.push(112),t=new L;const a=new L,o=Y.getNeededBits(e.noteSizeMax);for(let i=0;i<this.getChannelCount();i++){const n=this.channels[i],s=this.getMaxInstrumentsPerPattern(i),r=this.getChannelIsNoise(i),l=this.getChannelIsMod(i),h=Y.getNeededBits(s-e.instrumentCountMin),c=Y.getNeededBits(n.instruments.length-1);if(l){const s=Y.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let r=0;r<n.instruments.length;r++){let n=this.channels[i].instruments[r];for(let i=0;i<e.modCount;i++){const r=n.modChannels[i],a=n.modInstruments[i],o=n.modulators[i],l=n.modFilterTypes[i];let h=e.modulators[o].forSong?2:0;o==e.modulators.dictionary.none.index&&(h=3),t.write(2,h),0!=h&&1!=h||(t.write(8,r),t.write(s,a)),3!=h&&t.write(6,o),"eq filter"!=e.modulators[n.modulators[i]].name&&"note filter"!=e.modulators[n.modulators[i]].name||t.write(6,l)}}}const u=r||l?0:n.octave*e.pitchesPerOctave;let f=r?4:u;const p=l?[0,1,2,3,4,5]:r?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],m=[];for(let t=0;t<p.length;t++)p[t]+=u;for(const i of n.patterns){if(this.patternInstruments){const n=A(e.instrumentCountMin,s,i.instruments.length);t.write(h,n-e.instrumentCountMin);for(let e=0;e<n;e++)t.write(c,i.instruments[e])}if(i.notes.length>0){t.write(1,1);let n=0;for(const e of i.notes){e.start<n&&l&&(t.write(2,0),t.write(1,1),t.writePartDuration(n-e.start)),e.start>n&&(t.write(2,0),l&&t.write(1,0),t.writePartDuration(e.start-n)),a.clear(),1==e.pitches.length?a.write(1,0):(a.write(1,1),a.write(3,e.pitches.length-2)),a.writePinCount(e.pins.length-1),l?a.write(9,e.pins[0].size):a.write(o,e.pins[0].size);let i=0,s=e.pitches[0],r=s;const h=[];for(let t=1;t<e.pins.length;t++){const n=e.pins[t],c=s+n.interval;r!=c?(a.write(1,1),h.push(c),r=c):a.write(1,0),a.writePartDuration(n.time-i),i=n.time,l?a.write(9,n.size):a.write(o,n.size)}const c=String.fromCharCode.apply(null,a.encodeBase64([])),u=m.indexOf(c);-1==u?(t.write(2,1),t.concat(a)):(t.write(1,1),t.writeLongTail(0,0,u),m.splice(u,1)),m.unshift(c),m.length>10&&m.pop();const d=e.pitches.concat(h);for(let i=0;i<d.length;i++){const n=d[i],s=p.indexOf(n);if(-1==s){let e=0,i=f;if(i<n)for(;i!=n;)i++,-1==p.indexOf(i)&&e++;else for(;i!=n;)i--,-1==p.indexOf(i)&&e--;t.write(1,0),t.writePitchInterval(e)}else t.write(1,1),t.write(4,s),p.splice(s,1);p.unshift(n),p.length>16&&p.pop(),f=i==e.pitches.length-1?e.pitches[0]:n}0==e.start&&t.write(1,e.continuesLastPattern?1:0),n=e.end}n<this.beatsPerBar*e.partsPerBeat+ +l&&(t.write(2,0),l&&t.write(1,0),t.writePartDuration(this.beatsPerBar*e.partsPerBeat+ +l-n))}else t.write(1,0)}}let l=t.lengthBase64(),h=[];for(;l>0;)h.unshift(E[63&l]),l>>=6;i.push(E[h.length]),Array.prototype.push.apply(i,h),t.encodeBase64(i);const c=64e3;if(i.length<c)return String.fromCharCode.apply(null,i);{let t="";for(let e=0;e<i.length;e+=c)t+=String.fromCharCode.apply(null,i.slice(e,e+c));return t}}static I(t){return 0==t?t=1:1==t&&(t=0),e.envelopes[R(0,e.envelopes.length,t)]}fromBase64String(t){if(null==t||""==t)return void this.initToDefault(!0);let i=0;for(;t.charCodeAt(i)<=32;)i++;if(35==t.charCodeAt(i)&&i++,123==t.charCodeAt(i))return void this.fromJsonObject(JSON.parse(0==i?t:t.substring(i)));let n,s;106==t.charCodeAt(i)?(n=!1,s=!0,i++):(n=!0,s=!1);const r=z[t.charCodeAt(i++)];if(n&&(-1==r||r>Y.P||r<Y.T))return;if(s&&(-1==r||r>Y.k||r<Y.q))return;const a=r<2,o=r<3,l=r<4,h=r<5,c=r<6,I=r<7,F=r<8,P=r<9;this.initToDefault(n&&P||s&&h);const T=n&&P||s&&h;if(o&&n){for(const t of this.channels)t.instruments[0].transition=e.transitions.dictionary.interrupt.index,t.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let q=null;if(n&&P||s&&h){q=[];for(let t=q.length;t<this.getChannelCount();t++){q[t]=[];for(let i=0;i<e.instrumentCountMin;i++)q[t][i]={}}}let x,D=0,O=0,E=-1,L=!1,G=!1;for(;i<t.length;)switch(x=t.charCodeAt(i++)){case 78:var B=(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)];this.title=decodeURIComponent(t.substring(i,i+B)),document.title=this.title+" - "+k.versionDisplayName,i+=B;break;case 110:this.pitchChannelCount=z[t.charCodeAt(i++)],this.noiseChannelCount=z[t.charCodeAt(i++)],this.modChannelCount=n||a?0:z[t.charCodeAt(i++)],this.pitchChannelCount=A(e.pitchChannelCountMin,e.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=A(e.noiseChannelCountMin,e.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=A(e.modChannelCountMin,e.modChannelCountMax,this.modChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new _;if(this.channels.length=this.getChannelCount(),n&&P||s&&h)for(let t=q.length;t<this.getChannelCount();t++){q[t]=[];for(let i=0;i<e.instrumentCountMin;i++)q[t][i]={}}break;case 115:this.scale=z[t.charCodeAt(i++)],n&&(this.scale=0);break;case 107:this.key=R(0,e.keys.length,I&&n?11-z[t.charCodeAt(i++)]:z[t.charCodeAt(i++)]);break;case 108:this.loopStart=h&&n?z[t.charCodeAt(i++)]:(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)];break;case 101:this.loopLength=h&&n?z[t.charCodeAt(i++)]:(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)]+1;break;case 116:this.tempo=l&&n?[95,120,151,190][z[t.charCodeAt(i++)]]:I&&n?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][z[t.charCodeAt(i++)]]:z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)],this.tempo=R(e.tempoMin,e.tempoMax+1,this.tempo);break;case 109:P&&n?(D=12*z[t.charCodeAt(i++)],D=R(0,e.reverbRange,D)):h&&s&&(D=z[t.charCodeAt(i++)],D=R(0,e.reverbRange,D));break;case 97:this.beatsPerBar=o&&n?[6,7,8,9,10][z[t.charCodeAt(i++)]]:z[t.charCodeAt(i++)]+1,this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,this.beatsPerBar));break;case 103:{const n=(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)]+1;this.barCount=A(e.barCountMin,e.barCountMax,n);for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].bars.length;e<this.barCount;e++)this.channels[t].bars[e]=e<4?1:0;this.channels[t].bars.length=this.barCount}}break;case 106:{let s;s=F&&n?z[t.charCodeAt(i++)]+1:(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)]+1,this.patternsPerChannel=A(1,e.barCountMax,s);const r=this.getChannelCount();for(let t=0;t<r;t++){const e=this.channels[t].patterns;for(let t=e.length;t<this.patternsPerChannel;t++)e[t]=new V;e.length=this.patternsPerChannel}}break;case 105:if(P&&n||h&&s){const s=A(e.instrumentCountMin,e.patternInstrumentCountMax,z[t.charCodeAt(i++)]+e.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=s>1;for(let t=0;t<this.getChannelCount();t++){const e=t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount,i=t>=this.pitchChannelCount+this.noiseChannelCount;for(let n=this.channels[t].instruments.length;n<s;n++)this.channels[t].instruments[n]=new Q(e,i);if(this.channels[t].instruments.length=s,c&&n)for(let n=0;n<s;n++)this.channels[t].instruments[n].setTypeAndReset(e?2:0,e,i);for(let e=q[t].length;e<s;e++)q[t][e]={}}}else{const n=z[t.charCodeAt(i++)];this.layeredInstruments=0!=(2&n),this.patternInstruments=0!=(1&n);for(let n=0;n<this.getChannelCount();n++){let s=1;(this.layeredInstruments||this.patternInstruments)&&(s=A(e.instrumentCountMin,this.getMaxInstrumentsPerChannel(),z[t.charCodeAt(i++)]+e.instrumentCountMin));const r=this.channels[n],a=this.getChannelIsNoise(n),o=this.getChannelIsMod(n);for(let t=r.instruments.length;t<s;t++)r.instruments[t]=new Q(a,o);r.instruments.length=s}}break;case 114:this.rhythm=z[t.charCodeAt(i++)],(s&&o||n)&&(this.rhythm!=e.rhythms.dictionary["÷3 (triplets)"].index&&this.rhythm!=e.rhythms.dictionary["÷6"].index||(L=!0),this.rhythm>=e.rhythms.dictionary["÷6"].index&&(G=!0));break;case 111:if(o&&n){const n=z[t.charCodeAt(i++)];this.channels[n].octave=R(0,e.pitchOctaves,z[t.charCodeAt(i++)]+1),n>=this.pitchChannelCount&&(this.channels[n].octave=0)}else if(P&&n||h&&s)for(let n=0;n<this.getChannelCount();n++)this.channels[n].octave=R(0,e.pitchOctaves,z[t.charCodeAt(i++)]+1),n>=this.pitchChannelCount&&(this.channels[n].octave=0);else{for(let n=0;n<this.pitchChannelCount;n++)this.channels[n].octave=R(0,e.pitchOctaves,z[t.charCodeAt(i++)]);for(let t=this.pitchChannelCount;t<this.getChannelCount();t++)this.channels[t].octave=0}break;case 84:{E++,E>=this.channels[O].instruments.length&&(O++,E=0),A(0,this.channels.length-1,O);const r=this.channels[O].instruments[E];let o=A(0,9,z[t.charCodeAt(i++)]);s&&h&&(7==o?o=8:8==o&&(o=9)),r.setTypeAndReset(o,O>=this.pitchChannelCount&&O<this.pitchChannelCount+this.noiseChannelCount,O>=this.pitchChannelCount+this.noiseChannelCount),!(I&&n||a&&s)||0!=o&&8!=o&&6!=o||(r.aliases=!0,r.distortion=0,r.effects|=8),L&&(r.arpeggioSpeed=9),G&&(r.fastTwoNoteArp=!0),I&&n&&(r.effects=0,r.chord!=e.chords.dictionary.simultaneous.index&&(r.effects|=2048))}break;case 117:{const e=z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)];this.channels[O].instruments[E].preset=e,s&&h&&7==this.channels[O].instruments[E].preset&&(this.channels[O].instruments[E].preset=8)}break;case 119:if(o&&n){const n=[1,2,3,4,5,6,7,8,0],s=z[t.charCodeAt(i++)],r=this.channels[s].instruments[0];r.chipWave=R(0,e.chipWaves.length,0|n[z[t.charCodeAt(i++)]]),r.convertLegacySettings(q[s][0],T)}else if(c&&n){const n=[1,2,3,4,5,6,7,8,0];for(let s=0;s<this.getChannelCount();s++)for(const r of this.channels[s].instruments)s>=this.pitchChannelCount?r.chipNoise=R(0,e.chipNoises.length,z[t.charCodeAt(i++)]):r.chipWave=R(0,e.chipWaves.length,0|n[z[t.charCodeAt(i++)]])}else if(I&&n){const n=[1,2,3,4,5,6,7,8,0];O>=this.pitchChannelCount?this.channels[O].instruments[E].chipNoise=R(0,e.chipNoises.length,z[t.charCodeAt(i++)]):this.channels[O].instruments[E].chipWave=R(0,e.chipWaves.length,0|n[z[t.charCodeAt(i++)]])}else O>=this.pitchChannelCount?this.channels[O].instruments[E].chipNoise=R(0,e.chipNoises.length,z[t.charCodeAt(i++)]):this.channels[O].instruments[E].chipWave=R(0,e.chipWaves.length,z[t.charCodeAt(i++)]);break;case 102:if(P&&n||h&&s)if(I&&n){const s=[10,6,3,0,8,5,2],r=["none","none","none","none","decay 1","decay 2","decay 3"];if(o&&n){const n=z[t.charCodeAt(i++)],a=this.channels[n].instruments[0],o=q[n][0],l=[1,3,4,5][R(0,s.length,z[t.charCodeAt(i++)])];o.filterCutoff=s[l],o.filterResonance=0,o.filterEnvelope=e.envelopes.dictionary[r[l]],a.convertLegacySettings(o,T)}else if(c&&n)for(let n=0;n<this.getChannelCount();n++)for(let a=0;a<this.channels[n].instruments.length;a++){const o=this.channels[n].instruments[a],l=q[n][a],h=R(0,s.length,z[t.charCodeAt(i++)]+1);n<this.pitchChannelCount?(l.filterCutoff=s[h],l.filterResonance=0,l.filterEnvelope=e.envelopes.dictionary[r[h]]):(l.filterCutoff=10,l.filterResonance=0,l.filterEnvelope=e.envelopes.dictionary.none),o.convertLegacySettings(l,T)}else{const n=R(0,s.length,z[t.charCodeAt(i++)]),a=this.channels[O].instruments[E],o=q[O][E];o.filterCutoff=s[n],o.filterResonance=0,o.filterEnvelope=e.envelopes.dictionary[r[n]],a.convertLegacySettings(o,T)}}else{const e=11,n=this.channels[O].instruments[E],s=q[O][E];s.filterCutoff=R(0,e,z[t.charCodeAt(i++)]),n.convertLegacySettings(s,T)}else{const r=this.channels[O].instruments[E];let a=z[t.charCodeAt(i++)];if(n||0==a){r.eqFilterType=!1,s&&(a=z[t.charCodeAt(i++)]);const n=a;r.eqFilter.controlPointCount=R(0,e.filterMaxPoints+1,n);for(let t=r.eqFilter.controlPoints.length;t<r.eqFilter.controlPointCount;t++)r.eqFilter.controlPoints[t]=new U;for(let n=0;n<r.eqFilter.controlPointCount;n++){const s=r.eqFilter.controlPoints[n];s.type=R(0,3,z[t.charCodeAt(i++)]),s.freq=R(0,e.filterFreqRange,z[t.charCodeAt(i++)]),s.gain=R(0,e.filterGainRange,z[t.charCodeAt(i++)])}for(let t=r.eqFilter.controlPointCount;t<n;t++)i+=3;if(r.eqSubFilters[0]=r.eqFilter,s&&!h){let n=z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)];for(let s=0;s<e.filterMorphCount-1;s++)if(n&1<<s){const n=z[t.charCodeAt(i++)];null==r.eqSubFilters[s+1]&&(r.eqSubFilters[s+1]=new J),r.eqSubFilters[s+1].controlPointCount=R(0,e.filterMaxPoints+1,n);for(let t=r.eqSubFilters[s+1].controlPoints.length;t<r.eqSubFilters[s+1].controlPointCount;t++)r.eqSubFilters[s+1].controlPoints[t]=new U;for(let n=0;n<r.eqSubFilters[s+1].controlPointCount;n++){const a=r.eqSubFilters[s+1].controlPoints[n];a.type=R(0,3,z[t.charCodeAt(i++)]),a.freq=R(0,e.filterFreqRange,z[t.charCodeAt(i++)]),a.gain=R(0,e.filterGainRange,z[t.charCodeAt(i++)])}for(let t=r.eqSubFilters[s+1].controlPointCount;t<n;t++)i+=3}}}else r.eqFilterType=!0,r.eqFilterSimpleCut=R(0,e.filterSimpleCutRange,z[t.charCodeAt(i++)]),r.eqFilterSimplePeak=R(0,e.filterSimplePeakRange,z[t.charCodeAt(i++)])}break;case 121:if(P&&n||h&&s){const e=8,n=this.channels[O].instruments[E],s=q[O][E];s.filterResonance=R(0,e,z[t.charCodeAt(i++)]),n.convertLegacySettings(s,T)}break;case 122:{const r=this.channels[O].instruments[E];if(P&&n||h&&s)if(4==r.type)for(let n=0;n<e.drumCount;n++)r.drumsetEnvelopes[n]=Y.I(z[t.charCodeAt(i++)]).index;else{const e=q[O][E];e.filterEnvelope=Y.I(z[t.charCodeAt(i++)]),r.convertLegacySettings(e,T)}else for(let n=0;n<e.drumCount;n++)r.drumsetEnvelopes[n]=R(0,e.envelopes.length,z[t.charCodeAt(i++)])}break;case 87:{const r=this.channels[O].instruments[E];if(r.pulseWidth=R(0,e.pulseWidthRange+ +s,z[t.charCodeAt(i++)]),n&&(r.pulseWidth=Math.round(Math.pow(.5,(7-r.pulseWidth)*e.pulseWidthStepPower)*e.pulseWidthRange)),P&&n||h&&s){const e=q[O][E];e.pulseEnvelope=Y.I(z[t.charCodeAt(i++)]),r.convertLegacySettings(e,T)}}break;case 73:this.channels[O].instruments[E].stringSustain=R(0,e.stringSustainRange,z[t.charCodeAt(i++)]);break;case 100:if(P&&n||h&&s){const s=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}];if(o&&n){const n=z[t.charCodeAt(i++)],r=s[R(0,s.length,z[t.charCodeAt(i++)])],a=this.channels[n].instruments[0];a.fadeIn=nt.secondsToFadeInSetting(r.fadeInSeconds),a.fadeOut=nt.ticksToFadeOutSetting(r.fadeOutTicks),a.transition=e.transitions.dictionary[r.transition].index,a.transition!=e.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(c&&n)for(let n=0;n<this.getChannelCount();n++)for(const r of this.channels[n].instruments){const n=s[R(0,s.length,z[t.charCodeAt(i++)])];r.fadeIn=nt.secondsToFadeInSetting(n.fadeInSeconds),r.fadeOut=nt.ticksToFadeOutSetting(n.fadeOutTicks),r.transition=e.transitions.dictionary[n.transition].index,r.transition!=e.transitions.dictionary.normal.index&&(r.effects|=1024)}else if(l||n){const n=s[R(0,s.length,z[t.charCodeAt(i++)])],r=this.channels[O].instruments[E];r.fadeIn=nt.secondsToFadeInSetting(n.fadeInSeconds),r.fadeOut=nt.ticksToFadeOutSetting(n.fadeOutTicks),r.transition=e.transitions.dictionary[n.transition].index,r.transition!=e.transitions.dictionary.normal.index&&(r.effects|=1024)}else{const n=s[R(0,s.length,z[t.charCodeAt(i++)])],r=this.channels[O].instruments[E];r.fadeIn=nt.secondsToFadeInSetting(n.fadeInSeconds),r.fadeOut=nt.ticksToFadeOutSetting(n.fadeOutTicks),r.transition=e.transitions.dictionary[n.transition].index,z[t.charCodeAt(i++)]>0&&(r.legacyTieOver=!0),r.clicklessTransition=!!z[t.charCodeAt(i++)],(r.transition!=e.transitions.dictionary.normal.index||r.clicklessTransition)&&(r.effects|=1024)}}else{const n=this.channels[O].instruments[E];n.fadeIn=R(0,e.fadeInRange,z[t.charCodeAt(i++)]),n.fadeOut=R(0,e.fadeOutTicks.length,z[t.charCodeAt(i++)]),s&&(n.clicklessTransition=!!z[t.charCodeAt(i++)])}break;case 99:if(P&&n||h&&s)if(I&&n)if(o&&n){const n=[0,3,2,0],s=["none","none","none","tremolo2"],r=z[t.charCodeAt(i++)],a=R(0,n.length,z[t.charCodeAt(i++)]),o=this.channels[r].instruments[0],l=q[r][0];o.vibrato=n[a],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=e.envelopes.dictionary[s[a]],o.convertLegacySettings(l,T)),o.vibrato!=e.vibratos.dictionary.none.index&&(o.effects|=512)}else if(c&&n){const n=[0,1,2,3,0,0],r=["none","none","none","none","tremolo5","tremolo2"];for(let a=0;a<this.getChannelCount();a++)for(let o=0;o<this.channels[a].instruments.length;o++){const l=R(0,n.length,z[t.charCodeAt(i++)]),c=this.channels[a].instruments[o],u=q[a][o];c.vibrato=n[l],null!=u.filterEnvelope&&1!=u.filterEnvelope.type||(u.filterEnvelope=e.envelopes.dictionary[r[l]],c.convertLegacySettings(u,T)),c.vibrato!=e.vibratos.dictionary.none.index&&(c.effects|=512),(0!=D||s&&h)&&!this.getChannelIsNoise(a)&&(c.effects|=1,c.reverb=D)}}else{const n=[0,1,2,3,0,0],r=["none","none","none","none","tremolo5","tremolo2"],a=R(0,n.length,z[t.charCodeAt(i++)]),o=this.channels[O].instruments[E],l=q[O][E];o.vibrato=n[a],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=e.envelopes.dictionary[r[a]],o.convertLegacySettings(l,T)),o.vibrato!=e.vibratos.dictionary.none.index&&(o.effects|=512),(0!=D||s&&h)&&(o.effects|=1,o.reverb=D)}else{const n=this.channels[O].instruments[E],s=R(0,e.vibratos.length+1,z[t.charCodeAt(i++)]);n.vibrato=s,n.vibrato!=e.vibratos.dictionary.none.index&&(n.effects|=512),s==e.vibratos.length?(n.vibratoDepth=R(0,e.modulators.dictionary["vibrato depth"].maxRawVol+1,z[t.charCodeAt(i++)])/50,n.vibratoSpeed=R(0,e.modulators.dictionary["vibrato speed"].maxRawVol+1,z[t.charCodeAt(i++)]),n.vibratoDelay=R(0,e.modulators.dictionary["vibrato delay"].maxRawVol+1,z[t.charCodeAt(i++)])/2,n.vibratoType=R(0,e.vibratoTypes.length,z[t.charCodeAt(i++)]),n.effects|=512):(n.vibratoDepth=e.vibratos[n.vibrato].amplitude,n.vibratoSpeed=10,n.vibratoDelay=e.vibratos[n.vibrato].delayTicks/2,n.vibratoType=e.vibratos[n.vibrato].type)}break;case 71:if(s&&h){const n=this.channels[O].instruments[E];n.arpeggioSpeed=R(0,e.modulators.dictionary["arp speed"].maxRawVol+1,z[t.charCodeAt(i++)]),n.fastTwoNoteArp=!!z[t.charCodeAt(i++)]}break;case 104:if(o&&n){const n=z[t.charCodeAt(i++)];this.channels[n].instruments[0].unison=R(0,e.unisons.length,z[t.charCodeAt(i++)])}else if(c&&n)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments){const n=z[t.charCodeAt(i++)];let r=R(0,e.unisons.length,n);8==n&&(r=2,s.chord=3),s.unison=r}else if(I&&n){const n=z[t.charCodeAt(i++)];let s=R(0,e.unisons.length,n);8==n&&(s=2,this.channels[O].instruments[E].chord=3),this.channels[O].instruments[E].unison=s}else this.channels[O].instruments[E].unison=R(0,e.unisons.length,z[t.charCodeAt(i++)]);break;case 67:if(P&&n||h&&s){const n=this.channels[O].instruments[E];n.chord=R(0,e.chords.length,z[t.charCodeAt(i++)]),n.chord!=e.chords.dictionary.simultaneous.index&&(n.effects|=2048)}break;case 113:{const r=this.channels[O].instruments[E];if(P&&n||h&&s){r.effects=4095&z[t.charCodeAt(i++)],0!=D||s&&h?w(r.effects)&&(r.reverb=D):r.effects&=-2,r.effects|=4,r.vibrato!=e.vibratos.dictionary.none.index&&(r.effects|=512),r.detune!=e.detuneCenter&&(r.effects|=256),r.aliases?r.effects|=8:r.effects&=-9;const n=q[O][E];r.convertLegacySettings(n,T)}else{if(r.effects=z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)],y(r.effects)){let a=z[t.charCodeAt(i++)];if(n||0==a){r.noteFilterType=!1,s&&(a=z[t.charCodeAt(i++)]),r.noteFilter.controlPointCount=R(0,e.filterMaxPoints+1,a);for(let t=r.noteFilter.controlPoints.length;t<r.noteFilter.controlPointCount;t++)r.noteFilter.controlPoints[t]=new U;for(let n=0;n<r.noteFilter.controlPointCount;n++){const s=r.noteFilter.controlPoints[n];s.type=R(0,3,z[t.charCodeAt(i++)]),s.freq=R(0,e.filterFreqRange,z[t.charCodeAt(i++)]),s.gain=R(0,e.filterGainRange,z[t.charCodeAt(i++)])}for(let t=r.noteFilter.controlPointCount;t<a;t++)i+=3;if(r.noteSubFilters[0]=r.noteFilter,s&&!h){let n=z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)];for(let s=0;s<e.filterMorphCount-1;s++)if(n&1<<s){const n=z[t.charCodeAt(i++)];null==r.noteSubFilters[s+1]&&(r.noteSubFilters[s+1]=new J),r.noteSubFilters[s+1].controlPointCount=R(0,e.filterMaxPoints+1,n);for(let t=r.noteSubFilters[s+1].controlPoints.length;t<r.noteSubFilters[s+1].controlPointCount;t++)r.noteSubFilters[s+1].controlPoints[t]=new U;for(let n=0;n<r.noteSubFilters[s+1].controlPointCount;n++){const a=r.noteSubFilters[s+1].controlPoints[n];a.type=R(0,3,z[t.charCodeAt(i++)]),a.freq=R(0,e.filterFreqRange,z[t.charCodeAt(i++)]),a.gain=R(0,e.filterGainRange,z[t.charCodeAt(i++)])}for(let t=r.noteSubFilters[s+1].controlPointCount;t<n;t++)i+=3}}}else r.noteFilterType=!0,r.noteFilter.reset(),r.noteFilterSimpleCut=R(0,e.filterSimpleCutRange,z[t.charCodeAt(i++)]),r.noteFilterSimplePeak=R(0,e.filterSimplePeakRange,z[t.charCodeAt(i++)])}u(r.effects)&&(r.transition=R(0,e.transitions.length,z[t.charCodeAt(i++)])),f(r.effects)&&(r.chord=R(0,e.chords.length,z[t.charCodeAt(i++)]),r.chord==e.chords.dictionary.arpeggio.index&&s&&(r.arpeggioSpeed=z[t.charCodeAt(i++)],r.fastTwoNoteArp=!!z[t.charCodeAt(i++)])),p(r.effects)&&(r.pitchShift=R(0,e.pitchShiftRange,z[t.charCodeAt(i++)])),m(r.effects)&&(n?(r.detune=R(e.detuneMin,e.detuneMax+1,z[t.charCodeAt(i++)]),r.detune=Math.round((r.detune-9)*(Math.abs(r.detune-9)+1)/2+e.detuneCenter)):r.detune=R(e.detuneMin,e.detuneMax+1,(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)])),d(r.effects)&&(r.vibrato=R(0,e.vibratos.length+1,z[t.charCodeAt(i++)]),r.vibrato==e.vibratos.length&&s?(r.vibratoDepth=R(0,e.modulators.dictionary["vibrato depth"].maxRawVol+1,z[t.charCodeAt(i++)])/25,r.vibratoSpeed=R(0,e.modulators.dictionary["vibrato speed"].maxRawVol+1,z[t.charCodeAt(i++)]),r.vibratoDelay=R(0,e.modulators.dictionary["vibrato delay"].maxRawVol+1,z[t.charCodeAt(i++)]),r.vibratoType=R(0,e.vibratoTypes.length,z[t.charCodeAt(i++)])):(r.vibratoDepth=e.vibratos[r.vibrato].amplitude,r.vibratoSpeed=10,r.vibratoDelay=e.vibratos[r.vibrato].delayTicks/2,r.vibratoType=e.vibratos[r.vibrato].type)),v(r.effects)&&(r.distortion=R(0,e.distortionRange,z[t.charCodeAt(i++)]),s&&!h&&(r.aliases=!!z[t.charCodeAt(i++)])),g(r.effects)&&(r.bitcrusherFreq=R(0,e.bitcrusherFreqRange,z[t.charCodeAt(i++)]),r.bitcrusherQuantization=R(0,e.bitcrusherQuantizationRange,z[t.charCodeAt(i++)])),b(r.effects)&&(r.pan=R(0,e.panMax+1,n?Math.round(z[t.charCodeAt(i++)]*(e.panMax/8)):(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)]),s&&!a&&(r.panDelay=z[t.charCodeAt(i++)])),M(r.effects)&&(r.chorus=n?2*R(0,e.chorusRange/2+1,z[t.charCodeAt(i++)]):R(0,e.chorusRange,z[t.charCodeAt(i++)])),S(r.effects)&&(r.echoSustain=R(0,e.echoSustainRange,z[t.charCodeAt(i++)]),r.echoDelay=R(0,e.echoDelayRange,z[t.charCodeAt(i++)])),w(r.effects)&&(r.reverb=R(0,e.reverbRange,n?Math.round(z[t.charCodeAt(i++)]*e.reverbRange/3):z[t.charCodeAt(i++)]))}r.effects&=4095}break;case 118:if(o&&n){const n=z[t.charCodeAt(i++)];this.channels[n].instruments[0].volume=Math.round(R(-e.volumeRange/2,1,5*-z[t.charCodeAt(i++)]))}else if(c&&n)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments)s.volume=Math.round(R(-e.volumeRange/2,1,5*-z[t.charCodeAt(i++)]));else if(I&&n){this.channels[O].instruments[E].volume=Math.round(R(-e.volumeRange/2,1,5*-z[t.charCodeAt(i++)]))}else if(n){this.channels[O].instruments[E].volume=Math.round(R(-e.volumeRange/2,1,25*-z[t.charCodeAt(i++)]/7))}else{this.channels[O].instruments[E].volume=Math.round(R(-e.volumeRange/2,e.volumeRange/2+1,(z[t.charCodeAt(i++)]<<6|z[t.charCodeAt(i++)])-e.volumeRange/2))}break;case 76:if(P&&n){this.channels[O].instruments[E].pan=R(0,e.panMax+1,z[t.charCodeAt(i++)]*(e.panMax/8))}else if(h&&s){const n=this.channels[O].instruments[E];n.pan=R(0,e.panMax+1,(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)]),s&&!o&&(n.panDelay=z[t.charCodeAt(i++)])}break;case 68:{const n=this.channels[O].instruments[E];s&&h&&(n.detune=R(e.detuneMin,e.detuneMax+1,4*((z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)])),n.effects|=256)}break;case 77:{let e=this.channels[O].instruments[E];for(let n=0;n<64;n++)e.customChipWave[n]=R(-24,25,z[t.charCodeAt(i++)]-24);let n=0;for(let t=0;t<e.customChipWave.length;t++)n+=e.customChipWave[t];const s=n/e.customChipWave.length;let r=0,a=0;for(let t=0;t<e.customChipWave.length;t++)r+=a,a=e.customChipWave[t]-s,e.customChipWaveIntegral[t]=r;e.customChipWaveIntegral[64]=0}break;case 79:{let e=z[t.charCodeAt(i++)];63==e?this.restoreLimiterDefaults():(this.compressionRatio=e<10?e/10:1+(e-10)/60,e=z[t.charCodeAt(i++)],this.limitRatio=e<10?e/10:e-9,this.limitDecay=z[t.charCodeAt(i++)],this.limitRise=250*z[t.charCodeAt(i++)]+2e3,this.compressionThreshold=z[t.charCodeAt(i++)]/20,this.limitThreshold=z[t.charCodeAt(i++)]/20,this.masterGain=((z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)])/50)}break;case 85:for(let e=0;e<this.getChannelCount();e++){var $;$=l?z[t.charCodeAt(i++)]:(z[t.charCodeAt(i++)]<<6)+z[t.charCodeAt(i++)],this.channels[e].name=decodeURIComponent(t.substring(i,i+$)),i+=$}break;case 65:{const r=this.channels[O].instruments[E];if(r.algorithm=R(0,e.algorithms.length,z[t.charCodeAt(i++)]),P&&n||h&&s){const t=q[O][E];r.convertLegacySettings(t,T)}}break;case 70:this.channels[O].instruments[E].feedbackType=R(0,e.feedbacks.length,z[t.charCodeAt(i++)]);break;case 66:this.channels[O].instruments[E].feedbackAmplitude=R(0,e.operatorAmplitudeMax+1,z[t.charCodeAt(i++)]);break;case 86:if(P&&n||h&&s){const e=this.channels[O].instruments[E],n=q[O][E];n.feedbackEnvelope=Y.I(z[t.charCodeAt(i++)]),e.convertLegacySettings(n,T)}break;case 81:for(let n=0;n<e.operatorCount;n++)this.channels[O].instruments[E].operators[n].frequency=R(0,e.operatorFrequencies.length,z[t.charCodeAt(i++)]);break;case 80:for(let n=0;n<e.operatorCount;n++)this.channels[O].instruments[E].operators[n].amplitude=R(0,e.operatorAmplitudeMax+1,z[t.charCodeAt(i++)]);break;case 69:{const r=this.channels[O].instruments[E];if(P&&n||h&&s){const n=q[O][E];n.operatorEnvelopes=[];for(let s=0;s<e.operatorCount;s++)n.operatorEnvelopes[s]=Y.I(z[t.charCodeAt(i++)]);r.convertLegacySettings(n,T)}else{const n=R(0,e.maxEnvelopeCount+1,z[t.charCodeAt(i++)]);for(let s=0;s<n;s++){const n=R(0,e.instrumentAutomationTargets.length,z[t.charCodeAt(i++)]);let s=0;const a=e.instrumentAutomationTargets[n].maxCount;a>1&&(s=R(0,a,z[t.charCodeAt(i++)]));const o=R(0,e.envelopes.length,z[t.charCodeAt(i++)]);r.addEnvelope(n,s,o)}}}break;case 82:{const n=this.channels[O].instruments[E];for(let s=0;s<e.operatorCount;s++)n.operators[s].waveform=R(0,e.operatorWaves.length,z[t.charCodeAt(i++)]),3==n.operators[s].waveform&&(n.operators[s].pulseWidth=R(0,e.pwmOperatorWaves.length,z[t.charCodeAt(i++)]))}break;case 83:{const n=this.channels[O].instruments[E];if(3==n.type){const s=Math.ceil(e.spectrumControlPoints*e.spectrumControlPointBits/6),r=new H(t,i,i+s);for(let t=0;t<e.spectrumControlPoints;t++)n.spectrumWave.spectrum[t]=r.read(e.spectrumControlPointBits);n.spectrumWave.markCustomWaveDirty(),i+=s}else{if(4!=n.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const s=Math.ceil(e.drumCount*e.spectrumControlPoints*e.spectrumControlPointBits/6),r=new H(t,i,i+s);for(let t=0;t<e.drumCount;t++){for(let i=0;i<e.spectrumControlPoints;i++)n.drumsetSpectrumWaves[t].spectrum[i]=r.read(e.spectrumControlPointBits);n.drumsetSpectrumWaves[t].markCustomWaveDirty()}i+=s}}}break;case 72:{const n=this.channels[O].instruments[E],s=Math.ceil(e.harmonicsControlPoints*e.harmonicsControlPointBits/6),r=new H(t,i,i+s);for(let t=0;t<e.harmonicsControlPoints;t++)n.harmonicsWave.harmonics[t]=r.read(e.harmonicsControlPointBits);n.harmonicsWave.markCustomWaveDirty(),i+=s}break;case 88:if(s&&h){const e=this.channels[O].instruments[E];e.aliases=!!z[t.charCodeAt(i++)],e.aliases&&(e.distortion=0,e.effects|=8)}break;case 98:{let e;if(o&&n){const n=z[t.charCodeAt(i++)],s=z[t.charCodeAt(i++)];e=Math.ceil(.5*s);const r=new H(t,i,i+e);for(let t=0;t<s;t++)this.channels[n].bars[t]=r.read(3)+1}else if(h&&n){let n=0;for(;1<<n<this.patternsPerChannel;)n++;e=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new H(t,i,i+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=s.read(n)+1}else{let n=0;for(;1<<n<this.patternsPerChannel+1;)n++;e=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new H(t,i,i+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=s.read(n)}i+=e}break;case 112:{let r,a=0,c=!(l&&s||n),u=c?4:3,f=c?16:8;if(o&&n)r=z[t.charCodeAt(i++)],i++,a=z[t.charCodeAt(i++)],a<<=6,a+=z[t.charCodeAt(i++)];else{r=0;let e=A(1,4,z[t.charCodeAt(i++)]);for(;e>0;)a<<=6,a+=z[t.charCodeAt(i++)],e--}const p=new H(t,i,i+a);i+=a;const m=Y.getNeededBits(e.noteSizeMax);let d=-1,v=-1,g=-1;for(;;){const t=this.channels[r],i=this.getChannelIsNoise(r),a=this.getChannelIsMod(r),b=this.getMaxInstrumentsPerPattern(r),M=Y.getNeededBits(b-e.instrumentCountMin),S=Y.getNeededBits(t.instruments.length-1);if(a){const i=h?S:Y.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let n=0;n<t.instruments.length;n++){let s=t.instruments[n];for(let t=0;t<e.modCount;t++){let a=p.read(2);switch(a){case 0:s.modChannels[t]=R(0,this.pitchChannelCount+this.noiseChannelCount+1,p.read(8)),s.modInstruments[t]=R(0,this.channels[s.modChannels[t]].instruments.length+2,p.read(i));break;case 1:s.modChannels[t]=this.pitchChannelCount+R(0,this.noiseChannelCount+1,p.read(8)),s.modInstruments[t]=R(0,this.channels[s.modChannels[t]].instruments.length+2,p.read(S));break;case 2:s.modChannels[t]=-1;break;case 3:s.modChannels[t]=-2}if(3!=a&&(s.modulators[t]=p.read(6)),h||"eq filter"!=e.modulators[s.modulators[t]].name&&"note filter"!=e.modulators[s.modulators[t]].name||(s.modFilterTypes[t]=p.read(6)),h&&s.modChannels[t]>=0){let i=y(this.channels[s.modChannels[t]].instruments[s.modInstruments[t]].effects);7==s.modulators[t]?(s.modulators[t]=i?e.modulators.dictionary["note filt cut"].index:e.modulators.dictionary["eq filt cut"].index,s.modFilterTypes[t]=1):8==s.modulators[t]&&(s.modulators[t]=i?e.modulators.dictionary["note filt peak"].index:e.modulators.dictionary["eq filt peak"].index,s.modFilterTypes[t]=2)}else h&&s.modulators[t]==e.modulators.dictionary["song reverb"].index&&(d=r,v=n,g=t);h&&12!=e.modulators[s.modulators[t]].associatedEffect&&(this.channels[s.modChannels[t]].instruments[s.modInstruments[t]].effects|=1<<e.modulators[s.modulators[t]].associatedEffect)}}}const w=[];for(let i=0;i<t.instruments.length;i++){w[i]=[];for(let n=0;n<e.modCount;n++)w[i][e.modCount-1-n]=1+3*+(h&&s&&a&&t.instruments[i].modulators[n]==e.modulators.dictionary.detune.index)}const k=i||a?0:12*t.octave;let F=i||a?4:k;const T=a?[0,1,2,3,4,5]:i?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],q=[];for(let t=0;t<T.length;t++)T[t]+=k;for(let i=0;i<this.patternsPerChannel;i++){const r=t.patterns[i];if(P&&n||h&&s)r.instruments[0]=A(0,t.instruments.length-1,p.read(S)),r.instruments.length=1;else if(this.patternInstruments){const i=A(e.instrumentCountMin,b,p.read(M)+e.instrumentCountMin);for(let e=0;e<i;e++)r.instruments[e]=A(0,t.instruments.length-1+2*+a,p.read(S));r.instruments.length=i}else r.instruments[0]=0,r.instruments.length=e.instrumentCountMin;if(!(n&&o||0!=p.read(1))){r.notes.length=0;continue}let d=0;const y=r.notes;let v=0;for(;d<this.beatsPerBar*e.partsPerBeat+ +a;){const i=1==p.read(1);let o=!1,g=0;if(i?g=A(0,q.length-1,p.readLongTail(0,0)):o=1==p.read(1),i||o){let o,b,M;if(i)o=q[g],q.splice(g,1);else{if(o={},c)1==p.read(1)?o.pitchCount=p.read(3)+2:o.pitchCount=1;else for(o.pitchCount=1;o.pitchCount<4&&1==p.read(1);)o.pitchCount++;o.pinCount=p.readPinCount(),o.initialSize=n?2*p.read(2):a?p.read(9):p.read(m),o.pins=[],o.length=0,o.bendCount=0;for(let t=0;t<o.pinCount;t++){let t={};t.pitchBend=1==p.read(1),t.pitchBend&&o.bendCount++,o.length+=I&&n?p.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:p.readPartDuration(),t.time=o.length,t.size=n?2*p.read(2):a?p.read(9):p.read(m),o.pins.push(t)}}q.unshift(o),q.length>10&&q.pop(),y.length<=v?(b=new C(0,d,d+o.length,o.initialSize),y[v++]=b):(b=y[v++],b.start=d,b.end=d+o.length,b.pins[0].size=o.initialSize);let S=0;const k=[];for(let t=0;t<o.pitchCount+o.bendCount;t++){if(1==p.read(1)){const t=A(0,T.length-1,p.read(u));M=T[t],T.splice(t,1)}else{M=F;let t=p.readPitchInterval();for(;t>0;){for(M++;-1!=T.indexOf(M);)M++;t--}for(;t<0;){for(M--;-1!=T.indexOf(M);)M--;t++}}T.unshift(M),T.length>f&&T.pop(),t<o.pitchCount?b.pitches[S++]=M:k.push(M),F=t==o.pitchCount-1?b.pitches[0]:M}b.pitches.length=S,k.unshift(b.pitches[0]),a&&(b.pins[0].size*=w[r.instruments[0]][b.pitches[0]]);let x=1;for(const t of o.pins){t.pitchBend&&k.shift();const e=k[0]-b.pitches[0];if(b.pins.length<=x)b.pins[x++]=N(e,t.time,a?t.size*w[r.instruments[0]][b.pitches[0]]:t.size);else{const i=b.pins[x++];i.interval=e,i.time=t.time,i.size=a?t.size*w[r.instruments[0]][b.pitches[0]]:t.size}}b.pins.length=x,0==b.start&&(b.continuesLastPattern=P&&n||h&&s?!l&&!n&&t.instruments[r.instruments[0]].legacyTieOver:1==p.read(1)),d=A(0,this.beatsPerBar*e.partsPerBeat,b.end)}else if(a){const t=1==p.read(1),e=p.readPartDuration();t?d-=e:d+=e}else{d+=I&&n?p.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:p.readPartDuration()}}y.length=v}if(o&&n)break;if(r++,r>=this.getChannelCount())break}if(s&&h&&g>=0)for(let t=0;t<this.channels.length;t++)for(let i=0;i<this.channels[t].instruments.length;i++){const n=this.channels[t].instruments[i];if(w(n.effects)&&(n.reverb=e.reverbRange-1),d==t&&v==i){const i=this.channels[t].bars[0];if(i>0){const n=this.channels[t].patterns[i-1];let s=6;for(const t of n.notes)t.pitches[0]==e.modCount-1-g&&(s=Math.min(s,t.start));s>0&&n.notes.push(new C(e.modCount-1-g,0,s,D))}else if(this.channels[t].patterns.length<e.barCountMax){const i=new V;if(this.channels[t].patterns.push(i),this.channels[t].bars[0]=this.channels[t].patterns.length,this.channels[t].patterns.length>this.patternsPerChannel){for(let t=0;t<this.channels.length;t++)this.channels[t].patterns.length<=this.patternsPerChannel&&this.channels[t].patterns.push(new V);this.patternsPerChannel++}i.instruments.length=1,i.instruments[0]=v,i.notes.length=0,i.notes.push(new C(e.modCount-1-g,0,6,D))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(x)+" at index "+(i-1))}}toJsonObject(t=!0,i=1,n=!0){const s=[];for(let e=0;e<this.getChannelCount();e++){const r=this.channels[e],a=[],o=this.getChannelIsNoise(e),l=this.getChannelIsMod(e);for(const t of r.instruments)a.push(t.toJsonObject());const h=[];for(const t of r.patterns)h.push(t.toJsonObject(this,r,l));const c=[];if(t)for(let t=0;t<this.loopStart;t++)c.push(r.bars[t]);for(let t=0;t<i;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)c.push(r.bars[t]);if(n)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)c.push(r.bars[t]);const u={type:l?"mod":o?"drum":"pitch",name:r.name,instruments:a,patterns:h,sequence:c};o||(u.octaveScrollBar=r.octave-1),s.push(u)}return{name:this.title,format:Y.O,version:Y.k,scale:e.scales[this.scale].name,key:e.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:e.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:s}}fromJsonObject(t){if(this.initToDefault(!0),!t)return;if(null!=t.name&&(this.title=t.name),this.scale=0,null!=t.scale){const i={"romani :)":"dbl harmonic :)","romani :(":"dbl harmonic :(",enigma:"strange"},n=null!=i[t.scale]?i[t.scale]:t.scale,s=e.scales.findIndex((t=>t.name==n));-1!=s&&(this.scale=s)}if(null!=t.key)if("number"==typeof t.key)this.key=(t.key+1200>>>0)%e.keys.length;else if("string"==typeof t.key){const e=t.key,i=e.charAt(0).toUpperCase(),n=e.charAt(1).toLowerCase();let s={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[i];const r={"#":1,"♯":1,b:-1,"♭":-1}[n];null!=s&&(null!=r&&(s+=r),s<0&&(s+=12),s%=12,this.key=s)}null!=t.beatsPerMinute&&(this.tempo=R(e.tempoMin,e.tempoMax+1,0|t.beatsPerMinute));let i=0;null!=t.reverb&&(i=R(0,32,0|t.reverb)),null!=t.beatsPerBar&&(this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,0|t.beatsPerBar)));let n=4;null!=t.ticksPerBeat&&(n=0|t.ticksPerBeat||4,this.rhythm=e.rhythms.findIndex((t=>t.stepsPerBeat==n)),-1==this.rhythm&&(this.rhythm=1)),null!=t.masterGain?this.masterGain=Math.max(0,Math.min(5,t.masterGain||0)):this.masterGain=1,null!=t.limitThreshold?this.limitThreshold=Math.max(0,Math.min(2,t.limitThreshold||0)):this.limitThreshold=1,null!=t.compressionThreshold?this.compressionThreshold=Math.max(0,Math.min(1.1,t.compressionThreshold||0)):this.compressionThreshold=1,null!=t.limitRise?this.limitRise=Math.max(2e3,Math.min(1e4,t.limitRise||0)):this.limitRise=4e3,null!=t.limitDecay?this.limitDecay=Math.max(1,Math.min(30,t.limitDecay||0)):this.limitDecay=4,null!=t.limitRatio?this.limitRatio=Math.max(0,Math.min(11,t.limitRatio||0)):this.limitRatio=1,null!=t.compressionRatio?this.compressionRatio=Math.max(0,Math.min(1.168,t.compressionRatio||0)):this.compressionRatio=1;let s=1,r=1,a=1;if(null!=t.channels)for(const e of t.channels)e.instruments&&(s=Math.max(s,0|e.instruments.length)),e.patterns&&(r=Math.max(r,0|e.patterns.length)),e.sequence&&(a=Math.max(a,0|e.sequence.length));null!=t.layeredInstruments?this.layeredInstruments=!!t.layeredInstruments:this.layeredInstruments=!1,null!=t.patternInstruments?this.patternInstruments=!!t.patternInstruments:this.patternInstruments=s>1,this.patternsPerChannel=Math.min(r,e.barCountMax),this.barCount=Math.min(a,e.barCountMax),null!=t.introBars&&(this.loopStart=R(0,this.barCount,0|t.introBars)),null!=t.loopBars&&(this.loopLength=R(1,this.barCount-this.loopStart+1,0|t.loopBars));const o=[],l=[],h=[];if(null!=t.channels)for(let s=0;s<t.channels.length;s++){let r=t.channels[s];const a=new _;let c=!1,u=!1;if(null!=r.type?(c="drum"==r.type,u="mod"==r.type):c=s>=3,c?l.push(a):u?h.push(a):o.push(a),null!=r.octaveScrollBar&&(a.octave=R(0,e.pitchOctaves,1+(0|r.octaveScrollBar)),c&&(a.octave=0)),null!=r.name?a.name=r.name:a.name="",Array.isArray(r.instruments)){const t=r.instruments;for(let e=0;e<t.length&&!(e>=this.getMaxInstrumentsPerChannel());e++){const n=new Q(c,u);a.instruments[e]=n,n.fromJsonObject(t[e],c,u,!1,!1,i)}}for(let t=0;t<this.patternsPerChannel;t++){const e=new V;let i;a.patterns[t]=e,r.patterns&&(i=r.patterns[t]),null!=i&&e.fromJsonObject(i,this,a,n,c,u)}a.patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)a.bars[t]=null!=r.sequence?Math.min(this.patternsPerChannel,r.sequence[t]>>>0):0;a.bars.length=this.barCount}o.length>e.pitchChannelCountMax&&(o.length=e.pitchChannelCountMax),l.length>e.noiseChannelCountMax&&(l.length=e.noiseChannelCountMax),h.length>e.modChannelCountMax&&(h.length=e.modChannelCountMax),this.pitchChannelCount=o.length,this.noiseChannelCount=l.length,this.modChannelCount=h.length,this.channels.length=0,Array.prototype.push.apply(this.channels,o),Array.prototype.push.apply(this.channels,l),Array.prototype.push.apply(this.channels,h)}getPattern(t,e){if(e<0||e>=this.barCount)return null;const i=this.channels[t].bars[e];return 0==i?null:this.channels[t].patterns[i-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(t){return 32-Math.clz32(Math.ceil(t+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}}Y.O="BeepBox",Y.T=2,Y.P=9,Y.q=1,Y.k=5,Y.S=106;class X{constructor(){this.delayLine=null,this.allPassG=0,this.allPassGDelta=0,this.shelfA1=0,this.shelfA1Delta=0,this.shelfB0=0,this.shelfB0Delta=0,this.shelfB1=0,this.shelfB1Delta=0,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(t,i,n,s,r,a,o){const l=2*Math.PI*e.pickedStringDispersionCenterFreq/t.samplesPerSecond,h=2*Math.PI*e.pickedStringShelfHz/t.samplesPerSecond,c=(Math.pow(100,a)-1)/99,u=(Math.pow(100,o)-1)/99,f=this.prevDelayLength,p=n.phaseDeltas[s],m=n.phaseDeltaScales[s],d=p*Math.pow(m,r),y=2*Math.PI*p,v=2*Math.PI*d,g=2*y,b=2*v,M=Math.min(Math.PI,y*e.pickedStringDispersionFreqMult*Math.pow(l/y,e.pickedStringDispersionFreqScale)),S=Math.min(Math.PI,v*e.pickedStringDispersionFreqMult*Math.pow(l/v,e.pickedStringDispersionFreqScale)),w=Math.pow(.5,c*h/y),k=Math.pow(.5,u*h/v),I=Math.pow(w,e.stringDecayRate),F=Math.pow(k,e.stringDecayRate),P=Math.pow(w,.002),T=Math.pow(k,.002);nt.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(M),t.tempFrequencyResponse.analyze(nt.tempFilterStartCoefficients,g);const q=nt.tempFilterStartCoefficients.b[0],x=-t.tempFrequencyResponse.angle()/g;nt.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(S),t.tempFrequencyResponse.analyze(nt.tempFilterEndCoefficients,b);const D=nt.tempFilterEndCoefficients.b[0],O=-t.tempFrequencyResponse.angle()/b;nt.tempFilterStartCoefficients.highShelf1stOrder(h,I),t.tempFrequencyResponse.analyze(nt.tempFilterStartCoefficients,g);const R=nt.tempFilterStartCoefficients.a[1],A=nt.tempFilterStartCoefficients.b[0]*P,E=nt.tempFilterStartCoefficients.b[1]*P,z=-t.tempFrequencyResponse.angle()/g;nt.tempFilterEndCoefficients.highShelf1stOrder(h,F),t.tempFrequencyResponse.analyze(nt.tempFilterEndCoefficients,b);const H=nt.tempFilterEndCoefficients.a[1],L=nt.tempFilterEndCoefficients.b[0]*T,N=nt.tempFilterEndCoefficients.b[1]*T,C=-t.tempFrequencyResponse.angle()/b,V=1/p,G=1/d,B=Math.ceil(2*Math.max(V,G)),$=V-x-z,W=G-O-C;this.prevDelayLength=$,this.delayLengthDelta=(W-$)/r,this.allPassG=q,this.shelfA1=R,this.shelfB0=A,this.shelfB1=E,this.allPassGDelta=(D-q)/r,this.shelfA1Delta=(H-R)/r,this.shelfB0Delta=(L-A)/r,this.shelfB1Delta=(N-E)/r;const j=Math.abs(Math.log2($/f))>.01,U=-1==this.delayIndex||j;if(null==this.delayLine||this.delayLine.length<=B){const e=Math.ceil(2*t.samplesPerSecond/Q.frequencyFromPitch(12)),i=new Float32Array(nt.fittingPowerOfTwo(Math.max(e,B)));if(!U&&null!=this.delayLine){const t=this.delayLine.length-1>>0,e=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let n=0;n<this.delayLine.length;n++)i[n]=this.delayLine[e+n&t]}this.delayLine=i}const J=this.delayLine,K=J.length-1>>0;if(U){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0;const e=-$,n=Math.floor(e-V/2),s=Math.ceil(n+2*V);this.delayResetOffset=s;for(let t=n;t<=s;t++)J[t&K]=0;const r=i.wave,a=r.length-1,o=a/V,l=Math.min(.2*V,.003*t.samplesPerSecond),h=Math.ceil(e),c=e+V+l,u=c;let f=(h-e)*o,p=0;for(let t=h;t<=u;t++){const i=0|f,n=i%a;let s=r[n];const h=f-i;s+=(r[n+1]-s)*h;const u=(s-p)/o,m=Math.min(1,(t-e)/l)*Math.min(1,(c-t)/l),d=m*m*(3-2*m);J[t&K]+=u*d,p=s,f+=o}}}}class Z{constructor(){this.noteSecondsStart=0,this.noteSecondsEnd=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=e.noteSizeMax,this.noteSizeEnd=e.noteSizeMax,this.prevNoteSize=e.noteSizeMax,this.nextNoteSize=e.noteSizeMax,this.R=e.noteSizeMax,this.prevNoteSecondsStart=0,this.prevNoteSecondsEnd=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.H=e.noteSizeMax,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.envelopeStarts=[],this.envelopeEnds=[],this.L=[],this.N=0,this.lowpassCutoffDecayVolumeCompensation=1;for(let t=0;t<33;t++)this.envelopeStarts[t]=1,this.envelopeEnds[t]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this.R=e.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this.H=e.noteSizeMax,this.N=0}computeEnvelopes(t,i,n,s,r){const a=t.getTransition();null==r||!r.atNoteStart||a.continues||r.forceContinueAtStart||(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this.H=this.R,this.noteSecondsEnd=0,this.noteTicksEnd=0),null!=r&&(null!=r.note?this.R=r.note.pins[r.note.pins.length-1].size:this.R=e.noteSizeMax);const o=n+1,l=this.noteSecondsEnd,h=l+s,c=this.noteTicksEnd,u=c+1,f=this.prevNoteSecondsEnd,p=f+s,m=this.prevNoteTicksEnd,d=m+1,y=1/(e.ticksPerPart*e.partsPerBeat),v=y*n,g=y*o;let b=this.R,M=this.R,S=this.H,w=0,k=!1,I=!1,F=!1,P=!1,T=0,q=0,x=0,D=0;if(null!=r&&null!=r.note&&!r.passedEndOfNote){const t=r.note.getEndPinIndex(i),s=r.note.pins[t-1],l=r.note.pins[t],h=(r.note.start+s.time)*e.ticksPerPart,c=(r.note.start+l.time)*e.ticksPerPart,u=(n-h)/(c-h),f=(o-h)/(c-h);if(b=s.size+(l.size-s.size)*u,M=s.size+(l.size-s.size)*f,a.slides){const t=r.noteStartPart*e.ticksPerPart,i=r.noteEndPart*e.ticksPerPart,s=.5*(i-t),l=Math.min(s,a.slideTicks);null==r.prevNote||r.forceContinueAtStart||(n-t<l&&(k=!0,T=.5*(1-(n-t)/l)),o-t<l&&(I=!0,q=.5*(1-(o-t)/l))),null==r.nextNote||r.forceContinueAtEnd||(w=r.nextNote.pins[0].size,i-n<l&&(F=!0,x=.5*(1-(i-n)/l)),i-o<l&&(P=!0,D=.5*(1-(i-o)/l)))}}let O=1,R=!1;for(let i=0;i<=t.envelopeCount;i++){let n,s,r;if(i==t.envelopeCount){if(R)break;n=e.instrumentAutomationTargets.dictionary.noteVolume,s=0,r=e.envelopes.dictionary["note size"]}else{let a=t.envelopes[i];n=e.instrumentAutomationTargets[a.target],s=a.index,r=e.envelopes[a.envelope],0==r.type&&(R=!0)}if(null!=n.computeIndex){const e=n.computeIndex+s;let i=Z.computeEnvelope(r,l,v,b),a=Z.computeEnvelope(r,h,g,M);if(k){i+=(Z.computeEnvelope(r,f,v,S)-i)*T}if(I){a+=(Z.computeEnvelope(r,p,g,S)-a)*q}if(F){i+=(Z.computeEnvelope(r,0,v,w)-i)*x}if(P){a+=(Z.computeEnvelope(r,0,g,w)-a)*D}if(this.envelopeStarts[e]*=i,this.envelopeEnds[e]*=a,this.L[this.N++]=e,n.isFilter){const e=null!=t.tmpNoteFilterStart?t.tmpNoteFilterStart:t.noteFilter;e.controlPointCount>s&&0==e.controlPoints[s].type&&(O=Math.max(O,Z.getLowpassCutoffDecayVolumeCompensation(r)))}}}this.noteSecondsStart=l,this.noteSecondsEnd=h,this.noteTicksStart=c,this.noteTicksEnd=u,this.prevNoteSecondsStart=f,this.prevNoteSecondsEnd=p,this.prevNoteTicksStart=m,this.prevNoteTicksEnd=d,this.prevNoteSize=S,this.nextNoteSize=w,this.noteSizeStart=b,this.noteSizeEnd=M,this.prevSlideStart=k,this.prevSlideEnd=I,this.nextSlideStart=F,this.nextSlideEnd=P,this.prevSlideRatioStart=T,this.prevSlideRatioEnd=q,this.nextSlideRatioStart=x,this.nextSlideRatioEnd=D,this.lowpassCutoffDecayVolumeCompensation=O}clearEnvelopes(){for(let t=0;t<this.N;t++){const e=this.L[t];this.envelopeStarts[e]=1,this.envelopeEnds[e]=1}this.N=0}static computeEnvelope(t,e,i,n){switch(t.type){case 0:return nt.noteSizeToVolumeMult(n);case 1:return 1;case 4:return 1/(1+e*t.speed);case 5:return 1-1/(1+e*t.speed);case 6:return.5-.5*Math.cos(2*i*Math.PI*t.speed);case 7:return.75-.25*Math.cos(2*i*Math.PI*t.speed);case 2:return Math.max(1,2-10*e);case 3:const s=.25/Math.sqrt(t.speed);return e<s?e/s:1/(1+(e-s)*t.speed);case 8:return Math.pow(2,-t.speed*e);default:throw new Error("Unrecognized operator envelope type.")}}static getLowpassCutoffDecayVolumeCompensation(t){return 8==t.type?1.25+.025*t.speed:4==t.type?1+.02*t.speed:1}}class tt{constructor(){this.pitches=Array(e.maxChordSize).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.noiseSample=0,this.stringSustainStart=0,this.stringSustainEnd=0,this.phases=[],this.operatorWaves=[],this.phaseDeltas=[],this.phaseDeltaScales=[],this.expression=0,this.expressionDelta=0,this.operatorExpressions=[],this.operatorExpressionDeltas=[],this.prevPitchExpressions=Array(e.maxPitchOrOperatorCount).fill(null),this.prevVibrato=null,this.prevStringDecay=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.stereoVolumeLStart=0,this.stereoVolumeRStart=0,this.stereoVolumeLDelta=0,this.stereoVolumeRDelta=0,this.stereoDelayStart=0,this.stereoDelayEnd=0,this.stereoDelayDelta=0,this.customVolumeStart=0,this.customVolumeEnd=0,this.filterResonanceStart=0,this.filterResonanceDelta=0,this.isFirstOrder=!1,this.envelopeComputer=new Z,this.reset()}reset(){this.noiseSample=0;for(let t=0;t<e.maxPitchOrOperatorCount;t++)this.phases[t]=0,this.operatorWaves[t]=e.operatorWaves[0],this.feedbackOutputs[t]=0,this.prevPitchExpressions[t]=null;for(let t=0;t<this.noteFilterCount;t++)this.noteFilters[t].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0;for(const t of this.pickedStrings)t.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.drumsetPitch=null}}class et{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new T,this.activeModTones=new T,this.releasedTones=new T,this.liveInputTones=new T,this.type=0,this.synthesizer=null,this.wave=null,this.noisePitchFilterMult=1,this.unison=null,this.chord=null,this.effects=0,this.volumeScale=0,this.aliases=!1,this.eqFilterVolume=1,this.eqFilterVolumeDelta=0,this.mixVolume=1,this.mixVolumeDelta=0,this.delayInputMult=0,this.delayInputMultDelta=0,this.distortion=0,this.distortionDelta=0,this.distortionDrive=0,this.distortionDriveDelta=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeL=0,this.panningVolumeR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetL=0,this.panningOffsetR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusVoiceMult=0,this.chorusVoiceMultDelta=0,this.chorusCombinedMult=0,this.chorusCombinedMultDelta=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=null,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoMult=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMult=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.spectrumWave=new $,this.harmonicsWave=new j,this.drumsetSpectrumWaves=[];for(let t=0;t<e.drumCount;t++)this.drumsetSpectrumWaves[t]=new $}allocateNecessaryBuffers(t,i,n){if(b(i.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<t.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(t.panningDelayBufferSize)),M(i.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(t.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(t.chorusDelayBufferSize))),S(i.effects)){const t=Math.max(e.echoDelayRange>>1,i.echoDelay+1),s=2*nt.fittingPowerOfTwo(t*e.echoDelayStepTicks*n);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(s),this.echoDelayLineR=new Float32Array(s);else if(this.echoDelayLineL.length<s||this.echoDelayLineR.length<s){const t=new Float32Array(s),e=new Float32Array(s),i=this.echoDelayLineL.length-1;for(let n=0;n<this.echoDelayLineL.length;n++)t[n]=this.echoDelayLineL[this.echoDelayPos+n&i],e[n]=this.echoDelayLineL[this.echoDelayPos+n&i];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=t,this.echoDelayLineR=e}}w(i.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(e.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let t=0;t<this.eqFilterCount;t++)this.eqFilters[t].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let t=0;t<this.panningDelayLine.length;t++)this.panningDelayLine[t]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.volumeScale=1,this.aliases=!1,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.chorusDelayLineDirty){for(let t=0;t<this.chorusDelayLineL.length;t++)this.chorusDelayLineL[t]=0;for(let t=0;t<this.chorusDelayLineR.length;t++)this.chorusDelayLineR[t]=0}if(this.echoDelayLineDirty){for(let t=0;t<this.echoDelayLineL.length;t++)this.echoDelayLineL[t]=0;for(let t=0;t<this.echoDelayLineR.length;t++)this.echoDelayLineR[t]=0}if(this.reverbDelayLineDirty)for(let t=0;t<this.reverbDelayLine.length;t++)this.reverbDelayLine[t]=0;this.chorusPhase=0}compute(t,i,n,s,r,a,o){this.computed=!0,this.type=i.type,this.synthesizer=nt.getInstrumentSynthFunction(i),this.unison=e.unisons[i.unison],this.chord=i.getChord(),this.noisePitchFilterMult=e.chipNoises[i.chipNoise].pitchFilterMult,this.effects=i.effects,this.aliases=i.aliases,this.volumeScale=1,this.allocateNecessaryBuffers(t,i,n);const l=t.samplesPerSecond;this.updateWaves(i,l);const h=v(this.effects),c=g(this.effects),u=b(this.effects),f=M(this.effects),p=S(this.effects),m=w(this.effects);if(h){let n=i.distortion,r=i.distortion;t.isModActive(e.modulators.dictionary.distortion.index,a,o)&&(n=t.getModValue(e.modulators.dictionary.distortion.index,a,o,!1),r=t.getModValue(e.modulators.dictionary.distortion.index,a,o,!0));const l=Math.min(1,n/(e.distortionRange-1)),h=Math.min(1,r/(e.distortionRange-1)),c=Math.pow(1-.895*(Math.pow(20,l)-1)/19,2),u=Math.pow(1-.895*(Math.pow(20,h)-1)/19,2),f=(1+2*l)/e.distortionBaseVolume,p=(1+2*h)/e.distortionBaseVolume;this.distortion=c,this.distortionDelta=(u-c)/s,this.distortionDrive=f,this.distortionDriveDelta=(p-f)/s}if(c){let n=i.bitcrusherFreq,r=i.bitcrusherFreq;t.isModActive(e.modulators.dictionary["freq crush"].index,a,o)&&(n=t.getModValue(e.modulators.dictionary["freq crush"].index,a,o,!1),r=t.getModValue(e.modulators.dictionary["freq crush"].index,a,o,!0));let h=i.bitcrusherQuantization,c=i.bitcrusherQuantization;t.isModActive(e.modulators.dictionary["bit crush"].index,a,o)&&(h=t.getModValue(e.modulators.dictionary["bit crush"].index,a,o,!1),c=t.getModValue(e.modulators.dictionary["bit crush"].index,a,o,!0));const u=e.keys[t.song.key].basePitch,f=Q.frequencyFromPitch(u+60)*Math.pow(2,(e.bitcrusherFreqRange-1-n)*e.bitcrusherOctaveStep),p=Q.frequencyFromPitch(u+60)*Math.pow(2,(e.bitcrusherFreqRange-1-r)*e.bitcrusherOctaveStep),m=Math.min(1,f/l),d=Math.min(1,p/l);this.bitcrusherPhaseDelta=m,this.bitcrusherPhaseDeltaScale=Math.pow(d/m,1/s);const y=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-h))),v=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-c)));this.bitcrusherScale=y,this.bitcrusherScaleScale=Math.pow(v/y,1/s);const g=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-h),b=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-c);this.bitcrusherFoldLevel=g,this.bitcrusherFoldLevelScale=Math.pow(b/g,1/s)}let d=1;if(i.eqFilterType){const n=i.eqFilter;null==i.eqSubFilters[1]&&(i.eqSubFilters[1]=new J);const r=i.eqSubFilters[1];let h,c=i.eqFilterSimpleCut,u=i.eqFilterSimplePeak,f=i.eqFilterSimpleCut,p=i.eqFilterSimplePeak,m=!1;if(t.isModActive(e.modulators.dictionary["eq filt cut"].index,a,o)&&(c=t.getModValue(e.modulators.dictionary["eq filt cut"].index,a,o,!1),f=t.getModValue(e.modulators.dictionary["eq filt cut"].index,a,o,!0),m=!0),t.isModActive(e.modulators.dictionary["eq filt peak"].index,a,o)&&(u=t.getModValue(e.modulators.dictionary["eq filt peak"].index,a,o,!1),p=t.getModValue(e.modulators.dictionary["eq filt peak"].index,a,o,!0),m=!0),m){n.convertLegacySettingsForSynth(c,u),r.convertLegacySettingsForSynth(f,p),h=n.controlPoints[0];let t=r.controlPoints[0];h.toCoefficients(nt.tempFilterStartCoefficients,l,1,1),t.toCoefficients(nt.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new D),this.eqFilters[0].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterEndCoefficients,1/s,0==h.type)}else n.convertLegacySettingsForSynth(c,u,!0),h=n.controlPoints[0],h.toCoefficients(nt.tempFilterStartCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new D),this.eqFilters[0].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterStartCoefficients,1/s,0==h.type);d*=h.getVolumeCompensationMult(),this.eqFilterCount=1,d=Math.min(3,d)}else{const t=null!=i.tmpEqFilterStart?i.tmpEqFilterStart:i.eqFilter;for(let e=0;e<t.controlPointCount;e++){let n=t.controlPoints[e],r=null!=i.tmpEqFilterEnd&&null!=i.tmpEqFilterEnd.controlPoints[e]?i.tmpEqFilterEnd.controlPoints[e]:t.controlPoints[e];n.type!=r.type&&(n=r),n.toCoefficients(nt.tempFilterStartCoefficients,l,1,1),r.toCoefficients(nt.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<=e&&(this.eqFilters[e]=new D),this.eqFilters[e].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterEndCoefficients,1/s,0==n.type),d*=n.getVolumeCompensationMult()}this.eqFilterCount=t.controlPointCount,d=Math.min(3,d)}const y=nt.instrumentVolumeToVolumeMult(i.volume);this.mixVolume=y;let k=y;if(t.isModActive(e.modulators.dictionary["mix volume"].index,a,o)){const i=t.getModValue(e.modulators.dictionary["mix volume"].index,a,o,!1),n=t.getModValue(e.modulators.dictionary["mix volume"].index,a,o,!0);this.mixVolume*=i<=0?(i+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(i),k*=n<=0?(n+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(n)}t.isModActive(e.modulators.dictionary["song volume"].index)&&(this.mixVolume*=t.getModValue(e.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,k*=t.getModValue(e.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(k-this.mixVolume)/s;let I=d,F=d,P=1,T=1;if(u){let n=i.pan,r=i.pan;t.isModActive(e.modulators.dictionary.pan.index,a,o)&&(n=t.getModValue(e.modulators.dictionary.pan.index,a,o,!1),r=t.getModValue(e.modulators.dictionary.pan.index,a,o,!0));let h=Math.max(-1,Math.min(1,(n-e.panCenter)/e.panCenter)),c=Math.max(-1,Math.min(1,(r-e.panCenter)/e.panCenter));const u=1.414*Math.cos((1+h)*Math.PI*.25),f=1.414*Math.cos((1-h)*Math.PI*.25),p=1.414*Math.cos((1+c)*Math.PI*.25),m=1.414*Math.cos((1-c)*Math.PI*.25),d=l*e.panDelaySecondsMax;let y=i.panDelay,v=i.panDelay;t.isModActive(e.modulators.dictionary["pan delay"].index,a,o)&&(y=t.getModValue(e.modulators.dictionary["pan delay"].index,a,o,!1),v=t.getModValue(e.modulators.dictionary["pan delay"].index,a,o,!0));const g=h*y*d/10,b=c*v*d/10,M=Math.max(0,g),S=Math.max(0,-g),w=Math.max(0,b),k=Math.max(0,-b);this.panningVolumeL=u,this.panningVolumeR=f,this.panningVolumeDeltaL=(p-u)/s,this.panningVolumeDeltaR=(m-f)/s,this.panningOffsetL=this.panningDelayPos-M+t.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-S+t.panningDelayBufferSize,this.panningOffsetDeltaL=(w-M)/s,this.panningOffsetDeltaR=(k-S)/s}if(f){let n=i.chorus,r=i.chorus;t.isModActive(e.modulators.dictionary.chorus.index,a,o)&&(n=t.getModValue(e.modulators.dictionary.chorus.index,a,o,!1),r=t.getModValue(e.modulators.dictionary.chorus.index,a,o,!0));let l=Math.min(1,n/(e.chorusRange-1)),h=Math.min(1,r/(e.chorusRange-1));l=.6*l+.4*Math.pow(l,6),h=.6*h+.4*Math.pow(h,6);const c=1/Math.sqrt(3*l*l+1),u=1/Math.sqrt(3*h*h+1);this.chorusVoiceMult=l,this.chorusVoiceMultDelta=(h-l)/s,this.chorusCombinedMult=c,this.chorusCombinedMultDelta=(u-c)/s}let q=0,x=0;if(p){let r=i.echoSustain,h=i.echoSustain;t.isModActive(e.modulators.dictionary.echo.index,a,o)&&(r=Math.max(0,t.getModValue(e.modulators.dictionary.echo.index,a,o,!1)),h=Math.max(0,t.getModValue(e.modulators.dictionary.echo.index,a,o,!0)));const c=.9*Math.min(1,Math.pow(r/e.echoSustainRange,1.1)),u=.9*Math.min(1,Math.pow(h/e.echoSustainRange,1.1));this.echoMult=c,this.echoMultDelta=Math.max(0,(u-c)/s),q=Math.max(c,u);let f=i.echoDelay,p=i.echoDelay,m=!1;t.isModActive(e.modulators.dictionary["echo delay"].index,a,o)&&(f=t.getModValue(e.modulators.dictionary["echo delay"].index,a,o,!1),p=t.getModValue(e.modulators.dictionary["echo delay"].index,a,o,!0),m=!0);const d=Math.round((f+1)*e.echoDelayStepTicks*n),y=Math.round((p+1)*e.echoDelayStepTicks*n);null==this.echoDelayOffsetEnd||m?this.echoDelayOffsetStart=d:this.echoDelayOffsetStart=this.echoDelayOffsetEnd,this.echoDelayOffsetEnd=y,x=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/l,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/s;const v=2*Math.PI*e.echoShelfHz/t.samplesPerSecond;nt.tempFilterStartCoefficients.highShelf1stOrder(v,e.echoShelfGain),this.echoShelfA1=nt.tempFilterStartCoefficients.a[1],this.echoShelfB0=nt.tempFilterStartCoefficients.b[0],this.echoShelfB1=nt.tempFilterStartCoefficients.b[1]}let O=0;if(m){let n=i.reverb,r=i.reverb;t.isModActive(e.modulators.dictionary.reverb.index,a,o)&&(n=t.getModValue(e.modulators.dictionary.reverb.index,a,o,!1),r=t.getModValue(e.modulators.dictionary.reverb.index,a,o,!0)),t.isModActive(e.modulators.dictionary["song reverb"].index,a,o)&&(n*=(t.getModValue(e.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-e.modulators.dictionary["song reverb"].convertRealFactor)/e.reverbRange,r*=(t.getModValue(e.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-e.modulators.dictionary["song reverb"].convertRealFactor)/e.reverbRange);const l=.425*Math.min(1,Math.pow(n/e.reverbRange,.667)),h=.425*Math.min(1,Math.pow(r/e.reverbRange,.667));this.reverbMult=l,this.reverbMultDelta=(h-l)/s,O=Math.max(l,h);const c=2*Math.PI*e.reverbShelfHz/t.samplesPerSecond;nt.tempFilterStartCoefficients.highShelf1stOrder(c,e.reverbShelfGain),this.reverbShelfA1=nt.tempFilterStartCoefficients.a[1],this.reverbShelfB0=nt.tempFilterStartCoefficients.b[0],this.reverbShelfB1=nt.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){I=0,F=0,P=0,T=0;let i=0;f&&(i+=t.chorusDelayBufferSize),p&&(i+=this.echoDelayLineL.length),m&&(i+=e.reverbDelayBufferSize),this.flushedSamples+=s,this.flushedSamples>=i&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress||(I=0),F=0;const t=1/256,i=-Math.log2(t);let s=0;if(f&&(s+=e.chorusMaxDelay),p){const t=Math.pow(q,1/x);s+=-1/Math.log2(t)*i}if(m){const t=2*O,n=e.reverbDelayBufferSize/4/l,r=Math.pow(t,1/n);s+=-1/Math.log2(r)*i}const r=n/l/s,a=this.attentuationProgress+r;a>=1&&(T=0),this.attentuationProgress=a,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=I,this.eqFilterVolumeDelta=(F-I)/s,this.delayInputMult=P,this.delayInputMultDelta=(T-P)/s}updateWaves(t,i){if(this.volumeScale=1,0==t.type)this.wave=this.aliases?e.rawChipWaves[t.chipWave].samples:e.chipWaves[t.chipWave].samples;else if(8==t.type)this.wave=this.aliases?t.customChipWave:t.customChipWaveIntegral,this.volumeScale=.05;else if(2==t.type)this.wave=r(t.chipNoise,P,I);else if(5==t.type)this.wave=this.harmonicsWave.getCustomWave(t.harmonicsWave,t.type);else if(7==t.type)this.wave=this.harmonicsWave.getCustomWave(t.harmonicsWave,t.type);else if(3==t.type)this.wave=this.spectrumWave.getCustomWave(t.spectrumWave,8);else if(4==t.type){for(let i=0;i<e.drumCount;i++)this.drumsetSpectrumWaves[i].getCustomWave(t.drumsetSpectrumWaves[i],et.V(i));this.wave=null}else this.wave=null}getDrumsetWave(t){if(4==this.type)return this.drumsetSpectrumWaves[t].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}static drumsetIndexReferenceDelta(t){return Q.frequencyFromPitch(e.spectrumBasePitch+6*t)/44100}static V(t){return 15+Math.log2(et.drumsetIndexReferenceDelta(t))}}class it{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class nt{constructor(t=null){this.samplesPerSecond=44100,this.song=null,this.preferLowerLatency=!1,this.anticipatePoorPerformance=!1,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.liveInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.enableMetronome=!1,this.countInMetronome=!1,this.renderingSong=!1,this.wantToSkip=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.modValues=[],this.modInsValues=[],this.nextModValues=[],this.nextModInsValues=[],this.isPlayingSong=!1,this.isRecording=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new U,this.tempFrequencyResponse=new x,this.channels=[],this.tonePool=new T,this.tempMatchedPitchTones=Array(e.maxChordSize).fill(null),this.startedMetronome=!1,this.metronomeSamplesRemaining=-1,this.metronomeAmplitude=0,this.metronomePrevAmplitude=0,this.metronomeFilter=0,this.limit=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=t=>{const e=t.outputBuffer,i=e.getChannelData(0),n=e.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==i[0]&&0==n[0]&&0==i[e.length-1]&&0==n[e.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const t=e.length;for(let e=0;e<t;e++)i[e]=0,n[e]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():this.synthesize(i,n,e.length,this.isPlayingSong)},this.computeDelayBufferSizes(),null!=t&&this.setSong(t)}syncSongState(){const t=this.song.getChannelCount();for(let e=this.channels.length;e<t;e++)this.channels[e]=new it;this.channels.length=t;for(let e=0;e<t;e++){const t=this.song.channels[e],i=this.channels[e];for(let e=i.instruments.length;e<t.instruments.length;e++)i.instruments[e]=new et;if(i.instruments.length=t.instruments.length,i.muted!=t.muted&&(i.muted=t.muted,i.muted))for(const t of i.instruments)t.resetAllEffects()}}warmUpSynthesizer(t){if(null!=t){this.syncSongState();const e=this.getSamplesPerTick();for(let i=0;i<t.getChannelCount();i++)for(let n=0;n<t.channels[i].instruments.length;n++){const s=t.channels[i].instruments[n],r=this.channels[i].instruments[n];nt.getInstrumentSynthFunction(s),s.LFOtime=0,s.nextLFOtime=0,s.arpTime=0,s.tmpEqFilterStart=s.eqFilter,s.tmpEqFilterEnd=null,s.tmpNoteFilterStart=s.noteFilter,s.tmpNoteFilterEnd=null,r.updateWaves(s,this.samplesPerSecond),r.allocateNecessaryBuffers(this,s,e)}}var e=new Float32Array(1);this.isPlayingSong=!0,this.synthesize(e,e,1,!0),this.isPlayingSong=!1}computeLatestModValues(){if(null!=this.song&&this.song.modChannelCount>0){let t=[],i=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[];for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++){i[t]=[],this.modInsValues[t]=[],this.nextModInsValues[t]=[];for(let e=0;e<this.song.channels[t].instruments.length;e++)this.modInsValues[t][e]=[],this.nextModInsValues[t][e]=[],i[t][e]=[]}let n=this.beat*e.partsPerBeat+this.part;for(let s=this.song.pitchChannelCount+this.song.noiseChannelCount;s<this.song.getChannelCount();s++)if(!this.song.channels[s].muted){let r;for(let a=this.bar;a>=0;a--)if(r=this.song.getPattern(s,a),null!=r){let o=r.instruments[0],l=this.song.channels[s].instruments[o],h=[],c=[],u=a==this.bar?n:this.findPartsInBar(a);for(const t of r.notes)if(t.start<u&&(null==h[e.modCount-1-t.pitches[0]]||t.end>h[e.modCount-1-t.pitches[0]]))if(t.end<=u)h[e.modCount-1-t.pitches[0]]=t.end,c[e.modCount-1-t.pitches[0]]=t.pins[t.pins.length-1].size;else{h[e.modCount-1-t.pitches[0]]=u;for(let i=0;i<t.pins.length;i++)if(t.pins[i].time+t.start>u){const n=t.pins[i].time-t.pins[i-1].time,s=u-t.start-t.pins[i-1].time,r=t.pins[i].size-t.pins[i-1].size;c[e.modCount-1-t.pitches[0]]=Math.round(t.pins[i-1].size+r*s/n),i=t.pins.length}}for(let n=0;n<e.modCount;n++)if(null!=h[n])if(e.modulators[l.modulators[n]].forSong)(null==t[l.modulators[n]]||a*e.partsPerBeat*this.song.beatsPerBar+h[n]>t[l.modulators[n]])&&(this.setModValue(c[n],c[n],n,l.modChannels[n],l.modInstruments[n],l.modulators[n]),t[l.modulators[n]]=a*e.partsPerBeat*this.song.beatsPerBar+h[n]);else{let t=[];if(l.modInstruments[n]==this.song.channels[l.modChannels[n]].instruments.length)for(let e=0;e<this.song.channels[l.modChannels[n]].instruments.length;e++)t.push(e);else if(l.modInstruments[n]>this.song.channels[l.modChannels[n]].instruments.length){const e=this.song.getPattern(l.modChannels[n],a);null!=e&&(t=e.instruments)}else t.push(l.modInstruments[n]);for(let s=0;s<t.length;s++){const r=l.modulators[n]==e.modulators.dictionary["eq filter"].index,o=l.modulators[n]==e.modulators.dictionary["note filter"].index;let u=l.modulators[n];if(r?u=e.modulators.length+l.modFilterTypes[n]:o&&(u=e.modulators.length+1+2*e.filterMaxPoints+l.modFilterTypes[n]),null==i[l.modChannels[n]][t[s]][u]||a*e.partsPerBeat*this.song.beatsPerBar+h[n]>i[l.modChannels[n]][t[s]][u]){if(r){let i=this.song.channels[l.modChannels[n]].instruments[t[s]];if(0==l.modFilterTypes[n])i.tmpEqFilterStart=i.eqSubFilters[c[n]];else{for(let t=0;t<e.filterMorphCount;t++)i.tmpEqFilterStart==i.eqSubFilters[t]&&(i.tmpEqFilterStart=new J,i.tmpEqFilterStart.fromJsonObject(i.eqSubFilters[t].toJsonObject()),t=e.filterMorphCount);Math.floor((l.modFilterTypes[n]-1)/2)<i.tmpEqFilterStart.controlPointCount&&(l.modFilterTypes[n]%2?i.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].freq=c[n]:i.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].gain=c[n])}i.tmpEqFilterEnd=i.tmpEqFilterStart}else if(o){let i=this.song.channels[l.modChannels[n]].instruments[t[s]];if(0==l.modFilterTypes[n])i.tmpNoteFilterStart=i.noteSubFilters[c[n]];else{for(let t=0;t<e.filterMorphCount;t++)i.tmpNoteFilterStart==i.noteSubFilters[t]&&(i.tmpNoteFilterStart=new J,i.tmpNoteFilterStart.fromJsonObject(i.noteSubFilters[t].toJsonObject()),t=e.filterMorphCount);Math.floor((l.modFilterTypes[n]-1)/2)<i.tmpNoteFilterStart.controlPointCount&&(l.modFilterTypes[n]%2?i.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].freq=c[n]:i.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].gain=c[n])}i.tmpNoteFilterEnd=i.tmpNoteFilterStart}else this.setModValue(c[n],c[n],n,l.modChannels[n],t[s],u);i[l.modChannels[n]][t[s]][u]=a*e.partsPerBeat*this.song.beatsPerBar+h[n]}}}}}}}determineInvalidModulators(t){if(null!=this.song)for(let i=0;i<e.modCount;i++){if(t.invalidModulators[i]=!0,-1==t.modChannels[i]){0!=t.modulators[i]&&(t.invalidModulators[i]=!1);continue}const n=this.song.channels[t.modChannels[i]];if(null==n)continue;let s=[];s=t.modInstruments[i]>=n.instruments.length?n.instruments:[n.instruments[t.modInstruments[i]]];for(let n=0;n<s.length;n++){const r=s[n];if(null==r)continue;const a=e.modulators[t.modulators[i]].name;12!=e.modulators[t.modulators[i]].associatedEffect&&!(r.effects&1<<e.modulators[t.modulators[i]].associatedEffect)||1!=r.type&&("fm slider 1"==a||"fm slider 2"==a||"fm slider 3"==a||"fm slider 4"==a||"fm feedback"==a)||6!=r.type&&"pulse width"==a||!r.getChord().arpeggiates&&("arp speed"==a||"reset arp"==a)||r.eqFilterType&&"eq filter"==a||!r.eqFilterType&&("eq filt cut"==a||"eq filt peak"==a)||"eq filter"==a&&Math.floor((t.modFilterTypes[i]+1)/2)>r.eqFilter.controlPointCount||r.noteFilterType&&"note filter"==a||!r.noteFilterType&&("note filt cut"==a||"note filt peak"==a)||"note filter"==a&&Math.floor((t.modFilterTypes[i]+1)/2)>r.noteFilter.controlPointCount||(t.invalidModulators[i]=!1,n=s.length)}}}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(t){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,t));let i=this.playheadInternal;this.bar=Math.floor(i),i=this.song.beatsPerBar*(i-this.bar),this.beat=Math.floor(i),i=e.partsPerBeat*(i-this.beat),this.part=Math.floor(i),i=e.ticksPerPart*(i-this.part),this.tick=Math.floor(i),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*e.ticksPerPart*e.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*e.partsPerBeat+this.part)*e.ticksPerPart+this.tick}getCurrentPart(){return this.beat*e.partsPerBeat+this.part}findPartsInBar(t){if(null==this.song)return 0;let i=e.partsPerBeat*this.song.beatsPerBar;for(let n=this.song.pitchChannelCount+this.song.noiseChannelCount;n<this.song.getChannelCount();n++){let s=this.song.getPattern(n,t);if(null!=s){let t=this.song.channels[n].instruments[s.instruments[0]];for(let n=0;n<e.modCount;n++)if(t.modulators[n]==e.modulators.dictionary["next bar"].index)for(const t of s.notes)t.pitches[0]==e.modCount-1-n&&i>t.start&&(i=t.start)}}return i}getTotalSamples(t,i,n){if(null==this.song)return-1;let s=t?0:this.song.loopStart,r=i?this.song.barCount:this.song.loopStart+this.song.loopLength,a=!1,o=!1,l=this.song.tempo;for(let t=this.song.pitchChannelCount+this.song.noiseChannelCount;t<this.song.getChannelCount();t++)for(let i=s;i<r;i++){let n=this.song.getPattern(t,i);if(null!=n){let i=this.song.channels[t].instruments[n.instruments[0]];for(let t=0;t<e.modCount;t++)i.modulators[t]==e.modulators.dictionary.tempo.index&&(a=!0),i.modulators[t]==e.modulators.dictionary["next bar"].index&&(o=!0)}}if(s>0){let t=null,i=0;for(let n=s-1;n>=0;n--){for(let s=this.song.pitchChannelCount+this.song.noiseChannelCount;s<this.song.getChannelCount();s++){let r=this.song.getPattern(s,n);if(null!=r){let a=r.instruments[0],o=this.song.channels[s].instruments[a],l=this.findPartsInBar(n);for(const n of r.notes)if(o.modulators[e.modCount-1-n.pitches[0]]==e.modulators.dictionary.tempo.index&&n.start<l&&(null==t||n.end>t))if(n.end<=l)t=n.end,i=n.pins[n.pins.length-1].size;else{t=l;for(let t=0;t<n.pins.length;t++)if(n.pins[t].time+n.start>l){const e=n.pins[t].time-n.pins[t-1].time,s=l-n.start-n.pins[t-1].time,r=n.pins[t].size-n.pins[t-1].size;i=Math.round(n.pins[t-1].size+r*s/e),t=n.pins.length}}}}null!=t&&(l=i+e.modulators.dictionary.tempo.convertRealFactor,n=-1)}}if(a||o){let t=s,i=!1,h=0;for(;!i;){let s=e.partsPerBeat*this.song.beatsPerBar,c=0;if(o&&(s=this.findPartsInBar(t)),a){let i=!1;for(let n=this.song.pitchChannelCount+this.song.noiseChannelCount;n<this.song.getChannelCount();n++)if(0==i){let r=this.song.getPattern(n,t);if(null!=r){let t=this.song.channels[n].instruments[r.instruments[0]];for(let n=0;n<e.modCount;n++)if(0==i&&t.modulators[n]==e.modulators.dictionary.tempo.index&&r.notes.find((t=>t.pitches[0]==e.modCount-1-n))){i=!0,r.notes.sort((function(t,e){return t.start==e.start?t.pitches[0]-e.pitches[0]:t.start-e.start}));for(const t of r.notes)if(t.pitches[0]==e.modCount-1-n&&(h+=Math.min(s-c,t.start-c)*e.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),t.start<s))for(let i=1;i<t.pins.length;i++){if(t.pins[i-1].time+t.start<=s){const n=e.ticksPerPart*Math.min(s-(t.start+t.pins[i-1].time),t.pins[i].time-t.pins[i-1].time),r=t.pins[i-1].size+e.modulators.dictionary.tempo.convertRealFactor;let a=t.pins[i].size+e.modulators.dictionary.tempo.convertRealFactor;t.pins[i].time+t.start>s&&(a=t.pins[i-1].size+(t.pins[i].size-t.pins[i-1].size)*(s-(t.start+t.pins[i-1].time))/(t.pins[i].time-t.pins[i-1].time)+e.modulators.dictionary.tempo.convertRealFactor);let o=e.partsPerBeat*e.ticksPerPart/60;h+=a!=r?-this.samplesPerSecond*n*(Math.log(o*a*n)-Math.log(o*r*n))/(o*(r-a)):n*this.getSamplesPerTickSpecificBPM(a),l=a}c=Math.min(t.start+t.pins[i].time,s)}}}}}h+=(s-c)*e.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),t++,0!=n&&t==this.song.loopStart+this.song.loopLength&&(t=this.song.loopStart,n>0&&n--),t>=r&&(i=!0)}return Math.ceil(h)}return this.getSamplesPerBar()*this.getTotalBars(t,i,n)}getTotalBars(t,e,i=this.loopRepeatCount){if(null==this.song)throw new Error;let n=this.song.loopLength*(i+1);return t&&(n+=this.song.loopStart),e&&(n+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),n}setSong(t){"string"==typeof t?this.song=new Y(t):t instanceof Y&&(this.song=t),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=nt.fittingPowerOfTwo(this.samplesPerSecond*e.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=nt.fittingPowerOfTwo(this.samplesPerSecond*e.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const t=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(null==this.audioCtx||null==this.scriptNode||this.scriptNode.bufferSize!=t){null!=this.scriptNode&&this.deactivateAudio();const e=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:e}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(t,0,2):this.audioCtx.createJavaScriptNode(t,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.computeLatestModValues(),this.warmUpSynthesizer(this.song),this.isPlayingSong=!0,this.activateAudio())}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1,this.modValues=[],this.nextModValues=[],null!=this.song)){this.song.inVolumeCap=0,this.song.outVolumeCap=0;for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)this.modInsValues[t]=[],this.nextModInsValues[t]=[]}}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const t of this.channels)for(const e of t.instruments)e.resetAllEffects()}setModValue(t,i,n,s,r,a){let o=t+e.modulators[a].convertRealFactor,l=i+e.modulators[a].convertRealFactor;return e.modulators[a].forSong?null!=this.modValues[a]&&this.modValues[a]==o&&this.nextModValues[a]==l||(this.modValues[a]=o,this.nextModValues[a]=l):null!=this.modInsValues[s][r][a]&&this.modInsValues[s][r][a]==o&&this.nextModInsValues[s][r][a]==l||(this.modInsValues[s][r][a]=o,this.nextModInsValues[s][r][a]=l),o}getModValue(t,i,n,s){if(e.modulators[t].forSong){if(null!=this.modValues[t]&&null!=this.nextModValues[t])return s?this.nextModValues[t]:this.modValues[t]}else if(null!=i&&null!=n&&null!=this.modInsValues[i][n][t]&&null!=this.nextModInsValues[i][n][t])return s?this.nextModInsValues[i][n][t]:this.modInsValues[i][n][t];return-1}isAnyModActive(t,i){for(let n=0;n<e.modulators.length;n++)if(null!=this.modValues&&null!=this.modValues[n]||null!=this.modInsValues&&null!=this.modInsValues[t]&&null!=this.modInsValues[t][i]&&null!=this.modInsValues[t][i][n])return!0;return!1}unsetMod(t,e,i){(this.isModActive(t)||null!=e&&null!=i&&this.isModActive(t,e,i))&&(this.modValues[t]=null,this.nextModValues[t]=null,null!=e&&null!=i&&(this.modInsValues[e][i][t]=null,this.nextModInsValues[e][i][t]=null))}isFilterModActive(t,e,i){const n=this.song.channels[e].instruments[i];if(t){if(n.noteFilterType)return!1;if(null!=n.tmpNoteFilterEnd)return!0}else{if(n.eqFilterType)return!1;if(null!=n.tmpEqFilterEnd)return!0}return!1}isModActive(t,i,n){return e.modulators[t].forSong?null!=this.modValues&&null!=this.modValues[t]:null!=i&&null!=n&&null!=this.modInsValues&&null!=this.modInsValues[i]&&null!=this.modInsValues[i][n]&&null!=this.modInsValues[i][n][t]}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(t){this.bar=t,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const t=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const t=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const t=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}getNextBar(){let t=this.bar+1;return this.isRecording?t>=this.song.barCount&&(t=this.song.barCount-1):0!=this.loopRepeatCount&&t==this.song.loopStart+this.song.loopLength&&(t=this.song.loopStart),t}skipBar(){if(!this.song)return;const t=this.getSamplesPerTick();this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=t,this.isAtStartOfTick=!0,0!=this.loopRepeatCount&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)}synthesize(t,i,n,s=!0){if(null==this.song){for(let e=0;e<n;e++)t[e]=0,i[e]=0;return void this.deactivateAudio()}const r=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let a=this.getSamplesPerTick(),o=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>a)&&(this.tickSampleCountdown=a,this.isAtStartOfTick=!0),s&&(this.beat>=r.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=a,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=r.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<n)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(n));const l=+this.volume,h=1-Math.pow(.5,4/this.samplesPerSecond),c=1-Math.pow(.5,4e3/this.samplesPerSecond);let u=+this.limit,f=[],p=-1,m=0;for(;m<n&&!o;){this.nextBar=this.getNextBar(),this.nextBar>=r.barCount&&(this.nextBar=null);const d=n-m,y=Math.ceil(this.tickSampleCountdown),v=Math.min(y,d),g=m+v;if(this.isPlayingSong||this.renderingSong)for(let t=r.pitchChannelCount+r.noiseChannelCount;t<r.getChannelCount();t++){const e=r.channels[t],i=this.channels[t];this.determineCurrentActiveTones(r,t,a,s);for(let n=0;n<e.instruments.length;n++){const e=i.instruments[n];for(let i=0;i<e.activeModTones.count();i++){const n=e.activeModTones.get(i);this.playModTone(r,t,a,m,v,n,!1,!1)}}}if(this.wantToSkip){let t=f.includes(this.bar);if(t&&m==p)return;-1==p&&(p=m),t||f.push(this.bar),this.wantToSkip=!1,this.skipBar()}else{for(let n=0;n<r.pitchChannelCount+r.noiseChannelCount;n++){const o=r.channels[n],l=this.channels[n];this.isAtStartOfTick&&(this.determineCurrentActiveTones(r,n,a,s&&!this.countInMetronome),this.determineLiveInputTones(r,n,a));for(let s=0;s<o.instruments.length;s++){const h=o.instruments[s],c=l.instruments[s];if(this.isAtStartOfTick){let t=c.activeTones.count()+c.liveInputTones.count();for(let i=0;i<c.releasedTones.count();i++){const s=c.releasedTones.get(i);if(s.ticksSinceReleased>=Math.abs(h.getFadeOutTicks())){this.freeReleasedTone(c,i),i--;continue}const o=t>=e.maximumTonesPerChannel;this.computeTone(r,n,a,s,!0,o),t++}c.awake&&(c.computed||c.compute(this,h,a,Math.ceil(a),null,n,s),c.computed=!1)}for(let t=0;t<c.activeTones.count();t++){const e=c.activeTones.get(t);this.playTone(n,m,v,e)}for(let t=0;t<c.liveInputTones.count();t++){const e=c.liveInputTones.get(t);this.playTone(n,m,v,e)}for(let t=0;t<c.releasedTones.count();t++){const e=c.releasedTones.get(t);this.playTone(n,m,v,e)}c.awake&&nt.effectsSynth(this,t,i,m,v,c);const u=this.tickSampleCountdown,f=1-u/a,p=1-(u-v)/a,d=(this.beat*e.partsPerBeat+this.part)*e.ticksPerPart+this.tick,y=d/e.ticksPerPart,g=(d+1)/e.ticksPerPart,b=y+(g-y)*f,M=y+(g-y)*p;let S=h.vibratoSpeed;h.LFOtime=h.nextLFOtime,this.isModActive(e.modulators.dictionary["vibrato speed"].index,n,s)&&(S=this.getModValue(e.modulators.dictionary["vibrato speed"].index,n,s)),0==S?(h.LFOtime=0,h.nextLFOtime=0):h.nextLFOtime+=.1*S*(M-b)}}if(this.enableMetronome||this.countInMetronome)if(0==this.part){if(!this.startedMetronome){const t=r.beatsPerBar>4&&r.beatsPerBar%2==0&&this.beat==r.beatsPerBar/2,e=0==this.beat?8:t?6:4,i=0==this.beat?1600:t?1200:800,n=0==this.beat?.06:t?.05:.04,s=this.samplesPerSecond/i,a=2*Math.PI/s;this.metronomeSamplesRemaining=Math.floor(s*e),this.metronomeFilter=2*Math.cos(a),this.metronomeAmplitude=n*Math.sin(a),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const e=Math.min(g,m+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=e-m;for(let n=m;n<e;n++){t[n]+=this.metronomeAmplitude,i[n]+=this.metronomeAmplitude;const e=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=e}}}else this.startedMetronome=!1;for(let e=m;e<g;e++){const n=t[e]*r.masterGain*r.masterGain,s=i[e]*r.masterGain*r.masterGain,a=n<0?-n:n,o=s<0?-s:s,f=a>o?a:o;this.song.inVolumeCap=this.song.inVolumeCap>f?this.song.inVolumeCap:f;const p=+(f>r.compressionThreshold)+ +(f>r.limitThreshold),m=+(0==p)*((.8*(f+1-r.compressionThreshold)+.25)*r.compressionRatio+1.05*(1-r.compressionRatio))+1.05*+(1==p)+ +(2==p)*(1.05*((f+1-r.limitThreshold)*r.limitRatio+(1-r.limitThreshold)));u+=(m-u)*(u<m?c:h);const d=l/(u>=1?1.05*u:.8*u+.25);t[e]=n*d,i[e]=s*d,this.song.outVolumeCap=this.song.outVolumeCap>f*d?this.song.outVolumeCap:f*d}if(m+=v,this.isAtStartOfTick=!1,this.tickSampleCountdown-=v,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const t of this.channels)for(const e of t.instruments){for(let t=0;t<e.releasedTones.count();t++){const i=e.releasedTones.get(t);i.isOnLastTick?(this.freeReleasedTone(e,t),t--):i.ticksSinceReleased++}e.deactivateAfterThisTick&&e.deactivate(),e.tonesAddedInThisTick=!1}for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let i=0;i<this.song.channels[t].instruments.length;i++){let n=this.song.channels[t].instruments[i],s=n.arpeggioSpeed;this.isModActive(e.modulators.dictionary["arp speed"].index,t,i)?(s=this.getModValue(e.modulators.dictionary["arp speed"].index,t,i,!1),Number.isInteger(s)?n.arpTime+=e.arpSpeedScale[s]:n.arpTime+=(1-s%1)*e.arpSpeedScale[Math.floor(s)]+s%1*e.arpSpeedScale[Math.ceil(s)]):n.arpTime+=e.arpSpeedScale[s]}for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let e=0;e<this.song.channels[t].instruments.length;e++){let i=this.song.channels[t].instruments[e];null!=i.tmpEqFilterEnd?i.tmpEqFilterStart=i.tmpEqFilterEnd:i.tmpEqFilterStart=i.eqFilter,null!=i.tmpNoteFilterEnd?i.tmpNoteFilterStart=i.tmpNoteFilterEnd:i.tmpNoteFilterStart=i.noteFilter}this.tick++,this.tickSampleCountdown+=a,this.tick==e.ticksPerPart&&(this.tick=0,this.part++,this.liveInputDuration--,this.part==e.partsPerBeat&&(this.part=0,s&&(this.beat++,this.beat==r.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=r.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.resetEffects(),this.pause())))))))}for(let t=0;t<e.modulators.length;t++)null!=this.nextModValues&&null!=this.nextModValues[t]&&(this.modValues[t]=this.nextModValues[t]);this.isModActive(e.modulators.dictionary.tempo.index)&&(a=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,a));for(let t=0;t<this.song.pitchChannelCount;t++)for(let i of this.song.channels[t].instruments)i.nextLFOtime=i.nextLFOtime%(e.vibratoTypes[i.vibratoType].period/(e.ticksPerPart*a/this.samplesPerSecond)),i.arpTime=i.arpTime%(2520*e.ticksPerArpeggio);for(let t=0;t<e.modulators.length;t++)for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let i=0;i<this.song.getMaxInstrumentsPerChannel();i++)null!=this.nextModInsValues&&null!=this.nextModInsValues[e]&&null!=this.nextModInsValues[e][i]&&null!=this.nextModInsValues[e][i][t]&&(this.modInsValues[e][i][t]=this.nextModInsValues[e][i][t])}}(!Number.isFinite(u)||Math.abs(u)<O)&&(u=0),this.limit=u,s&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/a)/2+this.part)/e.partsPerBeat+this.beat)/r.beatsPerBar+this.bar)}freeTone(t){this.tonePool.pushBack(t)}newTone(){if(this.tonePool.count()>0){const t=this.tonePool.popBack();return t.freshlyAllocated=!0,t}return new tt}releaseTone(t,e){t.releasedTones.pushFront(e),e.atNoteStart=!1,e.passedEndOfNote=!0}freeReleasedTone(t,e){this.freeTone(t.releasedTones.get(e)),t.releasedTones.remove(e)}freeAllTones(){for(const t of this.channels)for(const e of t.instruments){for(;e.activeTones.count()>0;)this.freeTone(e.activeTones.popBack());for(;e.activeModTones.count()>0;)this.freeTone(e.activeModTones.popBack());for(;e.releasedTones.count()>0;)this.freeTone(e.releasedTones.popBack());for(;e.liveInputTones.count()>0;)this.freeTone(e.liveInputTones.popBack())}}determineLiveInputTones(t,e,i){const n=t.channels[e],s=this.channels[e],r=this.liveInputPitches;for(let a=0;a<n.instruments.length;a++){const o=s.instruments[a],l=o.liveInputTones;let h=0;if(this.liveInputDuration>0&&e==this.liveInputChannel&&r.length>0&&-1!=this.liveInputInstruments.indexOf(a)){const s=n.instruments[a];if(s.getChord().singleTone){let n;l.count()<=h?(n=this.newTone(),l.pushBack(n)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(o,l.get(h)),n=this.newTone(),l.set(h,n)):n=l.get(h),h++;for(let t=0;t<r.length;t++)n.pitches[t]=r[t];n.pitchCount=r.length,n.chordSize=1,n.instrumentIndex=a,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1,this.computeTone(t,e,i,n,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(l,r);for(let n=0;n<r.length;n++){let s;null!=this.tempMatchedPitchTones[h]?(s=this.tempMatchedPitchTones[h],this.tempMatchedPitchTones[h]=null,1==s.pitchCount&&s.pitches[0]==r[n]||(this.releaseTone(o,s),s=this.newTone()),l.pushBack(s)):(s=this.newTone(),l.pushBack(s)),h++,s.pitches[0]=r[n],s.pitchCount=1,s.chordSize=r.length,s.instrumentIndex=a,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(t,e,i,s,!1,!1)}}}for(;l.count()>h;)this.releaseTone(o,l.popBack());this.clearTempMatchedPitchTones(h,o)}this.liveInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(t,e,i,n,s,r,a,o,l,h){if(t.patternInstruments&&-1==n.instruments.indexOf(s)){if(i.instruments.length>1||n.instruments.length>1)return null;const t=e.instruments[n.instruments[0]];if(h)return t.getChord();const s=t.getTransition();return r.includeAdjacentPatterns&&s.includeAdjacentPatterns&&s.slides==r.slides?t.getChord():null}return h||r.includeAdjacentPatterns?a:null}static adjacentNotesHaveMatchingPitches(t,e){if(t.pitches.length!=e.pitches.length)return!1;const i=t.pins[t.pins.length-1].interval;for(const n of t.pitches)if(-1==e.pitches.indexOf(n+i))return!1;return!0}moveTonesIntoOrderedTempMatchedList(t,e){for(let i=0;i<t.count();i++){const n=t.get(i),s=n.pitches[0]+n.lastInterval;for(let r=0;r<e.length;r++)if(e[r]==s){this.tempMatchedPitchTones[r]=n,t.remove(i),i--;break}}for(;t.count()>0;){const e=t.popFront();for(let t=0;t<this.tempMatchedPitchTones.length;t++)if(null==this.tempMatchedPitchTones[t]){this.tempMatchedPitchTones[t]=e;break}}}determineCurrentActiveTones(t,i,n,s){const r=t.channels[i],a=this.channels[i],o=t.getPattern(i,this.bar),l=this.getCurrentPart(),h=this.tick+e.ticksPerPart*l;if(s&&t.getChannelIsMod(i)){let n=[],s=[],c=[],u=e.modCount;for(;u--;)n.push(null),s.push(null),c.push(null);if(null!=o&&!r.muted)for(let t=0;t<o.notes.length;t++)o.notes[t].end<=l?(null==s[o.notes[t].pitches[0]]||o.notes[t].end>s[o.notes[t].pitches[0]].start)&&(s[o.notes[t].pitches[0]]=o.notes[t]):o.notes[t].start<=l&&o.notes[t].end>l?n[o.notes[t].pitches[0]]=o.notes[t]:o.notes[t].start>l&&(null==c[o.notes[t].pitches[0]]||o.notes[t].start<c[o.notes[t].pitches[0]].start)&&(c[o.notes[t].pitches[0]]=o.notes[t]);let f=0;const p=t.patternInstruments&&null!=o?o.instruments[0]:0,m=a.instruments[p],d=m.activeModTones;for(let t=0;t<e.modCount;t++){if(null!=n[t]&&(null!=s[t]&&s[t].end!=n[t].start&&(s[t]=null),null!=c[t]&&c[t].start!=n[t].end&&(c[t]=null)),null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=p&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],e=a.instruments[p];for(;t.activeModTones.count()>0;)e.activeModTones.pushFront(t.activeModTones.popBack())}if(a.singleSeamlessInstrument=p,null!=n[t]){let i=s[t],r=c[t],a=!1,o=!1;const l=e.ticksPerPart*n[t].start==h&&this.isAtStartOfTick;let u;if(d.count()<=f)u=this.newTone(),d.pushBack(u);else if(l&&null==i){const t=d.get(f);t.isOnLastTick?this.freeTone(t):this.releaseTone(m,t),u=this.newTone(),d.set(f,u)}else u=d.get(f);f++;for(let e=0;e<n[t].pitches.length;e++)u.pitches[e]=n[t].pitches[e];u.pitchCount=n[t].pitches.length,u.chordSize=1,u.instrumentIndex=p,u.note=n[t],u.noteStartPart=n[t].start,u.noteEndPart=n[t].end,u.prevNote=i,u.nextNote=r,u.prevNotePitchIndex=0,u.nextNotePitchIndex=0,u.atNoteStart=l,u.passedEndOfNote=!1,u.forceContinueAtStart=a,u.forceContinueAtEnd=o}}for(;d.count()>f;){const e=d.popBack(),n=t.channels[i];if(e.instrumentIndex<n.instruments.length&&!e.isOnLastTick){const t=this.channels[i].instruments[e.instrumentIndex];this.releaseTone(t,e)}else this.freeTone(e)}}else if(!t.getChannelIsMod(i)){let c=null,u=null,f=null;if(s&&null!=o&&!r.muted&&(!this.isRecording||this.liveInputChannel!=i)){for(let t=0;t<o.notes.length;t++)if(o.notes[t].end<=l)u=o.notes[t];else if(o.notes[t].start<=l&&o.notes[t].end>l)c=o.notes[t];else if(o.notes[t].start>l){f=o.notes[t];break}null!=c&&(null!=u&&u.end!=c.start&&(u=null),null!=f&&f.start!=c.end&&(f=null))}if(null!=o&&(!t.layeredInstruments||1==r.instruments.length||t.patternInstruments&&1==o.instruments.length)){const e=t.patternInstruments?o.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=e&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],i=a.instruments[e];for(;t.activeTones.count()>0;)i.activeTones.pushFront(t.activeTones.popBack())}a.singleSeamlessInstrument=e}else a.singleSeamlessInstrument=null;for(let s=0;s<r.instruments.length;s++){const p=a.instruments[s],m=p.activeTones;let d=0;if(null!=c&&(!t.patternInstruments||-1!=o.instruments.indexOf(s))){const a=r.instruments[s];let y=u,v=f;const g=e.partsPerBeat*t.beatsPerBar,b=a.getTransition(),M=a.getChord();let S=!1,w=!1,k=0,I=0;if(0==c.start){let e=null==this.prevBar?null:t.getPattern(i,this.prevBar);if(null!=e){const i=e.notes.length<=0?null:e.notes[e.notes.length-1];if(null!=i&&i.end==g){const n=c.continuesLastPattern&&nt.adjacentNotesHaveMatchingPitches(i,c),a=this.adjacentPatternHasCompatibleInstrumentTransition(t,r,o,e,s,b,M,c,i,n);null!=a&&(y=i,k=a.singleTone?1:y.pitches.length,S=n)}}}else null!=y&&(k=M.singleTone?1:y.pitches.length);if(c.end==g){let e=null==this.nextBar?null:t.getPattern(i,this.nextBar);if(null!=e){const i=e.notes.length<=0?null:e.notes[0];if(null!=i&&0==i.start){const n=i.continuesLastPattern&&nt.adjacentNotesHaveMatchingPitches(c,i),a=this.adjacentPatternHasCompatibleInstrumentTransition(t,r,o,e,s,b,M,c,i,n);null!=a&&(v=i,I=a.singleTone?1:v.pitches.length,w=n)}}}else null!=v&&(I=M.singleTone?1:v.pitches.length);if(M.singleTone){const r=e.ticksPerPart*c.start==h;let o;if(m.count()<=d)o=this.newTone(),m.pushBack(o);else if(!r||(b.isSeamless||a.clicklessTransition||S)&&null!=y)o=m.get(d);else{const t=m.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(p,t),o=this.newTone(),m.set(d,o)}d++;for(let t=0;t<c.pitches.length;t++)o.pitches[t]=c.pitches[t];o.pitchCount=c.pitches.length,o.chordSize=1,o.instrumentIndex=s,o.note=c,o.noteStartPart=c.start,o.noteEndPart=c.end,o.prevNote=y,o.nextNote=v,o.prevNotePitchIndex=0,o.nextNotePitchIndex=0,o.atNoteStart=r,o.passedEndOfNote=!1,o.forceContinueAtStart=S,o.forceContinueAtEnd=w,this.computeTone(t,i,n,o,!1,!1)}else{const r=a.getTransition();(r.isSeamless&&!r.slides&&0==M.strumParts||S)&&e.ticksPerPart*c.start==h&&null!=y&&this.moveTonesIntoOrderedTempMatchedList(m,c.pitches);let o=0;for(let a=0;a<c.pitches.length;a++){let u=k>a?y:null,f=c,g=I>a?v:null,b=f.start+o,F=!1;if(b>l){if(!(m.count()>a&&(r.isSeamless||S)&&null!=u))break;g=f,f=u,u=null,b=f.start+o,F=!0}let P=f.end;(r.isSeamless||S)&&null!=g&&(P=Math.min(e.partsPerBeat*this.song.beatsPerBar,P+o)),(r.continues||S)&&null!=u||(o+=M.strumParts);const T=e.ticksPerPart*b==h;let q;if(null!=this.tempMatchedPitchTones[d])q=this.tempMatchedPitchTones[d],this.tempMatchedPitchTones[d]=null,m.pushBack(q);else if(m.count()<=d)q=this.newTone(),m.pushBack(q);else if(!T||(r.isSeamless||S)&&null!=u)q=m.get(d);else{const t=m.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(p,t),q=this.newTone(),m.set(d,q)}d++,q.pitches[0]=f.pitches[a],q.pitchCount=1,q.chordSize=f.pitches.length,q.instrumentIndex=s,q.note=f,q.noteStartPart=b,q.noteEndPart=P,q.prevNote=u,q.nextNote=g,q.prevNotePitchIndex=a,q.nextNotePitchIndex=a,q.atNoteStart=T,q.passedEndOfNote=F,q.forceContinueAtStart=S&&null!=u,q.forceContinueAtEnd=w&&null!=g,this.computeTone(t,i,n,q,!1,!1)}}}for(;m.count()>d;){const e=m.popBack(),n=t.channels[i];if(e.instrumentIndex<n.instruments.length&&!e.isOnLastTick){const t=a.instruments[e.instrumentIndex];this.releaseTone(t,e)}else this.freeTone(e)}this.clearTempMatchedPitchTones(d,p)}}}clearTempMatchedPitchTones(t,e){for(let i=t;i<this.tempMatchedPitchTones.length;i++){const t=this.tempMatchedPitchTones[i];null!=t&&(t.isOnLastTick?this.freeTone(t):this.releaseTone(e,t),this.tempMatchedPitchTones[i]=null)}}playTone(t,e,i,n){const s=this.channels[t].instruments[n.instrumentIndex];null!=s.synthesizer&&s.synthesizer(this,e,i,n,s),n.envelopeComputer.clearEnvelopes()}playModTone(t,i,n,s,r,a,o,l){const h=t.channels[i].instruments[a.instrumentIndex];if(null!=a.note){const t=this.getTicksIntoBar(),i=t/e.ticksPerPart,o=(t+1)/e.ticksPerPart,l=this.tickSampleCountdown,c=i+(o-i)*(1-l/n),u=i+(o-i)*(1-(l-r)/n),f=e.ticksPerPart*c,p=e.ticksPerPart*u,m=a.note.getEndPinIndex(this.getCurrentPart()),d=a.note.pins[m-1],y=a.note.pins[m],v=(a.note.start+d.time)*e.ticksPerPart,g=(a.note.start+y.time)*e.ticksPerPart,b=(f-v)/(g-v),M=(p-v)/(g-v);a.expression=d.size+(y.size-d.size)*b,a.expressionDelta=d.size+(y.size-d.size)*M-a.expression,nt.modSynth(this,s,r,a,h)}}static computeChordExpression(t){return 1/(.25*(t-1)+1)}computeTone(t,i,n,s,r,a){const o=Math.ceil(n),l=t.channels[i],c=this.channels[i],u=l.instruments[s.instrumentIndex],f=c.instruments[s.instrumentIndex];f.awake=!0,f.tonesAddedInThisTick=!0,f.computed||f.compute(this,u,n,o,s,i,s.instrumentIndex);const v=u.getTransition(),g=u.getChord(),b=g.singleTone?1:nt.computeChordExpression(s.chordSize),M=t.getChannelIsNoise(i),S=M?e.noiseInterval:1,w=e.ticksPerPart*n/this.samplesPerSecond,k=1/this.samplesPerSecond,I=1/e.partsPerBeat,F=this.getTicksIntoBar(),P=F/e.ticksPerPart,T=(F+1)/e.ticksPerPart,q=this.getCurrentPart();let x=1;s.specialIntervalExpressionMult=1;let O=a,R=0,A=0,E=1,z=1,H=b,L=b,N=16,C=e.keys[t.key].basePitch,V=1,G=48;if(3==u.type)V=e.spectrumBaseExpression,M&&(C=e.spectrumBasePitch,V*=2),N=e.spectrumBasePitch,G=28;else if(4==u.type)C=e.spectrumBasePitch,V=e.drumsetBaseExpression,N=C;else if(2==u.type)C=e.chipNoises[u.chipNoise].basePitch,V=e.noiseBaseExpression,N=C,G=e.chipNoises[u.chipNoise].isSoft?24:60;else if(1==u.type)V=e.fmBaseExpression;else if(0==u.type||8==u.type)V=e.chipBaseExpression;else if(5==u.type)V=e.harmonicsBaseExpression;else if(6==u.type)V=e.pwmBaseExpression;else if(7==u.type)V=e.pickedStringBaseExpression;else{if(9!=u.type)throw new Error("Unknown instrument type in computeTone.");V=1,N=0,G=1,C=0}(s.atNoteStart&&!v.isSeamless&&!s.forceContinueAtStart||s.freshlyAllocated)&&s.reset(),s.freshlyAllocated=!1;for(let t=0;t<e.maxPitchOrOperatorCount;t++)s.phaseDeltas[t]=0,s.phaseDeltaScales[t]=0,s.operatorExpressions[t]=0,s.operatorExpressionDeltas[t]=0;s.expression=0,s.expressionDelta=0;for(let t=0;t<e.operatorCount;t++)s.operatorWaves[t]=nt.getOperatorWave(u.operators[t].waveform,u.operators[t].pulseWidth);if(r){const t=s.ticksSinceReleased,i=s.ticksSinceReleased+1;R=A=s.lastInterval;const n=Math.abs(u.getFadeOutTicks());E=nt.noteSizeToVolumeMult((1-t/n)*e.noteSizeMax),z=nt.noteSizeToVolumeMult((1-i/n)*e.noteSizeMax),a&&(z=0),s.ticksSinceReleased+1>=n&&(O=!0)}else if(null==s.note)E=z=1,s.lastInterval=0,s.ticksSinceReleased=0,s.liveInputSamplesHeld+=o;else{const t=s.note,i=s.nextNote,n=s.noteStartPart,r=s.noteEndPart,a=t.getEndPinIndex(q),o=t.pins[a-1],l=t.pins[a],h=n*e.ticksPerPart,c=r*e.ticksPerPart,f=(t.start+o.time)*e.ticksPerPart,p=(t.start+l.time)*e.ticksPerPart;s.ticksSinceReleased=0;const m=q*e.ticksPerPart+this.tick,d=m+1,y=m-h,g=d-h,b=Math.min(1,(m-f)/(p-f)),M=Math.min(1,(d-f)/(p-f));if(E=1,z=1,R=o.interval+(l.interval-o.interval)*b,A=o.interval+(l.interval-o.interval)*M,s.lastInterval=A,!v.isSeamless&&!s.forceContinueAtEnd||null==i){const t=-u.getFadeOutTicks();if(t>0){const e=c-h;E*=Math.min(1,(e-y)/t),z*=Math.min(1,(e-g)/t),d>=h+e&&(O=!0)}}}s.isOnLastTick=O;let B,$,W=u.noteFilter;if(u.noteFilterType){const t=u.noteFilter;null==u.noteSubFilters[1]&&(u.noteSubFilters[1]=new J);const n=u.noteSubFilters[1];let r=u.noteFilterSimpleCut,a=u.noteFilterSimplePeak,o=u.noteFilterSimpleCut,l=u.noteFilterSimplePeak,h=!1;this.isModActive(e.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex)&&(r=this.getModValue(e.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex,!1),o=this.getModValue(e.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex,!0),h=!0),this.isModActive(e.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex)&&(a=this.getModValue(e.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex,!1),l=this.getModValue(e.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex,!0),h=!0),t.convertLegacySettingsForSynth(r,a,!h),n.convertLegacySettingsForSynth(o,l,!h),B=t.controlPoints[0],$=n.controlPoints[0],u.noteFilter=t,u.tmpNoteFilterStart=t}const j=s.envelopeComputer;j.computeEnvelopes(u,q,e.ticksPerPart*P,n/this.samplesPerSecond,s);const K=s.envelopeComputer.envelopeStarts,_=s.envelopeComputer.envelopeEnds;if(u.noteFilter=W,null!=s.note&&v.slides){const t=s.prevNote,e=s.nextNote;if(null!=t){const e=t.pitches[s.prevNotePitchIndex]+t.pins[t.pins.length-1].interval-s.pitches[0];if(j.prevSlideStart&&(R+=e*j.prevSlideRatioStart),j.prevSlideEnd&&(A+=e*j.prevSlideRatioEnd),!g.singleTone){const e=t.pitches.length-s.chordSize;j.prevSlideStart&&(H=nt.computeChordExpression(s.chordSize+e*j.prevSlideRatioStart)),j.prevSlideEnd&&(L=nt.computeChordExpression(s.chordSize+e*j.prevSlideRatioEnd))}}if(null!=e){const t=e.pitches[s.nextNotePitchIndex]-(s.pitches[0]+s.note.pins[s.note.pins.length-1].interval);if(j.nextSlideStart&&(R+=t*j.nextSlideRatioStart),j.nextSlideEnd&&(A+=t*j.nextSlideRatioEnd),!g.singleTone){const t=e.pitches.length-s.chordSize;j.nextSlideStart&&(H=nt.computeChordExpression(s.chordSize+t*j.nextSlideRatioStart)),j.nextSlideEnd&&(L=nt.computeChordExpression(s.chordSize+t*j.nextSlideRatioEnd))}}}if(p(u.effects)){let t=e.justIntonationSemitones[u.pitchShift]/S,n=1,r=1;this.isModActive(e.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex)&&(t=e.justIntonationSemitones[e.justIntonationSemitones.length-1],n=this.getModValue(e.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex,!1)/e.pitchShiftCenter,r=this.getModValue(e.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex,!0)/e.pitchShiftCenter);R+=t*K[14]*n,A+=t*_[14]*r}if(m(u.effects)||this.isModActive(e.modulators.dictionary["song detune"].index,i,s.instrumentIndex)){const t=K[15],n=_[15];let r=u.detune,a=u.detune;this.isModActive(e.modulators.dictionary.detune.index,i,s.instrumentIndex)&&(r=this.getModValue(e.modulators.dictionary.detune.index,i,s.instrumentIndex,!1)+e.detuneCenter,a=this.getModValue(e.modulators.dictionary.detune.index,i,s.instrumentIndex,!0)+e.detuneCenter),this.isModActive(e.modulators.dictionary["song detune"].index,i,s.instrumentIndex)&&(r+=4*this.getModValue(e.modulators.dictionary["song detune"].index,i,s.instrumentIndex,!1),a+=4*this.getModValue(e.modulators.dictionary["song detune"].index,i,s.instrumentIndex,!0)),R+=nt.detuneToCents(r*t)*e.pitchesPerOctave/1200,A+=nt.detuneToCents(a*n)*e.pitchesPerOctave/1200}if(d(u.effects)){let t,n,r,a;if(u.vibrato==e.vibratos.length?(t=2*u.vibratoDelay,u.vibratoDelay==e.modulators.dictionary["vibrato delay"].maxRawVol&&(t=Number.POSITIVE_INFINITY),n=u.vibratoDepth,r=n):(t=e.vibratos[u.vibrato].delayTicks,n=e.vibratos[u.vibrato].amplitude,r=n),this.isModActive(e.modulators.dictionary["vibrato delay"].index,i,s.instrumentIndex)&&(t=2*this.getModValue(e.modulators.dictionary["vibrato delay"].index,i,s.instrumentIndex,!1),t==2*e.modulators.dictionary["vibrato delay"].maxRawVol&&(t=Number.POSITIVE_INFINITY)),this.isModActive(e.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex)&&(n=this.getModValue(e.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex,!1)/25,r=this.getModValue(e.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex,!0)/25),null!=s.prevVibrato)a=s.prevVibrato;else{if(a=n*nt.getLFOAmplitude(u,w*u.LFOtime)*K[16],t>0){const e=t-j.noteTicksStart;a*=Math.max(0,Math.min(1,1-e/2))}}let o=nt.getLFOAmplitude(u,w*u.nextLFOtime);const l=_[16];if(9!=u.type){let e=r*o*l;if(t>0){const i=t-j.noteTicksEnd;e*=Math.max(0,Math.min(1,1-i/2))}s.prevVibrato=e,R+=a,A+=e}}if(!v.isSeamless&&!s.forceContinueAtStart||null==s.prevNote){const t=u.getFadeInSeconds();t>0&&(E*=Math.min(1,j.noteSecondsStart/t),z*=Math.min(1,j.noteSecondsEnd/t))}4==u.type&&null==s.drumsetPitch&&(s.drumsetPitch=s.pitches[0],null!=s.note&&(s.drumsetPitch+=s.note.pickMainInterval()),s.drumsetPitch=Math.max(0,Math.min(e.drumCount-1,s.drumsetPitch)));let Y=j.lowpassCutoffDecayVolumeCompensation;if(y(u.effects)){const t=K[1],e=_[1];if(u.noteFilterType){const i=K[17],n=_[17],r=K[25],a=_[25];B.toCoefficients(nt.tempFilterStartCoefficients,this.samplesPerSecond,t*i,r),$.toCoefficients(nt.tempFilterEndCoefficients,this.samplesPerSecond,e*n,a),s.noteFilters.length<1&&(s.noteFilters[0]=new D),s.noteFilters[0].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterEndCoefficients,1/o,0==B.type),Y*=B.getVolumeCompensationMult(),s.noteFilterCount=1}else{const i=null!=u.tmpNoteFilterStart?u.tmpNoteFilterStart:u.noteFilter;for(let n=0;n<i.controlPointCount;n++){const r=K[17+n],a=_[17+n],l=K[25+n],h=_[25+n];let c=i.controlPoints[n];const f=null!=u.tmpNoteFilterEnd&&null!=u.tmpNoteFilterEnd.controlPoints[n]?u.tmpNoteFilterEnd.controlPoints[n]:i.controlPoints[n];c.type!=f.type&&(c=f),c.toCoefficients(nt.tempFilterStartCoefficients,this.samplesPerSecond,t*r,l),f.toCoefficients(nt.tempFilterEndCoefficients,this.samplesPerSecond,e*a,h),s.noteFilters.length<=n&&(s.noteFilters[n]=new D),s.noteFilters[n].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterEndCoefficients,1/o,0==c.type),Y*=c.getVolumeCompensationMult()}s.noteFilterCount=i.controlPointCount}}else s.noteFilterCount=0;if(4==u.type){const t=u.getDrumsetEnvelope(s.drumsetPitch);Y*=Z.getLowpassCutoffDecayVolumeCompensation(t);let e=Z.computeEnvelope(t,j.noteSecondsStart,I*P,j.noteSizeStart),i=Z.computeEnvelope(t,j.noteSecondsEnd,I*T,j.noteSizeEnd);if(j.prevSlideStart){e+=(Z.computeEnvelope(t,j.prevNoteSecondsStart,I*P,j.prevNoteSize)-e)*j.prevSlideRatioStart}if(j.prevSlideEnd){i+=(Z.computeEnvelope(t,j.prevNoteSecondsEnd,I*T,j.prevNoteSize)-i)*j.prevSlideRatioEnd}if(j.nextSlideStart){e+=(Z.computeEnvelope(t,0,I*P,j.nextNoteSize)-e)*j.nextSlideRatioStart}if(j.nextSlideEnd){i+=(Z.computeEnvelope(t,0,I*T,j.nextNoteSize)-i)*j.nextSlideRatioEnd}const n=this.tempDrumSetControlPoint;n.type=0,n.gain=U.getRoundedSettingValueFromLinearGain(.5),n.freq=U.getRoundedSettingValueFromHz(8e3),n.toCoefficients(nt.tempFilterStartCoefficients,this.samplesPerSecond,e*(1+e),1),n.toCoefficients(nt.tempFilterEndCoefficients,this.samplesPerSecond,i*(1+i),1),s.noteFilters.length==s.noteFilterCount&&(s.noteFilters[s.noteFilterCount]=new D),s.noteFilters[s.noteFilterCount].loadCoefficientsWithGradient(nt.tempFilterStartCoefficients,nt.tempFilterEndCoefficients,1/o,!0),s.noteFilterCount++}if(Y=Math.min(3,Y),1==u.type){let t=1,n=0,r=0;const a=g.arpeggiates;if(s.pitchCount>1&&a){const t=Math.floor(u.arpTime/e.ticksPerArpeggio);r=s.pitches[h(s.pitchCount,u.fastTwoNoteArp,t)]-s.pitches[0]}const l=e.algorithms[u.algorithm].carrierCount;for(let h=0;h<e.operatorCount;h++){const c=e.algorithms[u.algorithm].associatedCarrier[h]-1,f=s.pitches[a?0:h<s.pitchCount?h:c<s.pitchCount?c:0],p=e.operatorFrequencies[u.operators[h].frequency].mult,m=e.operatorCarrierInterval[c]+r,d=C+(f+R)*S+m,y=C+(f+A)*S+m,v=Q.frequencyFromPitch(d),g=Q.frequencyFromPitch(y),b=e.operatorFrequencies[u.operators[h].frequency].hzOffset,M=p*v+b,w=p*g+b,I=K[5+h],F=_[5+h];let P,T;1!=I||1!=F?(P=Math.pow(2,Math.log2(M/v)*I)*v,T=Math.pow(2,Math.log2(w/g)*F)*g):(P=M,T=w),s.phaseDeltas[h]=P*k,s.phaseDeltaScales[h]=Math.pow(T/P,1/o);let q=u.operators[h].amplitude,x=u.operators[h].amplitude;this.isModActive(e.modulators.dictionary["fm slider 1"].index+h,i,s.instrumentIndex)&&(q*=this.getModValue(e.modulators.dictionary["fm slider 1"].index+h,i,s.instrumentIndex,!1)/15,x*=this.getModValue(e.modulators.dictionary["fm slider 1"].index+h,i,s.instrumentIndex,!0)/15);const D=nt.operatorAmplitudeCurve(q),O=nt.operatorAmplitudeCurve(x);let E=D*e.operatorFrequencies[u.operators[h].frequency].amplitudeSign,z=O*e.operatorFrequencies[u.operators[h].frequency].amplitudeSign;if(h<l){let t;t=null!=s.prevPitchExpressions[h]?s.prevPitchExpressions[h]:Math.pow(2,-(d-N)/G);const e=Math.pow(2,-(y-N)/G);s.prevPitchExpressions[h]=e,E*=t,z*=e,n+=O}else E*=1.5*e.sineWaveLength,z*=1.5*e.sineWaveLength,t*=1-Math.min(1,u.operators[h].amplitude/15);if(E*=K[9+h],z*=_[9+h],this.isModActive(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex)){const t=this.getModValue(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!1),n=this.getModValue(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!0);E*=t<=0?(t+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(t),z*=n<=0?(n+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(n)}s.operatorExpressions[h]=E,s.operatorExpressionDeltas[h]=(z-E)/o}t*=(Math.pow(2,2-1.4*u.feedbackAmplitude/15)-1)/3,t*=1-Math.min(1,Math.max(0,n-1)/2),t=1+3*t;const c=V*t*Y*E*H*K[0],f=V*t*Y*z*L*_[0];s.expression=c,s.expressionDelta=(f-c)/o;let p=u.feedbackAmplitude,m=u.feedbackAmplitude;this.isModActive(e.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex)&&(p*=this.getModValue(e.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex,!1)/15,m*=this.getModValue(e.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex,!0)/15);let d=.3*e.sineWaveLength*p/15;const y=.3*e.sineWaveLength*m/15;let v=d*K[13],b=y*_[13];s.feedbackMult=v,s.feedbackDelta=(b-v)/o}else{const t=Math.pow(2,(A-R)*S/12/o);let n=s.pitches[0];if(s.pitchCount>1&&(g.arpeggiates||g.customInterval)){const t=Math.floor(u.arpTime/e.ticksPerArpeggio);if(g.customInterval){const e=s.pitches[1+h(s.pitchCount-1,u.fastTwoNoteArp,t)]-s.pitches[0];x=Math.pow(2,e/12),s.specialIntervalExpressionMult=Math.pow(2,-e/G)}else n=s.pitches[h(s.pitchCount,u.fastTwoNoteArp,t)]}const r=C+(n+R)*S,a=C+(n+A)*S;let l;l=null!=s.prevPitchExpressions[0]?s.prevPitchExpressions[0]:Math.pow(2,-(r-N)/G);const c=Math.pow(2,-(a-N)/G);s.prevPitchExpressions[0]=c;let p=V*Y;if(2==u.type&&(p*=e.chipNoises[u.chipNoise].expression),0==u.type&&(p*=e.chipWaves[u.chipWave].expression),6==u.type){const t=u.pulseWidth/(2*e.pulseWidthRange);let n=t,r=t;this.isModActive(e.modulators.dictionary["pulse width"].index,i,s.instrumentIndex)&&(n=this.getModValue(e.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!1)/(2*e.pulseWidthRange),r=this.getModValue(e.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!0)/(2*e.pulseWidthRange));const a=n*K[2],l=r*_[2];s.pulseWidth=a,s.pulseWidthDelta=(l-a)/o}if(7==u.type){let t=u.stringSustain,n=u.stringSustain;this.isModActive(e.modulators.dictionary.sustain.index,i,s.instrumentIndex)&&(t=this.getModValue(e.modulators.dictionary.sustain.index,i,s.instrumentIndex,!1),n=this.getModValue(e.modulators.dictionary.sustain.index,i,s.instrumentIndex,!0)),s.stringSustainStart=t,s.stringSustainEnd=n,p*=Math.pow(2,.7*(1-t/(e.stringSustainRange-1)))}const m=Q.frequencyFromPitch(r);if(0==u.type||8==u.type||5==u.type||7==u.type){const i=e.unisons[u.unison],n=7==u.type?1:i.voices/2;p*=i.expression*n;const r=K[4],a=_[4],l=Math.pow(2,(i.offset+i.spread)*r/12),h=Math.pow(2,(i.offset+i.spread)*a/12),c=Math.pow(2,(i.offset-i.spread)*r/12)*x,f=Math.pow(2,(i.offset-i.spread)*a/12)*x;s.phaseDeltas[0]=m*k*l,s.phaseDeltas[1]=m*k*c,s.phaseDeltaScales[0]=t*Math.pow(h/l,1/o),s.phaseDeltaScales[1]=t*Math.pow(f/c,1/o)}else s.phaseDeltas[0]=m*k,s.phaseDeltaScales[0]=t;let d=p*E*H*l*K[0],y=p*z*L*c*_[0];if(this.isModActive(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex)){const t=this.getModValue(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!1),n=this.getModValue(e.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!0);d*=t<=0?(t+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(t),y*=n<=0?(n+e.volumeRange/2)/(e.volumeRange/2):nt.instrumentVolumeToVolumeMult(n)}if(s.expression=d,s.expressionDelta=(y-d)/o,7==u.type){let t;if(null!=s.prevStringDecay)t=s.prevStringDecay;else{const i=s.envelopeComputer.envelopeStarts[3];t=1-Math.min(1,i*s.stringSustainStart/(e.stringSustainRange-1))}const i=s.envelopeComputer.envelopeEnds[3];let n=1-Math.min(1,i*s.stringSustainEnd/(e.stringSustainRange-1));s.prevStringDecay=n;const r=e.unisons[u.unison];for(let t=s.pickedStrings.length;t<r.voices;t++)s.pickedStrings[t]=new X;if(s.atNoteStart&&!v.continues&&!s.forceContinueAtStart)for(const t of s.pickedStrings)t.delayIndex=-1;for(let e=0;e<r.voices;e++)s.pickedStrings[e].update(this,f,s,e,o,t,n)}}}static getLFOAmplitude(t,i){let n=0;for(const s of e.vibratoTypes[t.vibratoType].periodsSeconds)n+=Math.sin(2*Math.PI*i/s);return n}static getInstrumentSynthFunction(t){if(1==t.type){const i=t.algorithm+"_"+t.feedbackType;if(null==nt.fmSynthFunctionCache[i]){const n=[];for(const i of nt.fmSourceTemplate)if(-1!=i.indexOf("// CARRIER OUTPUTS")){const s=[];for(let i=0;i<e.algorithms[t.algorithm].carrierCount;i++)s.push("operator"+i+"Scaled");n.push(i.replace("/*operator#Scaled*/",s.join(" + ")))}else if(-1!=i.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let i=e.operatorCount-1;i>=0;i--)for(const s of nt.operatorSourceTemplate)if(-1!=s.indexOf("/* + operator@Scaled*/")){let r="";for(const n of e.algorithms[t.algorithm].modulatedBy[i])r+=" + operator"+(n-1)+"Scaled";const a=e.feedbacks[t.feedbackType].indices[i];if(a.length>0){r+=" + feedbackMult * (";const t=[];for(const e of a)t.push("operator"+(e-1)+"Output");r+=t.join(" + ")+")"}n.push(s.replace(/\#/g,i+"").replace("/* + operator@Scaled*/",r))}else n.push(s.replace(/\#/g,i+""));else if(-1!=i.indexOf("#"))for(let t=0;t<e.operatorCount;t++)n.push(i.replace(/\#/g,t+""));else n.push(i);nt.fmSynthFunctionCache[i]=new Function("synth","bufferIndex","roundedSamplesPerTick","tone","instrumentState",n.join("\n"))}return nt.fmSynthFunctionCache[i]}if(0==t.type)return nt.chipSynth;if(8==t.type)return nt.chipSynth;if(5==t.type)return nt.harmonicsSynth;if(6==t.type)return nt.pulseWidthSynth;if(7==t.type)return nt.pickedStringSynth;if(2==t.type)return nt.noiseSynth;if(3==t.type)return nt.spectrumSynth;if(4==t.type)return nt.drumsetSynth;if(9==t.type)return nt.modSynth;throw new Error("Unrecognized instrument type: "+t.type)}static chipSynth(t,e,i,n,s){const r=v(s.effects)&&s.aliases,a=t.tempMonoInstrumentSampleBuffer,o=s.wave,l=s.volumeScale,h=r&&8==s.type?o.length:o.length-1,c=n.specialIntervalExpressionMult*s.unison.sign;1!=s.unison.voices||s.chord.customInterval||(n.phases[1]=n.phases[0]);let u=n.phaseDeltas[0]*h,f=n.phaseDeltas[1]*h;const p=+n.phaseDeltaScales[0],m=+n.phaseDeltaScales[1];let d=+n.expression;const y=+n.expressionDelta;let g=n.phases[0]%1*h,b=n.phases[1]%1*h;const M=n.noteFilters,S=0|n.noteFilterCount;let w=+n.initialNoteFilterInput1,k=+n.initialNoteFilterInput2;const I=nt.applyFilters;let F=0,P=0;if(!r){const t=0|g,e=0|b,i=t%h,n=e%h,s=g-t,r=b-e;F=+o[i],P=+o[n],F+=(o[i+1]-F)*s,P+=(o[n+1]-P)*r}const T=e+i;for(let t=e;t<T;t++){let e,i,n;if(g+=u,b+=f,r)e=o[(0|g)%h],i=o[(0|b)%h],n=e+i;else{const t=0|g,s=0|b,r=t%h,a=s%h;let l=o[r],p=o[a];const m=g-t,d=b-s;l+=(o[r+1]-l)*m,p+=(o[a+1]-p)*d,e=(l-F)/u,i=(p-P)/f,F=l,P=p,n=e+i*c}const s=I(n*l,w,k,S,M);k=w,w=n*l,u*=p,f*=m;const v=s*d;d+=y,a[t]+=v}n.phases[0]=g/h,n.phases[1]=b/h,n.phaseDeltas[0]=u/h,n.phaseDeltas[1]=f/h,n.expression=d,t.sanitizeFilters(M),n.initialNoteFilterInput1=w,n.initialNoteFilterInput2=k}static harmonicsSynth(t,e,i,n,s){const r=t.tempMonoInstrumentSampleBuffer,a=s.wave,o=a.length-1,l=n.specialIntervalExpressionMult*s.unison.sign;1!=s.unison.voices||s.chord.customInterval||(n.phases[1]=n.phases[0]);let h=n.phaseDeltas[0]*o,c=n.phaseDeltas[1]*o;const u=+n.phaseDeltaScales[0],f=+n.phaseDeltaScales[1];let p=+n.expression;const m=+n.expressionDelta;let d=n.phases[0]%1*o,y=n.phases[1]%1*o;const v=n.noteFilters,g=0|n.noteFilterCount;let b=+n.initialNoteFilterInput1,M=+n.initialNoteFilterInput2;const S=nt.applyFilters,w=0|d,k=0|y,I=w%o,F=k%o,P=d-w,T=y-k;let q=+a[I],x=+a[F];q+=(a[I+1]-q)*P,x+=(a[F+1]-x)*T;const D=e+i;for(let t=e;t<D;t++){d+=h,y+=c;const e=0|d,i=0|y,n=e%o,s=i%o;let w=a[n],k=a[s];const I=d-e,F=y-i;w+=(a[n+1]-w)*I,k+=(a[s+1]-k)*F;const P=(w-q)/h,T=(k-x)/c;q=w,x=k;const D=P+T*l,O=S(D,b,M,g,v);M=b,b=D,h*=u,c*=f;const R=O*p;p+=m,r[t]+=R}n.phases[0]=d/o,n.phases[1]=y/o,n.phaseDeltas[0]=h/o,n.phaseDeltas[1]=c/o,n.expression=p,t.sanitizeFilters(v),n.initialNoteFilterInput1=b,n.initialNoteFilterInput2=M}static pickedStringSynth(t,e,i,n,s){const r=s.unison.voices;let a=nt.pickedStringFunctionCache[r];if(null==a){let t="";t+="\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet shelfA1# = +pickedString#.shelfA1;\n\t\t\t\tlet shelfB0# = +pickedString#.shelfB0;\n\t\t\t\tlet shelfB1# = +pickedString#.shelfB1;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst shelfA1Delta# = +pickedString#.shelfA1Delta;\n\t\t\t\tconst shelfB0Delta# = +pickedString#.shelfB0Delta;\n\t\t\t\tconst shelfB1Delta# = +pickedString#.shelfB1Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const e=[];for(let t=0;t<r;t++)e.push("fractionalDelaySample"+t+(1==t?" * unisonSign":""));t+=e.join(" + "),t+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.shelfA1 = shelfA1#;\n\t\t\t\tpickedString#.shelfB0 = shelfB0#;\n\t\t\t\tpickedString#.shelfB1 = shelfB1#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;",t=t.replace(/^.*\#.*$/gm,(t=>{const e=[];for(let i=0;i<r;i++)e.push(t.replace(/\#/g,String(i)));return e.join("\n")})),a=new Function("synth","bufferIndex","runLength","tone","instrumentState",t),nt.pickedStringFunctionCache[r]=a}a(t,e,i,n,s)}static effectsSynth(t,e,i,n,s,r){const a=v(r.effects),o=g(r.effects),l=r.eqFilterCount>0,h=b(r.effects),c=M(r.effects),u=S(r.effects),f=w(r.effects);let p=0;a&&(p|=1),p<<=1,o&&(p|=1),p<<=1,l&&(p|=1),p<<=1,h&&(p|=1),p<<=1,c&&(p|=1),p<<=1,u&&(p|=1),p<<=1,f&&(p|=1);let m=nt.effectsFunctionCache[p];if(null==m){let t="";const e=c||f||u;t+="\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",e&&(t+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),a&&(t+="\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),o&&(t+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),l&&(t+="\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;"),t+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",h&&(t+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),c&&(t+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),t+="\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",a&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),o&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),t+="\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",t+=h?"\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",c&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),u&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    "),f&&(t+="\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),t+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",e&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),t+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",e&&(t+="\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;"),a&&(t+="\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),o&&(t+="\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),h&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;"),c&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),m=new Function("synth","outputDataL","outputDataR","bufferIndex","runLength","instrumentState",t),nt.effectsFunctionCache[p]=m}m(t,e,i,n,s,r)}static pulseWidthSynth(t,e,i,n,s){const r=t.tempMonoInstrumentSampleBuffer;let a=n.phaseDeltas[0];const o=+n.phaseDeltaScales[0];let l=+n.expression;const h=+n.expressionDelta;let c=n.phases[0]%1,u=n.pulseWidth;const f=n.pulseWidthDelta,p=n.noteFilters,m=0|n.noteFilterCount;let d=+n.initialNoteFilterInput1,y=+n.initialNoteFilterInput2;const v=nt.applyFilters,g=e+i;for(let t=e;t<g;t++){const e=c%1,i=(c+u)%1;let n=i-e;if(!s.aliases){if(e<a)n+=.5*((b=e/a)+b-b*b-1);else if(e>1-a){n+=.5*((b=(e-1)/a)+b+b*b+1)}if(i<a)n-=.5*((b=i/a)+b-b*b-1);else if(i>1-a){var b;n-=.5*((b=(i-1)/a)+b+b*b+1)}}const g=n,M=v(g,d,y,m,p);y=d,d=g,c+=a,a*=o,u+=f;const S=M*l;l+=h,r[t]+=S}n.phases[0]=c,n.phaseDeltas[0]=a,n.expression=l,n.pulseWidth=u,t.sanitizeFilters(p),n.initialNoteFilterInput1=d,n.initialNoteFilterInput2=y}static noiseSynth(t,i,n,s,r){const a=t.tempMonoInstrumentSampleBuffer,o=r.wave;let l=+s.phaseDeltas[0];const h=+s.phaseDeltaScales[0];let c=+s.expression;const u=+s.expressionDelta;let f=s.phases[0]%1*e.chipNoiseLength;0==s.phases[0]&&(f=Math.random()*e.chipNoiseLength);const p=e.chipNoiseLength-1;let m=+s.noiseSample;const d=s.noteFilters,y=0|s.noteFilterCount;let v=+s.initialNoteFilterInput1,g=+s.initialNoteFilterInput2;const b=nt.applyFilters,M=Math.min(1,l*r.noisePitchFilterMult),S=i+n;for(let t=i;t<S;t++){m+=(o[f&p]-m)*M;const e=m,i=b(e,v,g,y,d);g=v,v=e,f+=l,l*=h;const n=i*c;c+=u,a[t]+=n}s.phases[0]=f/e.chipNoiseLength,s.phaseDeltas[0]=l,s.expression=c,s.noiseSample=m,t.sanitizeFilters(d),s.initialNoteFilterInput1=v,s.initialNoteFilterInput2=g}static spectrumSynth(t,i,n,s,r){const a=t.tempMonoInstrumentSampleBuffer,o=r.wave;let l=128*s.phaseDeltas[0];const h=+s.phaseDeltaScales[0];let c=+s.expression;const u=+s.expressionDelta;let f=+s.noiseSample;const p=s.noteFilters,m=0|s.noteFilterCount;let d=+s.initialNoteFilterInput1,y=+s.initialNoteFilterInput2;const v=nt.applyFilters;let g=s.phases[0]%1*e.spectrumNoiseLength;0==s.phases[0]&&(g=nt.findRandomZeroCrossing(o,e.spectrumNoiseLength)+l);const b=e.spectrumNoiseLength-1,M=Math.min(1,l),S=i+n;for(let t=i;t<S;t++){const e=0|g,i=e&b;let n=o[i];const s=g-e;n+=(o[i+1]-n)*s,f+=(n-f)*M;const r=f,S=v(r,d,y,m,p);y=d,d=r,g+=l,l*=h;const w=S*c;c+=u,a[t]+=w}s.phases[0]=g/e.spectrumNoiseLength,s.phaseDeltas[0]=l/128,s.expression=c,s.noiseSample=f,t.sanitizeFilters(p),s.initialNoteFilterInput1=d,s.initialNoteFilterInput2=y}static drumsetSynth(t,i,n,s,r){const a=t.tempMonoInstrumentSampleBuffer;let o=r.getDrumsetWave(s.drumsetPitch);const l=et.drumsetIndexReferenceDelta(s.drumsetPitch);let h=s.phaseDeltas[0]/l;const c=+s.phaseDeltaScales[0];let u=+s.expression;const f=+s.expressionDelta,p=s.noteFilters,m=0|s.noteFilterCount;let d=+s.initialNoteFilterInput1,y=+s.initialNoteFilterInput2;const v=nt.applyFilters;let g=s.phases[0]%1*e.spectrumNoiseLength;0==s.phases[0]&&(g=nt.findRandomZeroCrossing(o,e.spectrumNoiseLength)+h);const b=e.spectrumNoiseLength-1,M=i+n;for(let t=i;t<M;t++){const e=0|g,i=e&b;let n=o[i];const s=g-e;n+=(o[i+1]-n)*s;const r=n,l=v(r,d,y,m,p);y=d,d=r,g+=h,h*=c;const M=l*u;u+=f,a[t]+=M}s.phases[0]=g/e.spectrumNoiseLength,s.phaseDeltas[0]=h*l,s.expression=u,t.sanitizeFilters(p),s.initialNoteFilterInput1=d,s.initialNoteFilterInput2=y}static modSynth(t,i,n,s,r){if(!t.song)return;let a=e.modCount-1-s.pitches[0];if(r.invalidModulators[a])return;let o=r.modulators[a],l=[];if(e.modulators[r.modulators[a]].forSong)l.push(0);else if(r.modInstruments[a]==t.song.channels[r.modChannels[a]].instruments.length)for(let e=0;e<t.song.channels[r.modChannels[a]].instruments.length;e++)l.push(e);else r.modInstruments[a]>t.song.channels[r.modChannels[a]].instruments.length?null!=t.song.getPattern(r.modChannels[a],t.bar)&&(l=t.song.getPattern(r.modChannels[a],t.bar).instruments):l.push(r.modInstruments[a]);for(let i=0;i<l.length;i++)if(t.setModValue(s.expression,s.expression+s.expressionDelta,a,r.modChannels[a],l[i],o),o==e.modulators.dictionary["reset arp"].index&&0==t.tick&&s.noteStartPart==t.beat*e.partsPerBeat+t.part)t.song.channels[r.modChannels[a]].instruments[l[i]].arpTime=0;else if(o==e.modulators.dictionary["next bar"].index)t.wantToSkip=!0;else if(o==e.modulators.dictionary["eq filter"].index){const o=t.song.channels[r.modChannels[a]].instruments[l[i]];if(!o.eqFilterType){let i=0|r.modFilterTypes[a];if(0==i){let i=0;const r=t.getTicksIntoBar()/e.ticksPerPart;for(;s.note.start+s.note.pins[i].time<=r;)i++;let a=(r-s.note.start+n/(t.getSamplesPerTick()*e.ticksPerPart)*e.ticksPerPart-s.note.pins[i-1].time)/(s.note.pins[i].time-s.note.pins[i-1].time);null!=o.eqSubFilters[s.note.pins[i-1].size]||null!=o.eqSubFilters[s.note.pins[i].size]?o.tmpEqFilterEnd=J.lerpFilters(o.eqSubFilters[s.note.pins[i-1].size],o.eqSubFilters[s.note.pins[i].size],a):o.tmpEqFilterEnd=o.eqFilter}else{for(let t=0;t<e.filterMorphCount;t++)o.tmpEqFilterEnd==o.eqSubFilters[t]&&null!=o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new J,o.tmpEqFilterEnd.fromJsonObject(o.eqSubFilters[t].toJsonObject()));null==o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new J,o.tmpEqFilterEnd.fromJsonObject(o.eqFilter.toJsonObject())),o.tmpEqFilterEnd.controlPointCount>Math.floor((i-1)/2)&&(i%2?o.tmpEqFilterEnd.controlPoints[Math.floor((i-1)/2)].freq=s.expression+s.expressionDelta:o.tmpEqFilterEnd.controlPoints[Math.floor((i-1)/2)].gain=s.expression+s.expressionDelta)}}}else if(o==e.modulators.dictionary["note filter"].index){const o=t.song.channels[r.modChannels[a]].instruments[l[i]];if(!o.noteFilterType){let i=0|r.modFilterTypes[a];if(0==i){let i=0;const r=t.getTicksIntoBar()/e.ticksPerPart;for(;s.note.start+s.note.pins[i].time<=r;)i++;let a=(r-s.note.start+n/(t.getSamplesPerTick()*e.ticksPerPart)*e.ticksPerPart-s.note.pins[i-1].time)/(s.note.pins[i].time-s.note.pins[i-1].time);null!=o.noteSubFilters[s.note.pins[i-1].size]||null!=o.noteSubFilters[s.note.pins[i].size]?o.tmpNoteFilterEnd=J.lerpFilters(o.noteSubFilters[s.note.pins[i-1].size],o.noteSubFilters[s.note.pins[i].size],a):o.tmpNoteFilterEnd=o.noteFilter}else{for(let t=0;t<e.filterMorphCount;t++)o.tmpNoteFilterEnd==o.noteSubFilters[t]&&null!=o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new J,o.tmpNoteFilterEnd.fromJsonObject(o.noteSubFilters[t].toJsonObject()));null==o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new J,o.tmpNoteFilterEnd.fromJsonObject(o.noteFilter.toJsonObject())),o.tmpNoteFilterEnd.controlPointCount>Math.floor((i-1)/2)&&(i%2?o.tmpNoteFilterEnd.controlPoints[Math.floor((i-1)/2)].freq=s.expression+s.expressionDelta:o.tmpNoteFilterEnd.controlPoints[Math.floor((i-1)/2)].gain=s.expression+s.expressionDelta)}}}}static findRandomZeroCrossing(t,e){let i=Math.random()*e;const n=e-1;let s=i&n,r=t[s];for(let a=128;a>0;a--){const a=s+16&n,o=t[a];if(r*o<=0){for(let a=0;a<16;a++){const a=s+1&n,o=t[a];if(r*o<=0){const t=o-r;i=s,Math.abs(t)>1e-8&&(i+=-r/t),i=Math.max(0,i)%e;break}s=a,r=o}break}s=a,r=o}return i}static instrumentVolumeToVolumeMult(t){return t==-e.volumeRange/2?0:Math.pow(2,e.volumeLogScale*t)}static volumeMultToInstrumentVolume(t){return t<=0?-e.volumeRange/2:Math.min(e.volumeRange,Math.log(t)/Math.LN2/e.volumeLogScale)}static noteSizeToVolumeMult(t){return Math.pow(Math.max(0,t)/e.noteSizeMax,1.5)}static volumeMultToNoteSize(t){return Math.pow(Math.max(0,t),1/1.5)*e.noteSizeMax}static fadeInSettingToSeconds(t){return.0125*(.95*t+.05*t*t)}static secondsToFadeInSetting(t){return R(0,e.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*t/.0125))/.1))}static fadeOutSettingToTicks(t){return e.fadeOutTicks[t]}static ticksToFadeOutSetting(t){let i=e.fadeOutTicks[0];if(t<=i)return 0;for(let n=1;n<e.fadeOutTicks.length;n++){let s=e.fadeOutTicks[n];if(t<=s)return t<(i+s)/2?n-1:n;i=s}return e.fadeOutTicks.length-1}static detuneToCents(t){return t-e.detuneCenter}static centsToDetune(t){return t+e.detuneCenter}static getOperatorWave(t,i){return 3!=t?e.operatorWaves[t]:e.pwmOperatorWaves[i]}getSamplesPerTick(){if(null==this.song)return 0;let t=this.song.getBeatsPerMinute();return this.isModActive(e.modulators.dictionary.tempo.index)&&(t=this.getModValue(e.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(t)}getSamplesPerTickSpecificBPM(t){const i=t/60,n=e.partsPerBeat*i,s=e.ticksPerPart*n;return this.samplesPerSecond/s}static fittingPowerOfTwo(t){return 1<<32-Math.clz32(Math.ceil(t)-1)}sanitizeFilters(t){let e=!1;for(const i of t){const t=Math.abs(i.output1),n=Math.abs(i.output2);if(!(t<100&&n<100)){e=!0;break}t<O&&(i.output1=0),n<O&&(i.output2=0)}if(e)for(const e of t)e.output1=0,e.output2=0}static sanitizeDelayLine(t,e,i){for(;;){const n=--e&i,s=Math.abs(t[n]);if(Number.isFinite(s)&&(0==s||s>=O))break;t[n]=0}}static applyFilters(t,e,i,n,s){for(let r=0;r<n;r++){const n=s[r],a=n.output1,o=n.output2,l=n.a1,h=n.a2,c=n.b0,u=n.b1,f=n.b2;t=c*t+u*e+f*i-l*a-h*o,n.a1=l+n.a1Delta,n.a2=h+n.a2Delta,n.useMultiplicativeInputCoefficients?(n.b0=c*n.b0Delta,n.b1=u*n.b1Delta,n.b2=f*n.b2Delta):(n.b0=c+n.b0Delta,n.b1=u+n.b1Delta,n.b2=f+n.b2Delta),n.output2=a,n.output1=t,i=o,e=a}return t}}return nt.tempFilterStartCoefficients=new q,nt.tempFilterEndCoefficients=new q,nt.fmSynthFunctionCache={},nt.effectsFunctionCache=Array(128).fill(void 0),nt.pickedStringFunctionCache=Array(3).fill(void 0),nt.fmSourceTemplate=("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * "+e.sineWaveLength+";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * "+e.sineWaveLength+";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / "+e.sineWaveLength+";\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / "+e.sineWaveLength+";\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t").split("\n"),nt.operatorSourceTemplate=("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+e.sineWaveMask+";\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),t.Channel=_,t.Config=e,t.EnvelopeSettings=K,t.FilterControlPoint=U,t.FilterSettings=J,t.HarmonicsWave=W,t.Instrument=Q,t.Note=C,t.Operator=G,t.Pattern=V,t.Song=Y,t.SpectrumWave=B,t.Synth=nt,t.clamp=R,t.makeNotePin=N,Object.defineProperty(t,"$",{value:!0}),t}({});
//# sourceMappingURL=beepbox_synth.min.js.map