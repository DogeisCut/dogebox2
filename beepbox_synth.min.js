var beepbox=function(e){"use strict";
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */class t{}function i(e){let t=0;for(let i=0;i<e.length;i++)t+=e[i];const i=t/e.length;for(let t=0;t<e.length;t++)e[t]-=i;return s(e),e.push(0),new Float32Array(e)}function n(e){let t=0;i(e);for(let i=0;i<e.length-1;i++)t+=Math.abs(e[i]);const n=t/(e.length-1);for(let t=0;t<e.length-1;t++)e[t]=e[t]/n;return new Float32Array(e)}function s(e){let t=0,i=new Float32Array(e.length);for(let n=0;n<e.length;n++)i[n]=t,t+=e[n];return i}function a(e){return e/(2*t.pulseWidthRange)}function r(e,i,n){let s=t.chipNoises[e].samples;if(null==s){if(s=new Float32Array(t.chipNoiseLength+1),t.chipNoises[e].samples=s,0==e){let e=1;for(let i=0;i<t.chipNoiseLength;i++){s[i]=2*(1&e)-1;let t=e>>1;1==(e+t&1)&&(t+=16384),e=t}}else if(1==e)for(let e=0;e<t.chipNoiseLength;e++)s[e]=2*Math.random()-1;else if(2==e){let e=1;for(let i=0;i<t.chipNoiseLength;i++){s[i]=2*(1&e)-1;let t=e>>1;1==(e+t&1)&&(t+=32768),e=t}}else if(3==e){let e=1;for(let i=0;i<t.chipNoiseLength;i++){s[i]=2*(1&e)-1;let t=e>>1;1==(e+t&1)&&(t+=40),e=t}}else if(4==e)o(s,t.chipNoiseLength,10,11,1,1,0),o(s,t.chipNoiseLength,11,14,.6578,.6578,0),i(s,t.chipNoiseLength),n(s,1/Math.sqrt(t.chipNoiseLength));else if(5==e)for(var a=1,r=0;r<t.chipNoiseLength;r++){s[r]=2*(1&a)-1,1==(a+(l=a>>1)&1)&&(l+=40),a=l}else if(6==e)o(s,t.chipNoiseLength,1,10,1,1,0),o(s,t.chipNoiseLength,20,14,-2,-2,0),i(s,t.chipNoiseLength),n(s,1/Math.sqrt(t.chipNoiseLength));else if(7==e)for(a=1,r=0;r<t.chipNoiseLength;r++){s[r]=4*(1&a)*(14*Math.random()+1)-8,1==(a+(l=a>>1)&1)&&(l+=60),a=l}else{if(8!=e)throw new Error("Unrecognized drum index: "+e);for(a=1,r=0;r<32768;r++){var l;s[r]=(1&a)/2-.5,1==(a+(l=a>>1)&1)&&(l-=40),a=l}}s[t.chipNoiseLength]=s[0]}return s}function o(e,t,i,n,s,a,o){const l=0|Math.pow(2,i),h=Math.min(t>>1,0|Math.pow(2,n)),u=r(0,null,null);let c=0;for(let r=l;r<h;r++){let l=s+(a-s)*(Math.log2(r)-i)/(n-i),h=Math.pow(2,7*(l-1)+1)*l;h*=Math.pow(r/2048,o),c+=h,h*=u[r];const f=.61803398875*r*r*Math.PI*2;e[r]=Math.cos(f)*h,e[t-r]=Math.sin(f)*h}return c}function l(e=0){const i=new Float32Array(t.sineWaveLength+1),n=t.sineWaveLength/4;for(let s=0;s<t.sineWaveLength+1;s++)i[s]=2*+(Math.abs(s-n)<e*t.sineWaveLength/2||Math.abs(s-t.sineWaveLength-n)<e*t.sineWaveLength/2)-1;return i}function h(e=!1){const i=new Float32Array(t.sineWaveLength+1);for(let n=0;n<t.sineWaveLength+1;n++)i[n]=2*(n+t.sineWaveLength/4)/t.sineWaveLength%2-1,i[n]=e?-i[n]:i[n];return i}function u(e,i,n){let s=t.arpeggioPatterns[e-1];return null!=s?(2==e&&0==i&&(s=[0,0,1,1]),s[n%s.length]):n%e}function c(e){const t={};for(let i=0;i<e.length;i++){const n=e[i];n.index=i,t[n.name]=n}const i=e;return i.dictionary=t,i}function f(e){return 0!=(1024&e)}function p(e){return 0!=(2048&e)}function m(e){return 0!=(128&e)}function d(e){return 0!=(256&e)}function y(e){return 0!=(512&e)}function v(e){return 0!=(32&e)}function g(e){return 0!=(8&e)}function b(e){return 0!=(16&e)}function M(e){return 0!=(4&e)}function w(e){return 0!=(2&e)}function S(e){return 0!=(64&e)}function F(e){return 0!=(1&e)}function k(e){return 0!=(4096&e)}function I(e){return 0!=(8192&e)}t.thresholdVal=-10,t.kneeVal=40,t.ratioVal=12,t.attackVal=0,t.releaseVal=.25,t.scales=c([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]}]),t.keys=c([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),t.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],t.tempoMin=30,t.tempoMax=320,t.echoDelayRange=24,t.echoDelayStepTicks=4,t.echoSustainRange=8,t.echoShelfHz=4e3,t.echoShelfGain=Math.pow(2,-.5),t.reverbShelfHz=8e3,t.reverbShelfGain=Math.pow(2,-1.5),t.reverbRange=32,t.reverbDelayBufferSize=16384,t.reverbDelayBufferMask=t.reverbDelayBufferSize-1,t.beatsPerBarMin=3,t.beatsPerBarMax=16,t.barCountMin=1,t.barCountMax=256,t.instrumentCountMin=1,t.layeredInstrumentCountMax=11,t.patternInstrumentCountMax=11,t.partsPerBeat=24,t.ticksPerPart=2,t.ticksPerArpeggio=3,t.arpeggioPatterns=[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]],t.rhythms=c([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}]),t.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","supersaw","custom chip","mod"],t.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1,!1],t.chipBaseExpression=.03375,t.fmBaseExpression=.03,t.noiseBaseExpression=.19,t.spectrumBaseExpression=.3,t.drumsetBaseExpression=.45,t.harmonicsBaseExpression=.025,t.pwmBaseExpression=.04725,t.supersawBaseExpression=.061425,t.pickedStringBaseExpression=.025,t.distortionBaseVolume=.011,t.bitcrusherBaseVolume=.01,t.rawChipWaves=c([{name:"rounded",expression:.94,samples:i([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:i([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:i([1,-1])},{name:"1/4 pulse",expression:.5,samples:i([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:i([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:i([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:i([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:i([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:i([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:n([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:n([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:n([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:n([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:n([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:n([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:n([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:n([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:n([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:n([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:n([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:i}]),t.chipWaves=function(e){const t=new Array(e.length),i={};for(let n=0;n<t.length;n++){t[n]=Object.assign([],e[n]);const s=t[n];s.index=n,i[s.name]=s}for(let e in i)i[e].samples=s(i[e].samples);const n=t;return n.dictionary=i,n}(t.rawChipWaves),t.chipNoises=c([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null}]),t.filterFreqStep=1/4,t.filterFreqRange=34,t.filterFreqReferenceSetting=28,t.filterFreqReferenceHz=8e3,t.filterFreqMaxHz=t.filterFreqReferenceHz*Math.pow(2,t.filterFreqStep*(t.filterFreqRange-1-t.filterFreqReferenceSetting)),t.filterFreqMinHz=8,t.filterGainRange=15,t.filterGainCenter=7,t.filterGainStep=.5,t.filterMaxPoints=12,t.filterTypeNames=["low-pass","high-pass","peak"],t.filterMorphCount=10,t.filterSimpleCutRange=11,t.filterSimplePeakRange=8,t.fadeInRange=10,t.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],t.fadeOutNeutral=4,t.drumsetFadeOutTicks=48,t.transitions=c([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),t.vibratos=c([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}]),t.vibratoTypes=c([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,.17798,.33],period:266.97}]),t.arpSpeedScale=[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8],t.unisons=c([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8}]),t.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type","note range","invert wave"],t.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0,12,13],t.noteSizeMax=6,t.volumeRange=50,t.volumeLogScale=.1428,t.panCenter=50,t.panMax=2*t.panCenter,t.panDelaySecondsMax=.001,t.chorusRange=8,t.chorusPeriodSeconds=2,t.chorusDelayRange=.0034,t.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],t.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],t.chorusMaxDelay=t.chorusDelayRange*(1+t.chorusDelayOffsets[0].concat(t.chorusDelayOffsets[1]).reduce(((e,t)=>Math.max(e,t)))),t.chords=c([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),t.maxChordSize=9,t.operatorCount=4,t.maxPitchOrOperatorCount=Math.max(t.maxChordSize,t.operatorCount),t.algorithms=c([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}]),t.operatorCarrierInterval=[0,.04,-.073,.091],t.operatorAmplitudeMax=15,t.operatorFrequencies=c([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1},{name:"-1×",mult:1,hzOffset:0,amplitudeSign:-1},{name:"-~1×",mult:1,hzOffset:1.5,amplitudeSign:1},{name:"-2×",mult:2,hzOffset:0,amplitudeSign:-1},{name:"-~2×",mult:2,hzOffset:-1.3,amplitudeSign:1},{name:"-3×",mult:3,hzOffset:0,amplitudeSign:-1},{name:"-4×",mult:4,hzOffset:0,amplitudeSign:-1},{name:"-5×",mult:5,hzOffset:0,amplitudeSign:-1},{name:"-6×",mult:6,hzOffset:0,amplitudeSign:-1},{name:"-7×",mult:7,hzOffset:0,amplitudeSign:-1},{name:"-8×",mult:8,hzOffset:0,amplitudeSign:-1},{name:"-9×",mult:9,hzOffset:0,amplitudeSign:-1},{name:"-11×",mult:11,hzOffset:0,amplitudeSign:-1},{name:"-13×",mult:13,hzOffset:0,amplitudeSign:-1},{name:"-16×",mult:16,hzOffset:0,amplitudeSign:-1},{name:"-20×",mult:20,hzOffset:0,amplitudeSign:-1}]),t.envelopes=c([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4},{name:"blip 1",type:9,speed:6},{name:"blip 2",type:9,speed:16},{name:"blip 3",type:9,speed:32},{name:"spike 1",type:10,speed:32},{name:"spike 2",type:10,speed:8},{name:"spike 3",type:10,speed:2},{name:"clap 1",type:11,speed:128},{name:"clap 2",type:11,speed:64},{name:"clap 3",type:11,speed:32},{name:"blippy 1",type:12,speed:32},{name:"blippy 2",type:12,speed:16},{name:"blippy 3",type:12,speed:8},{name:"blippy 4",type:12,speed:4},{name:"blippy 5",type:12,speed:2},{name:"blippy 6",type:12,speed:1}]),t.feedbacks=c([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}]),t.chipNoiseLength=32768,t.spectrumNoiseLength=32768,t.spectrumBasePitch=24,t.spectrumControlPoints=30,t.spectrumControlPointsPerOctave=7,t.spectrumControlPointBits=3,t.spectrumMax=(1<<t.spectrumControlPointBits)-1,t.harmonicsControlPoints=28,t.harmonicsRendered=64,t.harmonicsRenderedForPickedString=256,t.harmonicsControlPointBits=3,t.harmonicsMax=(1<<t.harmonicsControlPointBits)-1,t.harmonicsWavelength=2048,t.pulseWidthRange=50,t.pulseWidthStepPower=.5,t.supersawVoiceCount=7,t.supersawDynamismMax=6,t.supersawSpreadMax=12,t.supersawShapeMax=6,t.pitchChannelCountMin=1,t.pitchChannelCountMax=40,t.noiseChannelCountMin=0,t.noiseChannelCountMax=32,t.modChannelCountMin=0,t.modChannelCountMax=28,t.noiseInterval=6,t.pitchesPerOctave=12,t.drumCount=12,t.pitchOctaves=10,t.modCount=6,t.maxPitch=t.pitchOctaves*t.pitchesPerOctave,t.maximumTonesPerChannel=2*t.maxChordSize,t.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((e=>Math.log2(e)*t.pitchesPerOctave)),t.pitchShiftRange=t.justIntonationSemitones.length,t.pitchShiftCenter=t.pitchShiftRange>>1,t.detuneCenter=200,t.detuneMax=400,t.detuneMin=0,t.songDetuneMin=0,t.songDetuneMax=500,t.sineWaveLength=256,t.sineWaveMask=t.sineWaveLength-1,t.sineWave=function(){const e=new Float32Array(t.sineWaveLength+1);for(let i=0;i<t.sineWaveLength+1;i++)e[i]=Math.sin(i*Math.PI*2/t.sineWaveLength);return e}(),t.pickedStringDispersionCenterFreq=6e3,t.pickedStringDispersionFreqScale=.3,t.pickedStringDispersionFreqMult=4,t.pickedStringShelfHz=4e3,t.distortionRange=8,t.stringSustainRange=15,t.stringDecayRate=.12,t.enableAcousticSustain=!1,t.sustainTypeNames=["bright","acoustic"],t.bitcrusherFreqRange=14,t.bitcrusherOctaveStep=.5,t.bitcrusherQuantizationRange=8,t.maxEnvelopeCount=12,t.defaultAutomationRange=13,t.instrumentAutomationTargets=c([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:t.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:t.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:t.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"noteFilterGain",computeIndex:null,displayName:"n. filter # vol",interleave:!1,isFilter:!0,maxCount:t.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"supersawDynamism",computeIndex:33,displayName:"dynamism",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawSpread",computeIndex:34,displayName:"spread",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawShape",computeIndex:35,displayName:"saw↔pulse",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]}]),t.operatorWaves=c([{name:"sine",samples:t.sineWave},{name:"triangle",samples:function(){const e=new Float32Array(t.sineWaveLength+1);for(let i=0;i<t.sineWaveLength+1;i++)e[i]=Math.asin(Math.sin(i*Math.PI*2/t.sineWaveLength))/(Math.PI/2);return e}()},{name:"sawtooth",samples:h()},{name:"pulse width",samples:l()},{name:"ramp",samples:h(!0)},{name:"trapezoid",samples:function(e=2){const i=new Float32Array(t.sineWaveLength+1);for(let n=0;n<t.sineWaveLength+1;n++)i[n]=Math.max(-1,Math.min(1,Math.asin(Math.sin(n*Math.PI*2/t.sineWaveLength))*e));return i}(2)},{name:"white noise",samples:r(1,null,null)}]),t.pwmOperatorWaves=c([{name:"1%",samples:l(.01)},{name:"5%",samples:l(.05)},{name:"12.5%",samples:l(.125)},{name:"25%",samples:l(.25)},{name:"33%",samples:l(1/3)},{name:"50%",samples:l(.5)},{name:"66%",samples:l(2/3)},{name:"75%",samples:l(.75)},{name:"87.5%",samples:l(.875)},{name:"95%",samples:l(.95)},{name:"99%",samples:l(.99)}]),t.barEditorHeight=10,t.modulators=c([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:14,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:14,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:t.tempoMax-t.tempoMin,newNoteVol:Math.ceil((t.tempoMax-t.tempoMin)/2),forSong:!0,convertRealFactor:t.tempoMin,associatedEffect:14,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:2*t.reverbRange,newNoteVol:t.reverbRange,forSong:!0,convertRealFactor:-t.reverbRange,associatedEffect:14,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:14,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"note volume",pianoName:"Note Vol.",maxRawVol:t.volumeRange,newNoteVol:Math.ceil(t.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-t.volumeRange/2),associatedEffect:14,promptName:"Note Volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:t.panMax,newNoteVol:Math.ceil(t.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:t.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:t.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedback",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:t.pulseWidthRange,newNoteVol:t.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:t.detuneMax-t.detuneMin,newNoteVol:t.detuneCenter,forSong:!1,convertRealFactor:-t.detuneCenter,associatedEffect:8,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:t.songDetuneMax-t.songDetuneMin,newNoteVol:Math.ceil((t.songDetuneMax-t.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:14,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:t.bitcrusherQuantizationRange-1,newNoteVol:Math.round(t.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:t.bitcrusherFreqRange-1,newNoteVol:Math.round(t.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:t.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:t.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:t.chorusRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:t.filterSimpleCutRange-1,newNoteVol:t.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:t.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:t.filterSimpleCutRange-1,newNoteVol:t.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:t.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:t.pitchShiftRange-1,newNoteVol:t.pitchShiftCenter,forSong:!1,convertRealFactor:-t.pitchShiftCenter,associatedEffect:7,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:t.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"mix volume",pianoName:"Mix Vol.",maxRawVol:t.volumeRange,newNoteVol:Math.ceil(t.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-t.volumeRange/2),associatedEffect:14,promptName:"Mix Volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"envelope speed",pianoName:"EnvelopeSpd",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Envelope Speed",promptDesc:["This setting controls how fast all of the envelopes for the instrument play.","At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"dynamism",pianoName:"Dynamism",maxRawVol:t.supersawDynamismMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Supersaw Dynamism",promptDesc:["This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.","At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"spread",pianoName:"Spread",maxRawVol:t.supersawSpreadMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Supersaw Spread",promptDesc:["This setting controls the supersaw spread of your instrument, just like the spread slider.","At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"saw shape",pianoName:"Saw Shape",maxRawVol:t.supersawShapeMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"Supersaw Shape",promptDesc:["This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.","As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm frequency 1",pianoName:"FM Freq. 1",maxRawVol:499,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Frequency 1",promptDesc:["This setting affects the frequency of the first FM operator, just like the corresponding input box on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound very high pitched.","For the full range of control with this mod, set the frequency to 1 or 2.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm frequency 2",pianoName:"FM Freq. 2",maxRawVol:499,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Frequency 2",promptDesc:["This setting affects the frequency of the second FM operator, just like the corresponding input box on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound very high pitched.","For the full range of control with this mod, set the frequency to 1 or 2.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm frequency 3",pianoName:"FM Freq. 3",maxRawVol:499,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Frequency 3",promptDesc:["This setting affects the frequency of the third FM operator, just like the corresponding input box on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound very high pitched.","For the full range of control with this mod, set the frequency to 1 or 2.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm frequency 4",pianoName:"FM Freq. 4",maxRawVol:499,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Frequency 4",promptDesc:["This setting affects the frequency of the fourth FM operator, just like the corresponding input box on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound very high pitched.","For the full range of control with this mod, set the frequency to 1 or 2.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm hz offset 1",pianoName:"FM Hz. 1",maxRawVol:400,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Hz Offset 1",promptDesc:["This setting affects the hz offset of the first FM operator, just like the corresponding input box on your instrument.","It works in a overwriting way, so using this mod will be like directly setting the hz offset.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm hz offset 2",pianoName:"FM Hz. 2",maxRawVol:400,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Hz Offset 2",promptDesc:["This setting affects the hz offset of the second FM operator, just like the corresponding input box on your instrument.","It works in a overwriting way, so using this mod will be like directly setting the hz offset.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm hz offset 3",pianoName:"FM Hz. 3",maxRawVol:400,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Hz Offset 3",promptDesc:["This setting affects the hz offset of the third FM operator, just like the corresponding input box on your instrument.","It works in a overwriting way, so using this mod will be like directly setting the hz offset.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm hz offset 4",pianoName:"FM Hz. 4",maxRawVol:400,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Hz Offset 4",promptDesc:["This setting affects the hz offset of the fourth FM operator, just like the corresponding input box on your instrument.","It works in a overwriting way, so using this mod will be like directly setting the hz offset.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm invert 1",pianoName:"FM Inv. 1",maxRawVol:1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Invert 1",promptDesc:["This setting affects the inversion of the first FM operator, just like the corresponding check box on your instrument.","It works in a overwriting way, so using this mod will be like checking the box, 1 for true, 0 for false, this is rounded.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm invert 2",pianoName:"FM Inv. 2",maxRawVol:1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Invert 2",promptDesc:["This setting affects the inversion of the second FM operator, just like the corresponding check box on your instrument.","It works in a overwriting way, so using this mod will be like checking the box, 1 for true, 0 for false, this is rounded.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm invert 3",pianoName:"FM Inv. 3",maxRawVol:1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Invert 3",promptDesc:["This setting affects the inversion of the third FM operator, just like the corresponding check box on your instrument.","It works in a overwriting way, so using this mod will be like checking the box, 1 for true, 0 for false, this is rounded.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"fm invert 4",pianoName:"FM Inv. 4",maxRawVol:1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,promptName:"FM Invert 4",promptDesc:["This setting affects the inversion of the fourth FM operator, just like the corresponding check box on your instrument.","It works in a overwriting way, so using this mod will be like checking the box, 1 for true, 0 for false, this is rounded.","[OVERWRITING] [$LO - $HI] [%]"]}]);/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);class P{static valueToPreset(e){const t=e>>6,i=63&e;return P.presetCategories[t].presets[i]}static midiProgramToPresetValue(e){for(let t=0;t<P.presetCategories.length;t++){const i=P.presetCategories[t];for(let n=0;n<i.presets.length;n++){const s=i.presets[n];if(s.generalMidi&&s.midiProgram==e)return(t<<6)+n}}return null}static nameToPresetValue(e){for(let t=0;t<P.presetCategories.length;t++){const i=P.presetCategories[t];for(let n=0;n<i.presets.length;n++){if(i.presets[n].name==e)return(t<<6)+n}}return null}}function T(e,t){for(let i=0;i<e.length;i++)e[i]*=t}function q(e){if(!function(e){return!(!e||e&e-1)}(e))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(e)/Math.log(2))}function x(e,t){const i=q(t);if(t<4)throw new Error("FFT array length must be at least 4.");for(let n=i-1;n>=2;n--){const i=1<<n,s=i>>1,a=i<<1,r=2*Math.PI/a,o=Math.cos(r),l=Math.sin(r),h=2*o;for(let n=0;n<t;n+=a){const t=n,a=t+s,r=t+i,u=r+s,c=r+i,f=e[t],p=e[r];e[t]=f+p,e[a]*=2,e[r]=f-p,e[u]*=2;let m=o,d=-l,y=1,v=0;for(let i=1;i<s;i++){const n=t+i,s=r-i,a=r+i,o=c-i,l=e[n],u=e[s],f=e[a],p=e[o],g=l-u,b=f+p;e[n]=l+u,e[s]=p-f,e[a]=g*m-b*d,e[o]=b*m+g*d;const M=h*m-y,w=h*d-v;y=m,v=d,m=M,d=w}}}for(let i=0;i<t;i+=4){const t=i+1,n=i+2,s=i+3,a=e[i],r=2*e[t],o=e[n],l=2*e[s],h=a+o,u=a-o;e[i]=h+r,e[t]=h-r,e[n]=u+l,e[s]=u-l}!function(e,t){const i=q(t);if(i>16)throw new Error("FFT array length must not be greater than 2^16.");const n=16-i;for(let i=0;i<t;i++){let t;if(t=(43690&i)>>1|(21845&i)<<1,t=(52428&t)>>2|(13107&t)<<2,t=(61680&t)>>4|(3855&t)<<4,t=(t>>8|(255&t)<<8)>>n,t>i){let n=e[i];e[i]=e[t],e[t]=n}}}(e,t)}P.version="1.4.0",P.versionDisplayName="Dogebox2 "+P.version,P.releaseNotesURL="https://dogeiscut.github.io/dogebox2/patch_notes/"+P.version+".html",P.isOnMac=/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),P.ctrlSymbol=P.isOnMac?"⌘":"Ctrl+",P.ctrlName=P.isOnMac?"command":"control",P.presetCategories=c([{name:"Custom Instruments",presets:c([{name:"chip wave",customType:0},{name:"FM (expert)",customType:1},{name:"basic noise",customType:2},{name:"spectrum",customType:3},{name:"drumset",customType:4},{name:"harmonics",customType:5},{name:"pulse width",customType:6},{name:"picked string",customType:7},{name:"supersaw",customType:8},{name:"custom chip",customType:9}])},{name:"Retro Presets",presets:c([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}},{name:"supersaw lead",midiProgram:81,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:2}],effects:["reverb"],reverb:67,fadeInSeconds:0,fadeOutTicks:-6,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}},{name:"FM sine",midiProgram:32,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"none",envelope:"note size"}]}}])},{name:"Keyboard Presets",presets:c([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"grand piano 3",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:1681.79,linearGain:4},{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"peak",cutoffHz:3363.59,linearGain:4},{type:"peak",cutoffHz:2378.41,linearGain:.25}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:125,linearGain:.0884}],reverb:67,fadeInSeconds:0,fadeOutTicks:48,harmonics:[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:86,stringSustainType:"acoustic",envelopes:[{target:"noteFilterFreq",envelope:"note size",index:0},{target:"noteFilterFreq",envelope:"twang 1",index:1},{target:"noteFilterFreq",envelope:"twang 1",index:1}]}}])},{name:"Idiophone Presets",presets:c([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:7,envelope:"custom"},{frequency:"20×",amplitude:2,envelope:"twang 1"}]}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"13×",amplitude:6,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:11,envelope:"custom"},{frequency:"5×",amplitude:3,envelope:"twang 2"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,feedbackEnvelope:"decay 1",operators:[{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"5×",amplitude:6,envelope:"custom"},{frequency:"8×",amplitude:9,envelope:"custom"},{frequency:"13×",amplitude:11,envelope:"custom"}]}}])},{name:"Guitar Presets",presets:c([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:c([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:c([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:c([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:c([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",vibrato:"light",algorithm:"1 2 3 4",feedbackType:"1→3 2→4",feedbackAmplitude:7,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"3×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"}]}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:c([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"tremolo4",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"~2×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"},{frequency:"7×",amplitude:8,envelope:"custom"}]}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"decay 1",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:12,envelope:"custom"},{frequency:"4×",amplitude:14,envelope:"custom"}]}},{name:"supersaw string",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142},{type:"low-pass",cutoffHz:3363.59,linearGain:.1768}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:500,linearGain:.1768}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:6,pulseWidth:35.35534,dynamism:83,spread:8,shape:50,envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0}]}},{name:"supersaw string 2",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],effects:["note filter","chorus","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],chorus:57,reverb:42,fadeInSeconds:.0575,fadeOutTicks:-6,pulseWidth:50,dynamism:67,spread:58,shape:0,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"pulseWidth",envelope:"flare 2"}]}}])},{name:"Vocal Presets",presets:c([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"tremolo5",vibrato:"none",algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,feedbackEnvelope:"tremolo3",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"16×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:c([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:c([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:29,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"tremolo5",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"~2×",amplitude:2,envelope:"twang 3"},{frequency:"1×",amplitude:0,envelope:"steady"}]}}])},{name:"Flute Presets",presets:c([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,feedbackEnvelope:"decay 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:4,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"~1×",amplitude:1,envelope:"punch"}]}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:c([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"supersaw pad",midiProgram:93,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768}],effects:["reverb"],reverb:100,fadeInSeconds:.0263,fadeOutTicks:24,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}}])},{name:"Drum Presets",presets:c([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}},{name:"synth kick 2",midiProgram:47,isNoise:!0,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"},{target:"noteVolume",envelope:"punch"}]}}])},{name:"Novelty Presets",presets:c([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])},{name:"Dogebox2 Presets",presets:c([{name:"wibble bass",midiProgram:36,settings:{type:"chip",volume:1,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[],effects:["panning","chord type","vibrato","note filter","reverb"],chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,vibrato:"heavy",vibratoDepth:.45,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:7,noteSimplePeak:2,noteFilter:[],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,wave:"1/4 pulse",unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"square bell",midiProgram:36,settings:{type:"chip",volume:4,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[],effects:["panning","vibrato","note filter","reverb"],vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:4,noteSimplePeak:3,noteFilter:[{type:"low-pass",cutoffHz:1027.59,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:1027.59,linearGain:1}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,wave:"square",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"scratcher",midiProgram:36,settings:{type:"chip",volume:4,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[],effects:["panning","vibrato","note filter","reverb"],vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:7,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:3828.43,linearGain:.5}],noteSubFilters1:[{type:"low-pass",cutoffHz:3828.43,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,wave:"sawtooth",unison:"bowed",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"}]}},{name:"scratcher backer",midiProgram:36,settings:{type:"PWM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:353.55,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:353.55,linearGain:.5}],effects:["panning","note filter","bitcrusher","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],bitcrusherOctave:5,bitcrusherQuantization:57,pan:0,panDelay:10,reverb:29,fadeInSeconds:0,fadeOutTicks:-6,pulseWidth:45,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"}]}},{name:"scratcher reverberator",midiProgram:36,settings:{type:"PWM",volume:3,eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"peak",cutoffHz:1414.21,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"peak",cutoffHz:1414.21,linearGain:2}],effects:["panning","chorus","reverb"],pan:0,panDelay:10,chorus:57,reverb:55,fadeInSeconds:0,fadeOutTicks:12,pulseWidth:47,envelopes:[]}},{name:"superchared eletric guitar",midiProgram:29,settings:{type:"noise",volume:14,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[],effects:["panning","chord type","pitch shift","note filter","distortion","chorus","echo","reverb"],chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,pitchShiftSemitones:6,noteFilterType:!0,noteSimpleCut:5,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.1768}],noteSubFilters1:[{type:"low-pass",cutoffHz:9513.66,linearGain:.1768}],distortion:86,aliases:!1,pan:0,panDelay:10,chorus:100,echoSustain:29,echoDelayBeats:1,reverb:35,fadeInSeconds:0,fadeOutTicks:-1,wave:"buzz",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])}]);class O{constructor(){this.t=1,this.i=[void 0],this.o=0,this.l=0,this.h=0}pushFront(e){this.h>=this.t&&this.u(),this.l=this.l-1&this.o,this.i[this.l]=e,this.h++}pushBack(e){this.h>=this.t&&this.u(),this.i[this.l+this.h&this.o]=e,this.h++}popFront(){if(this.h<=0)throw new Error("No elements left to pop.");const e=this.i[this.l];return this.i[this.l]=void 0,this.l=this.l+1&this.o,this.h--,e}popBack(){if(this.h<=0)throw new Error("No elements left to pop.");this.h--;const e=this.l+this.h&this.o,t=this.i[e];return this.i[e]=void 0,t}peakFront(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l]}peakBack(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l+this.h-1&this.o]}count(){return this.h}set(e,t){if(e<0||e>=this.h)throw new Error("Invalid index");this.i[this.l+e&this.o]=t}get(e){if(e<0||e>=this.h)throw new Error("Invalid index");return this.i[this.l+e&this.o]}remove(e){if(e<0||e>=this.h)throw new Error("Invalid index");if(e<=this.h>>1){for(;e>0;)this.set(e,this.get(e-1)),e--;this.popFront()}else{for(e++;e<this.h;)this.set(e-1,this.get(e)),e++;this.popBack()}}u(){if(this.t>=1073741824)throw new Error("Capacity too big.");this.t=this.t<<1;const e=this.i,t=new Array(this.t),i=0|this.h,n=0|this.l;for(let s=0;s<i;s++)t[s]=e[n+s&this.o];for(let e=i;e<this.t;e++)t[e]=void 0;this.l=0,this.i=t,this.o=this.t-1}}class D{constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(e){this.b[0]=e,this.order=0}lowPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),i=1+t;this.a[1]=(1-t)/i,this.b[1]=this.b[0]=1/i,this.order=1}lowPass1stOrderSimplified(e){const t=2*Math.sin(.5*e);this.a[1]=t-1,this.b[0]=t,this.b[1]=0,this.order=1}highPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),i=1+t;this.a[1]=(1-t)/i,this.b[0]=t/i,this.b[1]=-t/i,this.order=1}highShelf1stOrder(e,t){const i=Math.tan(.5*e),n=Math.sqrt(t),s=(i*n-1)/(i*n+1);this.a[1]=s/1,this.b[0]=(1+s+t*(1-s))/2,this.b[1]=(1+s-t*(1-s))/2,this.order=1}allPass1stOrderInvertPhaseAbove(e){const t=(Math.sin(e)-1)/Math.cos(e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(e){const t=(1-e)/(1+e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(e,t){const i=Math.sin(e)/(2*t),n=Math.cos(e),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1-n)/(2*s),this.b[1]=(1-n)/s,this.order=2}lowPass2ndOrderSimplified(e,t){const i=2*Math.sin(e/2),n=1-1/(2*t),s=n+n/(1-i);this.a[1]=2*i+(i-1)*i*s-2,this.a[2]=(i-1)*(i-i*s-1),this.b[0]=i*i,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(e,t){const i=Math.sin(e)/(2*t),n=Math.cos(e),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1+n)/(2*s),this.b[1]=-(1+n)/s,this.order=2}highShelf2ndOrder(e,t,i){const n=Math.sqrt(t),s=Math.cos(e),a=n+1,r=n-1,o=.5*Math.sin(e)*Math.sqrt(a/n*(1/i-1)+2),l=2*Math.sqrt(n)*o,h=a-r*s+l;this.a[1]=2*(r-a*s)/h,this.a[2]=(a-r*s-l)/h,this.b[0]=n*(a+r*s+l)/h,this.b[1]=-2*n*(r+a*s)/h,this.b[2]=n*(a+r*s-l)/h,this.order=2}peak2ndOrder(e,t,i){const n=Math.sqrt(t),s=i*e/(n>=1?n:1/n),a=Math.tan(.5*s),r=1+a/n;this.b[0]=(1+a*n)/r,this.b[1]=this.a[1]=-2*Math.cos(e)/r,this.b[2]=(1-a*n)/r,this.a[2]=(1-a/n)/r,this.order=2}}class R{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(e,t){this.analyzeComplex(e,Math.cos(t),Math.sin(t))}analyzeComplex(e,t,i){const n=e.a,s=e.b,a=t,r=-i;let o=s[0]+s[1]*a,l=s[1]*r,h=1+n[1]*a,u=n[1]*r,c=a,f=r;for(let t=2;t<=e.order;t++){const e=c*r+f*a;c=c*a-f*r,f=e,o+=s[t]*c,l+=s[t]*f,h+=n[t]*c,u+=n[t]*f}this.denom=h*h+u*u,this.real=o*h+l*u,this.imag=l*h-o*u}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class z{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(e,t,i,n){if(2!=e.order||2!=t.order)throw new Error;this.a1=e.a[1],this.a2=e.a[2],this.b0=e.b[0],this.b1=e.b[1],this.b2=e.b[2],this.a1Delta=(t.a[1]-e.a[1])*i,this.a2Delta=(t.a[2]-e.a[2])*i,n?(this.b0Delta=Math.pow(t.b[0]/e.b[0],i),this.b1Delta=Math.pow(t.b[1]/e.b[1],i),this.b2Delta=Math.pow(t.b[2]/e.b[2],i)):(this.b0Delta=(t.b[0]-e.b[0])*i,this.b1Delta=(t.b[1]-e.b[1])*i,this.b2Delta=(t.b[2]-e.b[2])*i),this.useMultiplicativeInputCoefficients=n}}function E(e){return 2*Math.atan(.5*e)}const H=1e-24;function A(e,t,i){return i<=(t-=1)?i>=e?i:e:t}function N(e,t,i){if(e<=i&&i<=t)return i;throw new Error(`Value ${i} not in range [${e}, ${t}]`)}const L=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],C=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class V{constructor(e,t,i){this.p=[],this.m=0;for(let n=t;n<i;n++){const t=C[e.charCodeAt(n)];this.p.push(t>>5&1),this.p.push(t>>4&1),this.p.push(t>>3&1),this.p.push(t>>2&1),this.p.push(t>>1&1),this.p.push(1&t)}}read(e){let t=0;for(;e>0;)t<<=1,t+=this.p[this.m++],e--;return t}readLongTail(e,t){let i=e,n=t;for(;this.p[this.m++];)i+=1<<n,n++;for(;n>0;)n--,this.p[this.m++]&&(i+=1<<n);return i}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class G{constructor(){this.v=0,this.p=[]}clear(){this.v=0}write(e,t){for(e--;e>=0;)this.p[this.v++]=t>>>e&1,e--}writeLongTail(e,t,i){if(i<e)throw new Error("value out of bounds");i-=e;let n=t;for(;i>=1<<n;)this.p[this.v++]=1,i-=1<<n,n++;for(this.p[this.v++]=0;n>0;)n--,this.p[this.v++]=i>>>n&1}writePartDuration(e){this.writeLongTail(1,3,e)}writePinCount(e){this.writeLongTail(1,0,e)}writePitchInterval(e){e<0?(this.write(1,1),this.writeLongTail(1,3,-e)):(this.write(1,0),this.writeLongTail(1,3,e))}concat(e){for(let t=0;t<e.v;t++)this.p[this.v++]=e.p[t]}encodeBase64(e){for(let t=0;t<this.v;t+=6){const i=this.p[t]<<5|this.p[t+1]<<4|this.p[t+2]<<3|this.p[t+3]<<2|this.p[t+4]<<1|this.p[t+5];e.push(L[i])}return e}lengthBase64(){return Math.ceil(this.v/6)}}function $(e,t,i){return{interval:e,time:t,size:i}}class B{constructor(e,t,i,n,s=!1){this.pitches=[e],this.pins=[$(0,0,n),$(0,i-t,s?0:n)],this.start=t,this.end=i,this.continuesLastPattern=!1}pickMainInterval(){let e=0,t=0;for(let i=1;i<this.pins.length;i++){const n=this.pins[i-1],s=this.pins[i];if(n.interval==s.interval){const i=s.time-n.time;e<i&&(e=i,t=n.interval)}}if(0==e){let e=0;for(let i=0;i<this.pins.length;i++){const n=this.pins[i];e<n.size&&(e=n.size,t=n.interval)}}return t}clone(){const e=new B(-1,this.start,this.end,3);e.pitches=this.pitches.concat(),e.pins=[];for(const t of this.pins)e.pins.push($(t.interval,t.time,t.size));return e.continuesLastPattern=this.continuesLastPattern,e}getEndPinIndex(e){let t;for(t=1;t<this.pins.length-1&&!(this.pins[t].time+this.start>e);t++);return t}}class W{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const e=[];for(const t of this.notes)e.push(t.clone());return e}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(e,i,n){const s=[];for(const a of this.notes){let r=i.instruments[this.instruments[0]],o=Math.max(0,t.modCount-a.pitches[0]-1),l=e.getVolumeCapForSetting(n,r.modulators[o],r.modFilterTypes[o]);const h=[];for(const i of a.pins){let s=n?Math.round(i.size):Math.round(100*i.size/l);h.push({tick:(i.time+a.start)*t.rhythms[e.rhythm].stepsPerBeat/t.partsPerBeat,pitchBend:i.interval,volume:s,forMod:n})}const u={pitches:a.pitches,points:h};0==a.start&&(u.continuesLastPattern=a.continuesLastPattern),s.push(u)}const a={notes:s};return e.patternInstruments&&(a.instruments=this.instruments.map((e=>e+1))),a}fromJsonObject(e,i,n,s,a,r){if(i.patternInstruments)if(Array.isArray(e.instruments)){const s=e.instruments,a=A(t.instrumentCountMin,i.getMaxInstrumentsPerPatternForChannel(n)+1,s.length);for(let e=0;e<a;e++)this.instruments[e]=A(0,n.instruments.length,(0|s[e])-1);this.instruments.length=a}else this.instruments[0]=A(0,n.instruments.length,(0|e.instrument)-1),this.instruments.length=1;if(e.notes&&e.notes.length>0){const o=Math.min(i.beatsPerBar*t.partsPerBeat*(r?t.modCount:1),e.notes.length>>>0);for(let l=0;l<e.notes.length&&!(l>=o);l++){const o=e.notes[l];if(!(o&&o.pitches&&o.pitches.length>=1&&o.points&&o.points.length>=2))continue;const h=new B(0,0,0,0);h.pitches=[],h.pins=[];for(let e=0;e<o.pitches.length;e++){const i=0|o.pitches[e];if(-1==h.pitches.indexOf(i)&&(h.pitches.push(i),h.pitches.length>=t.maxChordSize))break}if(h.pitches.length<1)continue;let u=0;for(let e=0;e<o.points.length;e++){const a=o.points[e];if(null==a||null==a.tick)continue;const l=null==a.pitchBend?0:0|a.pitchBend,c=Math.round(+a.tick*t.partsPerBeat/s);let f,p=n.instruments[this.instruments[0]],m=Math.max(0,t.modCount-h.pitches[0]-1),d=i.getVolumeCapForSetting(r,p.modulators[m],p.modFilterTypes[m]);f=null==a.volume?d:null==a.forMod?Math.max(0,Math.min(d,Math.round((0|a.volume)*d/100))):(0|a.forMod)>0?Math.round(0|a.volume):Math.max(0,Math.min(d,Math.round((0|a.volume)*d/100))),c>i.beatsPerBar*t.partsPerBeat||(0==h.pins.length&&(h.start=c,u=l),h.pins.push($(l-u,c-h.start,f)))}if(h.pins.length<2)continue;h.end=h.pins[h.pins.length-1].time+h.start;const c=a?t.drumCount-1:t.maxPitch;let f=c,p=0;for(let e=0;e<h.pitches.length;e++)h.pitches[e]+=u,(h.pitches[e]<0||h.pitches[e]>c)&&(h.pitches.splice(e,1),e--),h.pitches[e]<f&&(f=h.pitches[e]),h.pitches[e]>p&&(p=h.pitches[e]);if(!(h.pitches.length<1)){for(let e=0;e<h.pins.length;e++){const t=h.pins[e];t.interval+f<0&&(t.interval=-f),t.interval+p>c&&(t.interval=c-p),e>=2&&t.interval==h.pins[e-1].interval&&t.interval==h.pins[e-2].interval&&t.size==h.pins[e-1].size&&t.size==h.pins[e-2].size&&(h.pins.splice(e-1,1),e--)}0==h.start?h.continuesLastPattern=!0===o.continuesLastPattern:h.continuesLastPattern=!1,this.notes.push(h)}}}}}class j{constructor(e){this.frequency=0,this.hzOffset=0,this.invert=!1,this.amplitude=0,this.waveform=0,this.pulseWidth=.5,this.reset(e)}reset(e){this.frequency=0,this.hzOffset=0,this.invert=!1,this.amplitude=e<=1?t.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(e){this.frequency=e.frequency,this.hzOffset=e.hzOffset,this.invert=e.invert,this.amplitude=e.amplitude,this.waveform=e.waveform,this.pulseWidth=e.pulseWidth}}class U{constructor(e){this.spectrum=[],this.hash=-1,this.reset(e)}reset(e){for(let i=0;i<t.spectrumControlPoints;i++)if(e)this.spectrum[i]=Math.round(t.spectrumMax*(1/Math.sqrt(1+i/3)));else{const e=0==i||7==i||11==i||14==i||16==i||18==i||21==i||23==i||i>=25;this.spectrum[i]=e?Math.max(0,Math.round(t.spectrumMax*(1-i/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const e=oe.fittingPowerOfTwo(t.spectrumMax+2)-1;let i=0;for(const t of this.spectrum)i=i*e+t>>>0;this.hash=i}}class K{constructor(){this.wave=null,this.g=-1}getCustomWave(e,i){if(this.g==e.hash)return this.wave;this.g=e.hash;const n=t.spectrumNoiseLength;null!=this.wave&&this.wave.length==n+1||(this.wave=new Float32Array(n+1));const s=this.wave;for(let e=0;e<n;e++)s[e]=0;const a=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function r(e){return i+Math.floor(e/t.spectrumControlPointsPerOctave)+a[(e+t.spectrumControlPointsPerOctave)%t.spectrumControlPointsPerOctave]}let l=1;for(let i=0;i<t.spectrumControlPoints+1;i++){const a=i<=0?0:e.spectrum[i-1],h=i>=t.spectrumControlPoints?e.spectrum[t.spectrumControlPoints-1]:e.spectrum[i],u=r(i-1);let c=r(i);i>=t.spectrumControlPoints&&(c=14+.25*(c-14)),0==a&&0==h||(l+=.02*o(s,n,u,c,a/t.spectrumMax,h/t.spectrumMax,-.5))}return e.spectrum[t.spectrumControlPoints-1]>0&&(l+=.02*o(s,n,14+.25*(r(t.spectrumControlPoints)-14),14,e.spectrum[t.spectrumControlPoints-1]/t.spectrumMax,0,-.5)),x(s,n),T(s,5/(Math.sqrt(n)*Math.pow(l,.75))),s[n]=s[0],s}}class J{constructor(){this.harmonics=[],this.hash=-1,this.reset()}reset(){for(let e=0;e<t.harmonicsControlPoints;e++)this.harmonics[e]=0;this.harmonics[0]=t.harmonicsMax,this.harmonics[3]=t.harmonicsMax,this.harmonics[6]=t.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const e=oe.fittingPowerOfTwo(t.harmonicsMax+2)-1;let i=0;for(const t of this.harmonics)i=i*e+t>>>0;this.hash=i}}class Q{constructor(){this.wave=null,this.g=-1}getCustomWave(e,i){if(this.g==e.hash&&this.M==i)return this.wave;this.g=e.hash,this.M=i;const n=7==i?t.harmonicsRenderedForPickedString:t.harmonicsRendered,s=t.harmonicsWavelength,a=r(0,null,null);null!=this.wave&&this.wave.length==s+1||(this.wave=new Float32Array(s+1));const o=this.wave;for(let e=0;e<s;e++)o[e]=0;let l=1;for(let i=0;i<n;i++){const r=i+1;let h=i<t.harmonicsControlPoints?e.harmonics[i]:e.harmonics[t.harmonicsControlPoints-1];i>=t.harmonicsControlPoints&&(h*=1-(i-t.harmonicsControlPoints)/(n-t.harmonicsControlPoints));const u=h/t.harmonicsMax;let c=Math.pow(2,h-t.harmonicsMax+1)*Math.sqrt(u);i<t.harmonicsControlPoints&&(l+=c),c*=Math.pow(r,-.25),c*=a[i+589],o[s-r]=c}x(o,s);const h=1/Math.pow(l,.7);for(let e=0;e<o.length;e++)o[e]*=h;return function(e){let t=0;for(let i=0;i<e.length;i++){const n=e[i];e[i]=t,t+=n}}(o),o[s]=o[0],o}}class _{constructor(){this.freq=0,this.gain=t.filterGainCenter,this.type=2}set(e,t){this.freq=e,this.gain=t}getHz(){return _.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(e){return t.filterFreqReferenceHz*Math.pow(2,(e-t.filterFreqReferenceSetting)*t.filterFreqStep)}static getSettingValueFromHz(e){return Math.log2(e/t.filterFreqReferenceHz)/t.filterFreqStep+t.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(e){return Math.max(0,Math.min(t.filterFreqRange-1,Math.round(_.getSettingValueFromHz(e))))}getLinearGain(e=1){const i=(this.gain-t.filterGainCenter)*t.filterGainStep,n=2==this.type?0:-.5,s=n+(i-n)*e;return Math.pow(2,s)}static getRoundedSettingValueFromLinearGain(e){return Math.max(0,Math.min(t.filterGainRange-1,Math.round(Math.log2(e)/t.filterGainStep+t.filterGainCenter)))}toCoefficients(e,i,n=1,s=1){const a=2*Math.PI*Math.max(t.filterFreqMinHz,Math.min(t.filterFreqMaxHz,n*this.getHz()))/i,r=this.getLinearGain(s);switch(this.type){case 0:e.lowPass2ndOrderButterworth(a,r);break;case 1:e.highPass2ndOrderButterworth(a,r);break;case 2:e.peak2ndOrder(a,r,1);break;default:throw new Error}}getVolumeCompensationMult(){const e=(this.freq-t.filterFreqReferenceSetting)*t.filterFreqStep,i=(this.gain-t.filterGainCenter)*t.filterGainStep;switch(this.type){case 0:const n=Math.pow(2,e)*t.filterFreqReferenceHz/8e3,s=(Math.sqrt(1+4*n)-1)/2,a=Math.log2(s);return Math.pow(.5,.2*Math.max(0,i+1)+Math.min(0,Math.max(-3,.595*a+.35*Math.min(0,i+1))));case 1:return Math.pow(.5,.125*Math.max(0,i+1)+Math.min(0,.3*(-e-Math.log2(t.filterFreqReferenceHz/125))+.2*Math.min(0,i+1)));case 2:const r=e+Math.log2(t.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(r/3,2)),2);return Math.pow(.5,.125*Math.max(0,i)+.1*o*Math.min(0,i));default:throw new Error}}}class Y{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(e,t,i){let n;this.controlPoints.length<=this.controlPointCount?(n=new _,this.controlPoints[this.controlPointCount]=n):n=this.controlPoints[this.controlPointCount],this.controlPointCount++,n.type=e,n.set(t,i)}toJsonObject(){const e=[];for(let i=0;i<this.controlPointCount;i++){const n=this.controlPoints[i];e.push({type:t.filterTypeNames[n.type],cutoffHz:Math.round(100*n.getHz())/100,linearGain:Math.round(1e4*n.getLinearGain())/1e4})}return e}fromJsonObject(e){if(this.controlPoints.length=0,e)for(const i of e){const e=new _;e.type=t.filterTypeNames.indexOf(i.type),-1==e.type&&(e.type=2),null!=i.cutoffHz?e.freq=_.getRoundedSettingValueFromHz(i.cutoffHz):e.freq=0,null!=i.linearGain?e.gain=_.getRoundedSettingValueFromLinearGain(i.linearGain):e.gain=t.filterGainCenter,this.controlPoints.push(e)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(e,t){if(e.controlPointCount!=t.controlPointCount)return!1;for(let i=0;i<e.controlPointCount;i++)if(e.controlPoints[i].type!=t.controlPoints[i].type)return!1;return!0}static lerpFilters(e,t,i){let n=new Y;if(null==e)return e;if(null==t)return t;if(i=Math.max(0,Math.min(1,i)),this.filtersCanMorph(e,t)){for(let s=0;s<e.controlPointCount;s++)n.controlPoints[s]=new _,n.controlPoints[s].type=e.controlPoints[s].type,n.controlPoints[s].freq=e.controlPoints[s].freq+(t.controlPoints[s].freq-e.controlPoints[s].freq)*i,n.controlPoints[s].gain=e.controlPoints[s].gain+(t.controlPoints[s].gain-e.controlPoints[s].gain)*i;return n.controlPointCount=e.controlPointCount,n}return i>=1?t:e}convertLegacySettings(e,t,i){this.reset();const n=2*Math.asin(.475),s=t>1,a=0==t,r=10==e,o=3==i.type||4==i.type||8==i.type||0==i.type,l=48e3,h=8e3*Math.pow(2,.5*(e-10)),u=Math.min(n,2*Math.PI*h/l);if(1==i.type&&!s&&r);else if(a){const e=3.5,t=u*Math.pow(2,e),i=l*(t/(1+t/Math.PI))/(2*Math.PI),n=_.getRoundedSettingValueFromHz(i),s=_.getHzFromSettingValue(n),a=2*Math.PI*s/l,r=new D;r.lowPass1stOrderSimplified(u);const h=new R;h.analyze(r,a);const c=h.magnitude();let f=Math.log2(c);f=.82*(f+e)-e,o&&(f=Math.min(f,-1));const p=Math.pow(2,f),m=_.getRoundedSettingValueFromLinearGain(p);this.addPoint(0,n,m)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),i=.5/e,n=u+(u*(u/(2*Math.PI*8e3/l)*Math.pow(i,.9)+1)-u)*i;let a;a=o?l*Math.min(n,u*Math.pow(2,.25))/(2*Math.PI):l*n/(2*Math.PI);const r=_.getRoundedSettingValueFromHz(a);let h;if(o)h=e;else{const t=new D;t.lowPass2ndOrderSimplified(u,e);const i=new R;i.analyze(t,n),h=i.magnitude()}s||(h=Math.min(h,Math.sqrt(.5)));const c=_.getRoundedSettingValueFromLinearGain(h);this.addPoint(0,r,c)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(e,t,i=!1){this.reset();const n=2*Math.asin(.475),s=0==t&&i,a=48e3,r=8e3*Math.pow(2,.5*(e-10)),o=Math.min(n,2*Math.PI*r/a);if(s){const e=3.5,t=o*Math.pow(2,e),i=a*(t/(1+t/Math.PI))/(2*Math.PI),n=_.getRoundedSettingValueFromHz(i),s=_.getHzFromSettingValue(n),r=2*Math.PI*s/a,l=new D;l.lowPass1stOrderSimplified(o);const h=new R;h.analyze(l,r);const u=h.magnitude();let c=Math.log2(u);c=.82*(c+e)-e;const f=Math.pow(2,c),p=_.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,n,p)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),i=.5/e,n=o+(o*(o/(2*Math.PI*8e3/a)*Math.pow(i,.9)+1)-o)*i;let s;s=a*n/(2*Math.PI);const r=_.getSettingValueFromHz(s);let l;const h=new D;h.lowPass2ndOrderSimplified(o,e);const u=new R;u.analyze(h,n),l=u.magnitude();const c=_.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,r,c)}}}class X{constructor(){this.target=0,this.index=0,this.envelope=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const e={target:t.instrumentAutomationTargets[this.target].name,envelope:t.envelopes[this.envelope].name};return t.instrumentAutomationTargets[this.target].maxCount>1&&(e.index=this.index),e}fromJsonObject(e){this.reset();let i=t.instrumentAutomationTargets.dictionary[e.target];null==i&&(i=t.instrumentAutomationTargets.dictionary.noteVolume),this.target=i.index;let n=t.envelopes.dictionary[e.envelope];null==n&&(n=t.envelopes.dictionary.none),this.envelope=n.index,null!=e.index?this.index=A(0,t.instrumentAutomationTargets[this.target].maxCount,0|e.index):this.index=0}}class Z{constructor(e,i){if(this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.eqFilter=new Y,this.eqFilterType=!1,this.eqFilterSimpleCut=t.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.noteFilter=new Y,this.noteFilterType=!1,this.noteFilterSimpleCut=t.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.eqSubFilters=[],this.noteSubFilters=[],this.envelopes=[],this.fadeIn=0,this.fadeOut=t.fadeOutNeutral,this.envelopeCount=0,this.transition=t.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.interval=0,this.vibratoDepth=0,this.vibratoSpeed=10,this.vibratoDelay=0,this.vibratoType=0,this.envelopeSpeed=12,this.discreteEnvelope=!1,this.unison=0,this.effects=0,this.chord=1,this.volume=0,this.pan=t.panCenter,this.panDelay=10,this.arpeggioSpeed=12,this.fastTwoNoteArp=!1,this.legacyTieOver=!1,this.clicklessTransition=!1,this.aliases=!1,this.pulseWidth=t.pulseWidthRange,this.supersawDynamism=t.supersawDynamismMax,this.supersawSpread=Math.ceil(t.supersawSpreadMax/2),this.supersawShape=0,this.stringSustain=10,this.stringSustainType=1,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.customChipWave=new Float32Array(64),this.customChipWaveIntegral=new Float32Array(65),this.operators=[],this.harmonicsWave=new J,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.modChannels=[],this.modInstruments=[],this.modulators=[],this.modFilterTypes=[],this.invalidModulators=[],this.invertWave=!1,this.upperNoteLimit=t.maxPitch,this.lowerNoteLimit=0,i)for(let e=0;e<t.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(t.modulators.dictionary.none.index);this.spectrumWave=new U(e);for(let e=0;e<t.operatorCount;e++)this.operators[e]=new j(e);for(let e=0;e<t.drumCount;e++)this.drumsetEnvelopes[e]=t.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[e]=new U(!0);for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let n=0;for(let e=0;e<this.customChipWave.length;e++)n+=this.customChipWave[e];const s=n/this.customChipWave.length;let a=0,r=0;for(let e=0;e<this.customChipWave.length;e++)a+=r,r=this.customChipWave[e]-s,this.customChipWaveIntegral[e]=a;this.customChipWaveIntegral[64]=0}setTypeAndReset(e,i,n){n&&(e=10),this.type=e,this.preset=e,this.volume=0,this.effects=4,this.chorus=t.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor(.5*(t.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(t.echoDelayRange-1)),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=t.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let e=0;e<t.filterMorphCount;e++)this.eqSubFilters[e]=null,this.noteSubFilters[e]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=t.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor(.75*(t.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(t.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(t.bitcrusherQuantizationRange-1)),this.pan=t.panCenter,this.panDelay=10,this.pitchShift=t.pitchShiftCenter,this.detune=t.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.stringSustainType=t.enableAcousticSustain?1:0,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.envelopeSpeed=12,this.discreteEnvelope=!1,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=t.fadeOutNeutral,this.transition=t.transitions.dictionary.normal.index,this.envelopeCount=0,this.upperNoteLimit=t.maxPitch,this.lowerNoteLimit=0,this.invertWave=!1,e){case 0:this.chipWave=2,this.chord=t.chords.dictionary.arpeggio.index;break;case 9:this.chipWave=2,this.chord=t.chords.dictionary.arpeggio.index;for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let n=0;for(let e=0;e<this.customChipWave.length;e++)n+=this.customChipWave[e];const s=n/this.customChipWave.length;let a=0,r=0;for(let e=0;e<this.customChipWave.length;e++)a+=r,r=this.customChipWave[e]-s,this.customChipWaveIntegral[e]=a;this.customChipWaveIntegral[64]=0;break;case 1:this.chord=t.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let e=0;e<this.operators.length;e++)this.operators[e].reset(e);break;case 2:this.chipNoise=1,this.chord=t.chords.dictionary.arpeggio.index;break;case 3:this.chord=t.chords.dictionary.simultaneous.index,this.spectrumWave.reset(i);break;case 4:this.chord=t.chords.dictionary.simultaneous.index;for(let e=0;e<t.drumCount;e++)this.drumsetEnvelopes[e]=t.envelopes.dictionary["twang 2"].index,null==this.drumsetSpectrumWaves[e]&&(this.drumsetSpectrumWaves[e]=new U(!0)),this.drumsetSpectrumWaves[e].reset(i);break;case 5:this.chord=t.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=t.chords.dictionary.arpeggio.index,this.pulseWidth=t.pulseWidthRange;break;case 7:this.chord=t.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 10:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let e=0;e<t.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(t.modulators.dictionary.none.index),this.invalidModulators[e]=!1,this.modFilterTypes[e]=0;break;case 8:this.chord=t.chords.dictionary.arpeggio.index,this.supersawDynamism=t.supersawDynamismMax,this.supersawSpread=Math.ceil(t.supersawSpreadMax/2),this.supersawShape=0,this.pulseWidth=t.pulseWidthRange-1;break;default:throw new Error("Unrecognized instrument type: "+e)}this.chord!=t.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(e,i){let n=e.filterCutoff,s=e.filterResonance,a=e.filterEnvelope,r=e.pulseEnvelope,o=e.operatorEnvelopes,l=e.feedbackEnvelope;null==n&&(n=0==this.type?6:10),null==s&&(s=0),null==a&&(a=t.envelopes.dictionary.none),null==r&&(r=t.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==o&&(o=[t.envelopes.dictionary[1==this.type?"note size":"none"],t.envelopes.dictionary.none,t.envelopes.dictionary.none,t.envelopes.dictionary.none]),null==l&&(l=t.envelopes.dictionary.none);10==n&&2==a.type&&(a=t.envelopes.dictionary.none);const h=t.algorithms[this.algorithm].carrierCount;let u=!0,c=!0,f=0==a.type||0==r.type;if(1==this.type){f=f||0==l.type;for(let e=0;e<o.length;e++)e<h?0!=o[e].type?c=!1:u=!1:f=f||0==o[e].type}this.envelopeCount=0,1==this.type&&(c&&f?this.addEnvelope(t.instrumentAutomationTargets.dictionary.noteVolume.index,0,t.envelopes.dictionary["note size"].index):u&&!f&&this.addEnvelope(t.instrumentAutomationTargets.dictionary.none.index,0,t.envelopes.dictionary["note size"].index)),1==a.type?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(n,s,a),this.effects&=-33,(i||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=n,this.eqFilterSimplePeak=s)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(n,s,a),this.effects|=32,this.addEnvelope(t.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,a.index),(i||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=n,this.noteFilterSimplePeak=s)),1!=r.type&&this.addEnvelope(t.instrumentAutomationTargets.dictionary.pulseWidth.index,0,r.index);for(let e=0;e<o.length;e++)e<h&&c||1!=o[e].type&&this.addEnvelope(t.instrumentAutomationTargets.dictionary.operatorAmplitude.index,e,o[e].index);1!=l.type&&this.addEnvelope(t.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,l.index)}toJsonObject(){const e={type:t.instrumentTypeNames[this.type],volume:this.volume,eqFilter:this.eqFilter.toJsonObject(),eqFilterType:this.eqFilterType,eqSimpleCut:this.eqFilterSimpleCut,eqSimplePeak:this.eqFilterSimplePeak,envelopeSpeed:this.envelopeSpeed,discreteEnvelope:this.discreteEnvelope};this.preset!=this.type&&(e.preset=this.preset);for(let i=0;i<t.filterMorphCount;i++)null!=this.eqSubFilters[i]&&(e["eqSubFilters"+i]=this.eqSubFilters[i].toJsonObject());const i=[];for(const e of t.effectOrder)this.effects&1<<e&&i.push(t.effectNames[e]);if(e.effects=i,f(this.effects)&&(e.transition=t.transitions[this.transition].name,e.clicklessTransition=this.clicklessTransition),p(this.effects)&&(e.chord=this.getChord().name,e.fastTwoNoteArp=this.fastTwoNoteArp,e.arpeggioSpeed=this.arpeggioSpeed),m(this.effects)&&(e.pitchShiftSemitones=this.pitchShift),d(this.effects)&&(e.detuneCents=oe.detuneToCents(this.detune)),y(this.effects)&&(-1==this.vibrato&&(this.vibrato=5),5!=this.vibrato?e.vibrato=t.vibratos[this.vibrato].name:e.vibrato="custom",e.vibratoDepth=this.vibratoDepth,e.vibratoDelay=this.vibratoDelay,e.vibratoSpeed=this.vibratoSpeed,e.vibratoType=this.vibratoType),v(this.effects)){e.noteFilterType=this.noteFilterType,e.noteSimpleCut=this.noteFilterSimpleCut,e.noteSimplePeak=this.noteFilterSimplePeak,e.noteFilter=this.noteFilter.toJsonObject();for(let i=0;i<t.filterMorphCount;i++)null!=this.noteSubFilters[i]&&(e["noteSubFilters"+i]=this.noteSubFilters[i].toJsonObject())}if(g(this.effects)&&(e.distortion=Math.round(100*this.distortion/(t.distortionRange-1)),e.aliases=this.aliases),b(this.effects)&&(e.bitcrusherOctave=(t.bitcrusherFreqRange-1-this.bitcrusherFreq)*t.bitcrusherOctaveStep,e.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(t.bitcrusherQuantizationRange-1))),M(this.effects)&&(e.pan=Math.round(100*(this.pan-t.panCenter)/t.panCenter),e.panDelay=this.panDelay),w(this.effects)&&(e.chorus=Math.round(100*this.chorus/(t.chorusRange-1))),S(this.effects)&&(e.echoSustain=Math.round(100*this.echoSustain/(t.echoSustainRange-1)),e.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*t.echoDelayStepTicks/(t.ticksPerPart*t.partsPerBeat))/1e3),F(this.effects)&&(e.reverb=Math.round(100*this.reverb/(t.reverbRange-1))),k(this.effects)&&(e.upperNoteLimit=this.upperNoteLimit,e.lowerNoteLimit=this.lowerNoteLimit),I(this.effects)&&(e.invertWave=this.invertWave),4!=this.type&&(e.fadeInSeconds=Math.round(1e4*oe.fadeInSettingToSeconds(this.fadeIn))/1e4,e.fadeOutTicks=oe.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){e.harmonics=[];for(let i=0;i<t.harmonicsControlPoints;i++)e.harmonics[i]=Math.round(100*this.harmonicsWave.harmonics[i]/t.harmonicsMax)}if(2==this.type)e.wave=t.chipNoises[this.chipNoise].name;else if(3==this.type){e.spectrum=[];for(let i=0;i<t.spectrumControlPoints;i++)e.spectrum[i]=Math.round(100*this.spectrumWave.spectrum[i]/t.spectrumMax)}else if(4==this.type){e.drums=[];for(let i=0;i<t.drumCount;i++){const n=[];for(let e=0;e<t.spectrumControlPoints;e++)n[e]=Math.round(100*this.drumsetSpectrumWaves[i].spectrum[e]/t.spectrumMax);e.drums[i]={filterEnvelope:this.getDrumsetEnvelope(i).name,spectrum:n}}}else if(0==this.type)e.wave=t.chipWaves[this.chipWave].name,e.unison=t.unisons[this.unison].name;else if(6==this.type)e.pulseWidth=this.pulseWidth;else if(8==this.type)e.pulseWidth=this.pulseWidth,e.dynamism=Math.round(100*this.supersawDynamism/t.supersawDynamismMax),e.spread=Math.round(100*this.supersawSpread/t.supersawSpreadMax),e.shape=Math.round(100*this.supersawShape/t.supersawShapeMax);else if(7==this.type)e.unison=t.unisons[this.unison].name,e.stringSustain=Math.round(100*this.stringSustain/(t.stringSustainRange-1)),t.enableAcousticSustain&&(e.stringSustainType=t.sustainTypeNames[this.stringSustainType]);else if(5==this.type)e.unison=t.unisons[this.unison].name;else if(1==this.type){const i=[];for(const e of this.operators)i.push({frequency:e.frequency,hzOffset:e.hzOffset,invert:e.invert,amplitude:e.amplitude,waveform:t.operatorWaves[e.waveform].name,pulseWidth:e.pulseWidth});e.algorithm=t.algorithms[this.algorithm].name,e.feedbackType=t.feedbacks[this.feedbackType].name,e.feedbackAmplitude=this.feedbackAmplitude,e.newOperators=i}else if(9==this.type){e.wave=t.chipWaves[this.chipWave].name,e.unison=t.unisons[this.unison].name,e.customChipWave=new Float64Array(64),e.customChipWaveIntegral=new Float64Array(65);for(let t=0;t<this.customChipWave.length;t++)e.customChipWave[t]=this.customChipWave[t]}else{if(10!=this.type)throw new Error("Unrecognized instrument type");e.modChannels=[],e.modInstruments=[],e.modSettings=[],e.modFilterTypes=[];for(let i=0;i<t.modCount;i++)e.modChannels[i]=this.modChannels[i],e.modInstruments[i]=this.modInstruments[i],e.modSettings[i]=this.modulators[i],e.modFilterTypes[i]=this.modFilterTypes[i]}const n=[];for(let e=0;e<this.envelopeCount;e++)n.push(this.envelopes[e].toJsonObject());return e.envelopes=n,e}fromJsonObject(e,i,n,s,a,r=0){null==e&&(e={});let o=t.instrumentTypeNames.indexOf(e.type);if(-1==o&&(o=n?10:i?2:0),this.setTypeAndReset(o,i,n),this.effects&=-5,null!=e.preset&&(this.preset=e.preset>>>0),null!=e.volume?this.volume=A(-t.volumeRange/2,t.volumeRange/2+1,0|e.volume):this.volume=0,null!=e.envelopeSpeed?this.envelopeSpeed=A(0,t.modulators.dictionary["envelope speed"].maxRawVol+1,0|e.envelopeSpeed):this.envelopeSpeed=12,null!=e.discreteEnvelope?this.discreteEnvelope=e.discreteEnvelope:this.discreteEnvelope=!1,Array.isArray(e.effects)){let i=0;for(let n=0;n<e.effects.length;n++)i|=1<<t.effectNames.indexOf(e.effects[n]);this.effects=16383&i}else{const t=["none","reverb","chorus","chorus & reverb"];this.effects=t.indexOf(e.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=t.transitions.dictionary.normal.index;const l=e.transition||e.envelope;if(null!=l){let i=t.transitions.dictionary[l];if(null==e.fadeInSeconds||null==e.fadeOutTicks){const e={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[l];null!=e&&(i=t.transitions.dictionary[e.transition],this.fadeIn=oe.secondsToFadeInSetting(e.fadeInSeconds),this.fadeOut=oe.ticksToFadeOutSetting(e.fadeOutTicks))}null!=i&&(this.transition=i.index),this.transition!=t.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=e.fadeInSeconds&&(this.fadeIn=oe.secondsToFadeInSetting(+e.fadeInSeconds)),null!=e.fadeOutTicks&&(this.fadeOut=oe.ticksToFadeOutSetting(+e.fadeOutTicks));{const i=e.chord,n={harmony:"simultaneous"},s=t.chords.dictionary[n[i]]||t.chords.dictionary[i];null!=s?this.chord=s.index:2==this.type?this.chord=t.chords.dictionary.arpeggio.index:7==this.type?this.chord=t.chords.dictionary.strum.index:0==this.type?this.chord=t.chords.dictionary.arpeggio.index:1==this.type?this.chord=t.chords.dictionary["custom interval"].index:this.chord=t.chords.dictionary.simultaneous.index}this.unison=t.unisons.dictionary.none.index;const h=e.unison||e.interval||e.chorus;if(null!=h){const e={union:"none",fifths:"fifth",octaves:"octave"},i=t.unisons.dictionary[e[h]]||t.unisons.dictionary[h];null!=i&&(this.unison=i.index)}"custom harmony"==e.chorus&&(this.unison=t.unisons.dictionary.hum.index,this.chord=t.chords.dictionary["custom interval"].index),this.chord==t.chords.dictionary.simultaneous.index||Array.isArray(e.effects)||(this.effects=2048|this.effects),null!=e.pitchShiftSemitones&&(this.pitchShift=A(0,t.pitchShiftRange,Math.round(+e.pitchShiftSemitones))),null!=e.detuneCents&&(this.detune=A(t.detuneMin,t.detuneMax+1,Math.round(oe.centsToDetune(+e.detuneCents)))),this.vibrato=t.vibratos.dictionary.none.index;const u=e.vibrato||e.effect;if(null!=u){const i={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},n=t.vibratos.dictionary[i[h]]||t.vibratos.dictionary[u];null!=n?this.vibrato=n.index:"custom"==u&&(this.vibrato=t.vibratos.length),this.vibrato==t.vibratos.length?(this.vibratoDepth=e.vibratoDepth,this.vibratoSpeed=e.vibratoSpeed,this.vibratoDelay=e.vibratoDelay,this.vibratoType=e.vibratoType):(this.vibratoDepth=t.vibratos[this.vibrato].amplitude,this.vibratoDelay=t.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=t.vibratos[this.vibrato].type),n!=t.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=e.pan?(this.pan=A(0,t.panMax+1,Math.round(t.panCenter+(0|e.pan)*t.panCenter/100)),this.pan!=t.panCenter&&(this.effects=4|this.effects)):this.pan=t.panCenter,null!=e.panDelay?this.panDelay=0|e.panDelay:this.panDelay=10,null!=e.detune?this.detune=A(t.detuneMin,t.detuneMax+1,0|e.detune):null==e.detuneCents&&(this.detune=t.detuneCenter),null!=e.distortion&&(this.distortion=A(0,t.distortionRange,Math.round((t.distortionRange-1)*(0|e.distortion)/100))),null!=e.bitcrusherOctave&&(this.bitcrusherFreq=t.bitcrusherFreqRange-1-+e.bitcrusherOctave/t.bitcrusherOctaveStep),null!=e.bitcrusherQuantization&&(this.bitcrusherQuantization=A(0,t.bitcrusherQuantizationRange,Math.round((t.bitcrusherQuantizationRange-1)*(0|e.bitcrusherQuantization)/100))),null!=e.echoSustain&&(this.echoSustain=A(0,t.echoSustainRange,Math.round((t.echoSustainRange-1)*(0|e.echoSustain)/100))),null!=e.echoDelayBeats&&(this.echoDelay=A(0,t.echoDelayRange,Math.round(+e.echoDelayBeats*(t.ticksPerPart*t.partsPerBeat)/t.echoDelayStepTicks-1))),isNaN(e.chorus)||(this.chorus=A(0,t.chorusRange,Math.round((t.chorusRange-1)*(0|e.chorus)/100))),null!=e.reverb?this.reverb=A(0,t.reverbRange,Math.round((t.reverbRange-1)*(0|e.reverb)/100)):this.reverb=r,null!=e.upperNoteLimit&&(this.upperNoteLimit=e.upperNoteLimit),null!=e.lowerNoteLimit&&(this.lowerNoteLimit=e.lowerNoteLimit),null!=e.invertWave?this.invertWave=e.invertWave:this.invertWave=!1,null!=e.pulseWidth?this.pulseWidth=A(1,t.pulseWidthRange+1,Math.round(e.pulseWidth)):this.pulseWidth=t.pulseWidthRange,null!=e.dynamism?this.supersawDynamism=A(0,t.supersawDynamismMax+1,Math.round(t.supersawDynamismMax*(0|e.dynamism)/100)):this.supersawDynamism=t.supersawDynamismMax,null!=e.spread?this.supersawSpread=A(0,t.supersawSpreadMax+1,Math.round(t.supersawSpreadMax*(0|e.spread)/100)):this.supersawSpread=Math.ceil(t.supersawSpreadMax/2),null!=e.shape?this.supersawShape=A(0,t.supersawShapeMax+1,Math.round(t.supersawShapeMax*(0|e.shape)/100)):this.supersawShape=0,null!=e.harmonics){for(let i=0;i<t.harmonicsControlPoints;i++)this.harmonicsWave.harmonics[i]=Math.max(0,Math.min(t.harmonicsMax,Math.round(t.harmonicsMax*+e.harmonics[i]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(null!=e.spectrum)for(let i=0;i<t.spectrumControlPoints;i++)this.spectrumWave.spectrum[i]=Math.max(0,Math.min(t.spectrumMax,Math.round(t.spectrumMax*+e.spectrum[i]/100)));else this.spectrumWave.reset(i);null!=e.stringSustain?this.stringSustain=A(0,t.stringSustainRange,Math.round((t.stringSustainRange-1)*(0|e.stringSustain)/100)):this.stringSustain=10,this.stringSustainType=t.enableAcousticSustain?t.sustainTypeNames.indexOf(e.stringSustainType):0,-1==this.stringSustainType&&(this.stringSustainType=0),2==this.type&&(this.chipNoise=t.chipNoises.findIndex((t=>t.name==e.wave)),-1==this.chipNoise&&(this.chipNoise=1));const c={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},f=e=>null!=c[e]?t.envelopes.dictionary[c[e]]:t.envelopes.dictionary[e];if(4==this.type&&null!=e.drums)for(let i=0;i<t.drumCount;i++){const n=e.drums[i];if(null!=n){if(this.drumsetEnvelopes[i]=t.envelopes.dictionary["twang 2"].index,null!=n.filterEnvelope){const e=f(n.filterEnvelope);null!=e&&(this.drumsetEnvelopes[i]=e.index)}if(null!=n.spectrum)for(let e=0;e<t.spectrumControlPoints;e++)this.drumsetSpectrumWaves[i].spectrum[e]=Math.max(0,Math.min(t.spectrumMax,Math.round(t.spectrumMax*+n.spectrum[e]/100)))}}if(0==this.type){const i={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=null!=i[e.wave]?i[e.wave]:t.chipWaves.findIndex((t=>t.name==e.wave)),-1==this.chipWave&&(this.chipWave=1)}if(1==this.type){this.algorithm=t.algorithms.findIndex((t=>t.name==e.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=t.feedbacks.findIndex((t=>t.name==e.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0),null!=e.feedbackAmplitude?this.feedbackAmplitude=A(0,t.operatorAmplitudeMax+1,0|e.feedbackAmplitude):this.feedbackAmplitude=0;for(let i=0;i<t.operatorCount;i++){const n=this.operators[i];let s;if(null!=e.operators){s=e.operators[i],null==s&&(s={});let a=t.operatorFrequencies.findIndex((e=>e.name==s.frequency));-1==a?(n.frequency=1,n.hzOffset=0,n.invert=!1):(n.frequency=t.operatorFrequencies[a].mult,n.hzOffset=t.operatorFrequencies[a].hzOffset,n.invert=1!=t.operatorFrequencies[a].amplitudeSign),null!=s.amplitude?n.amplitude=A(0,t.operatorAmplitudeMax+1,0|s.amplitude):n.amplitude=0,null!=s.waveform?(n.waveform=t.operatorWaves.findIndex((e=>e.name==s.waveform)),-1==n.waveform&&("square"==s.waveform?(n.waveform=t.operatorWaves.dictionary["pulse width"].index,n.pulseWidth=5):n.waveform=0)):n.waveform=0,null!=s.pulseWidth?n.pulseWidth=0|s.pulseWidth:n.pulseWidth=5}null!=e.newOperators&&(s=e.operators[i],null==s&&(s={}),null!=s.frequency?n.frequency=s.frequency:n.frequency=1,null!=s.hzOffset?n.hzOffset=s.hzOffset:n.hzOffset=0,null!=s.invert?n.invert=s.invert:n.invert=!1,null!=s.amplitude?n.amplitude=A(0,t.operatorAmplitudeMax+1,0|s.amplitude):n.amplitude=0,null!=s.waveform?(n.waveform=t.operatorWaves.findIndex((e=>e.name==s.waveform)),-1==n.waveform&&("square"==s.waveform?(n.waveform=t.operatorWaves.dictionary["pulse width"].index,n.pulseWidth=5):n.waveform=0)):n.waveform=0,n.hzOffset=t.operatorFrequencies[t.operatorFrequencies.findIndex((e=>e.name==s.frequency))].hzOffset,n.invert=1==t.operatorFrequencies[t.operatorFrequencies.findIndex((e=>e.name==s.frequency))].amplitudeSign,null!=s.pulseWidth?n.pulseWidth=0|s.pulseWidth:n.pulseWidth=5)}}else if(9==this.type){if(e.customChipWave){for(let t=0;t<64;t++)this.customChipWave[t]=e.customChipWave[t];let t=0;for(let e=0;e<this.customChipWave.length;e++)t+=this.customChipWave[e];const i=t/this.customChipWave.length;let n=0,s=0;for(let e=0;e<this.customChipWave.length;e++)n+=s,s=this.customChipWave[e]-i,this.customChipWaveIntegral[e]=n;this.customChipWaveIntegral[64]=0}}else if(10==this.type&&null!=e.modChannels)for(let i=0;i<t.modCount;i++)this.modChannels[i]=e.modChannels[i],this.modInstruments[i]=e.modInstruments[i],this.modulators[i]=e.modSettings[i],null!=e.modFilterTypes&&(this.modFilterTypes[i]=e.modFilterTypes[i]);if(10!=this.type){this.chord==t.chords.dictionary.arpeggio.index&&null!=e.arpeggioSpeed?this.arpeggioSpeed=e.arpeggioSpeed:this.arpeggioSpeed=s?9:12,null!=e.fastTwoNoteArp?this.fastTwoNoteArp=e.fastTwoNoteArp:this.fastTwoNoteArp=a,null!=e.clicklessTransition?this.clicklessTransition=e.clicklessTransition:this.clicklessTransition=!1,null!=e.aliases?this.aliases=e.aliases:this.aliases=!1,null!=e.noteFilterType&&(this.noteFilterType=e.noteFilterType),null!=e.noteSimpleCut&&(this.noteFilterSimpleCut=e.noteSimpleCut),null!=e.noteSimplePeak&&(this.noteFilterSimplePeak=e.noteSimplePeak),null!=e.noteFilter?this.noteFilter.fromJsonObject(e.noteFilter):this.noteFilter.reset();for(let i=0;i<t.filterMorphCount;i++)Array.isArray(e["noteSubFilters"+i])&&(this.noteSubFilters[i]=new Y,this.noteSubFilters[i].fromJsonObject(e["noteSubFilters"+i]));if(null!=e.eqFilterType&&(this.eqFilterType=e.eqFilterType),null!=e.eqSimpleCut&&(this.eqFilterSimpleCut=e.eqSimpleCut),null!=e.eqSimplePeak&&(this.eqFilterSimplePeak=e.eqSimplePeak),Array.isArray(e.eqFilter))this.eqFilter.fromJsonObject(e.eqFilter);else{this.eqFilter.reset();const i={},n=8e3,s=11,a=8;if(null!=e.filterCutoffHz?i.filterCutoff=A(0,s,Math.round(s-1+2*Math.log((0|e.filterCutoffHz)/n)/Math.LN2)):i.filterCutoff=0==this.type?6:10,null!=e.filterResonance?i.filterResonance=A(0,a,Math.round((a-1)*(0|e.filterResonance)/100)):i.filterResonance=0,i.filterEnvelope=f(e.filterEnvelope),i.pulseEnvelope=f(e.pulseEnvelope),i.feedbackEnvelope=f(e.feedbackEnvelope),Array.isArray(e.operators)){i.operatorEnvelopes=[];for(let n=0;n<t.operatorCount;n++){let s;null!=e.operators[n]&&(s=f(e.operators[n].envelope)),i.operatorEnvelopes[n]=null!=s?s:t.envelopes.dictionary.none}}if(null!=e.filter){const t=[10,6,3,0,8,5,2],n=["none","none","none","none","decay 1","decay 2","decay 3"],s=["none","bright","medium","soft","decay bright","decay medium","decay soft"],a={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let r=null!=a[e.filter]?a[e.filter]:s.indexOf(e.filter);-1==r&&(r=0),i.filterCutoff=t[r],i.filterEnvelope=f(n[r]),i.filterResonance=0}this.convertLegacySettings(i,!0)}for(let i=0;i<t.filterMorphCount;i++)Array.isArray(e["eqSubFilters"+i])&&(this.eqSubFilters[i]=new Y,this.eqSubFilters[i].fromJsonObject(e["eqSubFilters"+i]));if(Array.isArray(e.envelopes)){const i=e.envelopes;for(let e=0;e<i.length&&!(this.envelopeCount>=t.maxEnvelopeCount);e++){const t=new X;t.fromJsonObject(i[e]),this.addEnvelope(t.target,t.index,t.envelope)}}}}getLargestControlPointCount(e){let i;if(e){i=this.noteFilter.controlPointCount;for(let e=0;e<t.filterMorphCount;e++)null!=this.noteSubFilters[e]&&this.noteSubFilters[e].controlPointCount>i&&(i=this.noteSubFilters[e].controlPointCount)}else{i=this.eqFilter.controlPointCount;for(let e=0;e<t.filterMorphCount;e++)null!=this.eqSubFilters[e]&&this.eqSubFilters[e].controlPointCount>i&&(i=this.eqSubFilters[e].controlPointCount)}return i}static frequencyFromPitch(e){return 440*Math.pow(2,(e-69)/12)}addEnvelope(e,i,n){let s=!1;if(this.supportsEnvelopeTarget(e,i)||(s=!0),this.envelopeCount>=t.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new X;const a=this.envelopes[this.envelopeCount];a.target=s?t.instrumentAutomationTargets.dictionary.none.index:e,a.index=s?0:i,a.envelope=n,this.envelopeCount++}supportsEnvelopeTarget(e,i){const n=t.instrumentAutomationTargets[e];if(null==n.computeIndex&&"none"!=n.name)return!1;if(i>=n.maxCount)return!1;if(null!=n.compatibleInstruments&&-1==n.compatibleInstruments.indexOf(this.type))return!1;if(null!=n.effect&&0==(this.effects&1<<n.effect))return!1;if(n.isFilter){let e=this.noteFilter.controlPointCount;if(this.noteFilterType&&(e=1),i>=e)return!1}return!0}clearInvalidEnvelopeTargets(){for(let e=0;e<this.envelopeCount;e++){const i=this.envelopes[e].target,n=this.envelopes[e].index;this.supportsEnvelopeTarget(i,n)||(this.envelopes[e].target=t.instrumentAutomationTargets.dictionary.none.index,this.envelopes[e].index=0)}}getTransition(){return f(this.effects)?t.transitions[this.transition]:10==this.type?t.transitions.dictionary.interrupt:t.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:oe.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?t.drumsetFadeOutTicks:oe.fadeOutSettingToTicks(this.fadeOut)}getChord(){return p(this.effects)?t.chords[this.chord]:t.chords.dictionary.simultaneous}getDrumsetEnvelope(e){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return t.envelopes[this.drumsetEnvelopes[e]]}}class ee{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1,this.name=""}}class te{constructor(e){this.channels=[],this.limitDecay=4,this.limitRise=4e3,this.compressionThreshold=1,this.limitThreshold=1,this.compressionRatio=1,this.limitRatio=1,this.masterGain=1,this.inVolumeCap=0,this.outVolumeCap=0,this.getNewNoteVolume=(e,i,n,s)=>{if(e&&null!=i&&null!=n&&null!=s){s=t.modCount-s-1;let e=t.modulators[this.channels[i].instruments[n].modulators[s]].newNoteVol,a=t.modulators.dictionary.tempo.index;return this.channels[i].instruments[n].modulators[s]==a&&(e=this.tempo-t.modulators[a].convertRealFactor),null!=e?e:6}return 6},this.getVolumeCap=(e,i,n,s)=>{if(e&&null!=i&&null!=n&&null!=s){s=t.modCount-s-1;let e=this.channels[i].instruments[n],a=t.modulators[e.modulators[s]],r=a.maxRawVol;return null!=r?("eq filter"!=a.name&&"note filter"!=a.name||(r=t.filterMorphCount-1,e.modFilterTypes[s]>0&&e.modFilterTypes[s]%2?r=t.filterFreqRange:e.modFilterTypes[s]>0&&(r=t.filterGainRange)),r):6}return 6},this.getVolumeCapForSetting=(e,i,n)=>{if(e){let e=t.modulators[i].maxRawVol;return null!=e?(null==n||"eq filter"!=t.modulators[i].name&&"note filter"!=t.modulators[i].name||(e=t.filterMorphCount-1,n>0&&n%2?e=t.filterFreqRange:n>0&&(e=t.filterGainRange)),e):t.noteSizeMax}return t.noteSizeMax},null!=e?this.fromBase64String(e):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?t.layeredInstrumentCountMax:t.instrumentCountMin,this.patternInstruments?t.patternInstrumentCountMax:t.instrumentCountMin)}getMaxInstrumentsPerPattern(e){return this.getMaxInstrumentsPerPatternForChannel(this.channels[e])}getMaxInstrumentsPerPatternForChannel(e){return this.layeredInstruments?Math.min(t.layeredInstrumentCountMax,e.instruments.length):1}getChannelIsNoise(e){return e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(e){return e>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(e=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.title="Unnamed",document.title=P.versionDisplayName,e){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=0;for(let e=0;e<this.getChannelCount();e++){const i=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,n=e>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=e&&(this.channels[e]=new ee);const s=this.channels[e];s.octave=Math.max(3-e,0);for(let e=0;e<this.patternsPerChannel;e++)s.patterns.length<=e?s.patterns[e]=new W:s.patterns[e].reset();s.patterns.length=this.patternsPerChannel;for(let e=0;e<t.instrumentCountMin;e++)s.instruments.length<=e&&(s.instruments[e]=new Z(i,n)),s.instruments[e].setTypeAndReset(n?10:i?2:0,i,n);s.instruments.length=t.instrumentCountMin;for(let e=0;e<this.barCount;e++)s.bars[e]=e<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let e,i=[];i.push(te.S),i.push(L[te.k]),i.push(78);var n=encodeURIComponent(this.title);i.push(L[n.length>>6],L[63&n.length]);for(let e=0;e<n.length;e++)i.push(n.charCodeAt(e));i.push(110,L[this.pitchChannelCount],L[this.noiseChannelCount],L[this.modChannelCount]),i.push(115,L[this.scale]),i.push(107,L[this.key]),i.push(108,L[this.loopStart>>6],L[63&this.loopStart]),i.push(101,L[this.loopLength-1>>6],L[this.loopLength-1&63]),i.push(116,L[this.tempo>>6],L[63&this.tempo]),i.push(97,L[this.beatsPerBar-1]),i.push(103,L[this.barCount-1>>6],L[this.barCount-1&63]),i.push(106,L[this.patternsPerChannel-1>>6],L[this.patternsPerChannel-1&63]),i.push(114,L[this.rhythm]),i.push(79),1!=this.compressionRatio||1!=this.limitRatio||4e3!=this.limitRise||4!=this.limitDecay||1!=this.limitThreshold||1!=this.compressionThreshold||1!=this.masterGain?(i.push(L[Math.round(this.compressionRatio<1?10*this.compressionRatio:10+60*(this.compressionRatio-1))]),i.push(L[Math.round(this.limitRatio<1?10*this.limitRatio:9+this.limitRatio)]),i.push(L[this.limitDecay]),i.push(L[Math.round((this.limitRise-2e3)/250)]),i.push(L[Math.round(20*this.compressionThreshold)]),i.push(L[Math.round(20*this.limitThreshold)]),i.push(L[Math.round(50*this.masterGain)>>6],L[63&Math.round(50*this.masterGain)])):i.push(L[63]),i.push(85);for(let e=0;e<this.getChannelCount();e++){var s=encodeURIComponent(this.channels[e].name);i.push(L[s.length>>6],L[63&s.length]);for(let e=0;e<s.length;e++)i.push(s.charCodeAt(e))}if(i.push(105,L[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let e=0;e<this.getChannelCount();e++)i.push(L[this.channels[e].instruments.length-t.instrumentCountMin]);i.push(111);for(let e=0;e<this.pitchChannelCount;e++)i.push(L[this.channels[e].octave]);for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.channels[e].instruments.length;n++){const s=this.channels[e].instruments[n];if(i.push(84,L[s.type]),i.push(118,L[s.volume+t.volumeRange/2>>6],L[s.volume+t.volumeRange/2&63]),i.push(117,L[s.preset>>6],L[63&s.preset]),i.push(102),i.push(L[+s.eqFilterType]),s.eqFilterType)i.push(L[s.eqFilterSimpleCut]),i.push(L[s.eqFilterSimplePeak]);else{if(null==s.eqFilter)i.push(L[0]),console.log("Null EQ filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+n);else{i.push(L[s.eqFilter.controlPointCount]);for(let e=0;e<s.eqFilter.controlPointCount;e++){const t=s.eqFilter.controlPoints[e];i.push(L[t.type],L[Math.round(t.freq)],L[Math.round(t.gain)])}}let a=0;for(let e=0;e<t.filterMorphCount-1;e++)a|=+(null!=s.eqSubFilters[e+1])<<e;i.push(L[a>>6],L[63&a]);for(let e=0;e<t.filterMorphCount-1;e++)if(a&1<<e){i.push(L[s.eqSubFilters[e+1].controlPointCount]);for(let t=0;t<s.eqSubFilters[e+1].controlPointCount;t++){const n=s.eqSubFilters[e+1].controlPoints[t];i.push(L[n.type],L[Math.round(n.freq)],L[Math.round(n.gain)])}}}if(i.push(113,L[s.effects>>>30&63],L[s.effects>>>24&63],L[s.effects>>>18&63],L[s.effects>>>12&63],L[s.effects>>>6&63],L[s.effects>>>0&63]),v(s.effects))if(i.push(L[+s.noteFilterType]),s.noteFilterType)i.push(L[s.noteFilterSimpleCut]),i.push(L[s.noteFilterSimplePeak]);else{if(null==s.noteFilter)i.push(L[0]),console.log("Null note filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+n);else{i.push(L[s.noteFilter.controlPointCount]);for(let e=0;e<s.noteFilter.controlPointCount;e++){const t=s.noteFilter.controlPoints[e];i.push(L[t.type],L[Math.round(t.freq)],L[Math.round(t.gain)])}}let a=0;for(let e=0;e<t.filterMorphCount-1;e++)a|=+(null!=s.noteSubFilters[e+1])<<e;i.push(L[a>>6],L[63&a]);for(let e=0;e<t.filterMorphCount-1;e++)if(a&1<<e){i.push(L[s.noteSubFilters[e+1].controlPointCount]);for(let t=0;t<s.noteSubFilters[e+1].controlPointCount;t++){const n=s.noteSubFilters[e+1].controlPoints[t];i.push(L[n.type],L[Math.round(n.freq)],L[Math.round(n.gain)])}}}if(f(s.effects)&&i.push(L[s.transition]),p(s.effects)&&(i.push(L[s.chord]),s.chord==t.chords.dictionary.arpeggio.index&&(i.push(L[s.arpeggioSpeed]),i.push(L[+s.fastTwoNoteArp]))),m(s.effects)&&i.push(L[s.pitchShift]),d(s.effects)&&i.push(L[s.detune-t.detuneMin>>6],L[s.detune-t.detuneMin&63]),y(s.effects)&&(i.push(L[s.vibrato]),s.vibrato==t.vibratos.length&&(i.push(L[Math.round(25*s.vibratoDepth)]),i.push(L[s.vibratoSpeed]),i.push(L[Math.round(s.vibratoDelay)]),i.push(L[s.vibratoType]))),g(s.effects)&&(i.push(L[s.distortion]),i.push(L[+s.aliases])),b(s.effects)&&i.push(L[s.bitcrusherFreq],L[s.bitcrusherQuantization]),M(s.effects)&&(i.push(L[s.pan>>6],L[63&s.pan]),i.push(L[s.panDelay])),w(s.effects)&&i.push(L[s.chorus]),S(s.effects)&&i.push(L[s.echoSustain],L[s.echoDelay]),F(s.effects)&&i.push(L[s.reverb]),k(s.effects)&&(i.push(L[s.upperNoteLimit>>6],L[63&s.upperNoteLimit]),i.push(L[s.lowerNoteLimit>>6],L[63&s.lowerNoteLimit])),I(s.effects)&&i.push(L[+s.invertWave]),4!=s.type&&(i.push(100,L[s.fadeIn],L[s.fadeOut]),i.push(L[+s.clicklessTransition])),5==s.type||7==s.type){i.push(72);const e=new G;for(let i=0;i<t.harmonicsControlPoints;i++)e.write(t.harmonicsControlPointBits,s.harmonicsWave.harmonics[i]);e.encodeBase64(i)}if(0==s.type)i.push(119,L[s.chipWave]),i.push(104,L[s.unison]);else if(1==s.type){i.push(65,L[s.algorithm]),i.push(70,L[s.feedbackType]),i.push(66,L[s.feedbackAmplitude]),i.push(81);for(let e=0;e<t.operatorCount;e++){let t=Math.round(4*s.operators[e].frequency);i.push(L[t>>6],L[63&t])}i.push(89);for(let e=0;e<t.operatorCount;e++){i.push(L[Number(s.operators[e].hzOffset>0)]);let t=Math.round(10*Math.abs(s.operators[e].hzOffset));i.push(L[t>>6],L[63&t])}i.push(90);for(let e=0;e<t.operatorCount;e++)i.push(L[+s.operators[e].invert]);i.push(80);for(let e=0;e<t.operatorCount;e++)i.push(L[s.operators[e].amplitude]);i.push(82);for(let e=0;e<t.operatorCount;e++)i.push(L[s.operators[e].waveform]),3==s.operators[e].waveform&&i.push(L[s.operators[e].pulseWidth])}else if(9==s.type){i.push(119,L[s.chipWave]),i.push(104,L[s.unison]),i.push(77);for(let e=0;e<64;e++)i.push(L[s.customChipWave[e]+24])}else if(2==s.type)i.push(119,L[s.chipNoise]);else if(3==s.type){i.push(83);const e=new G;for(let i=0;i<t.spectrumControlPoints;i++)e.write(t.spectrumControlPointBits,s.spectrumWave.spectrum[i]);e.encodeBase64(i)}else if(4==s.type){i.push(122);for(let e=0;e<t.drumCount;e++)i.push(L[s.drumsetEnvelopes[e]]);i.push(83);const e=new G;for(let i=0;i<t.drumCount;i++)for(let n=0;n<t.spectrumControlPoints;n++)e.write(t.spectrumControlPointBits,s.drumsetSpectrumWaves[i].spectrum[n]);e.encodeBase64(i)}else if(5==s.type)i.push(104,L[s.unison]);else if(6==s.type)i.push(87,L[s.pulseWidth]);else if(8==s.type)i.push(120,L[s.supersawDynamism],L[s.supersawSpread],L[s.supersawShape]),i.push(87,L[s.pulseWidth]);else if(7==s.type){if(t.stringSustainRange>32)throw new Error("Not enough bits to represent sustain value and type in same base64 character.");i.push(104,L[s.unison]),i.push(73,L[s.stringSustain|s.stringSustainType<<5])}else if(10!=s.type)throw new Error("Unknown instrument type.");i.push(69,L[s.envelopeCount]),i.push(L[s.envelopeSpeed]),i.push(L[+s.discreteEnvelope]);for(let e=0;e<s.envelopeCount;e++)i.push(L[s.envelopes[e].target]),t.instrumentAutomationTargets[s.envelopes[e].target].maxCount>1&&i.push(L[s.envelopes[e].index]),i.push(L[s.envelopes[e].envelope])}i.push(98),e=new G;let a=0;for(;1<<a<this.patternsPerChannel+1;)a++;for(let t=0;t<this.getChannelCount();t++)for(let i=0;i<this.barCount;i++)e.write(a,this.channels[t].bars[i]);e.encodeBase64(i),i.push(112),e=new G;const r=new G,o=te.getNeededBits(t.noteSizeMax);for(let i=0;i<this.getChannelCount();i++){const n=this.channels[i],s=this.getMaxInstrumentsPerPattern(i),a=this.getChannelIsNoise(i),l=this.getChannelIsMod(i),h=te.getNeededBits(s-t.instrumentCountMin),u=te.getNeededBits(n.instruments.length-1);if(l){const s=te.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let a=0;a<n.instruments.length;a++){let n=this.channels[i].instruments[a];for(let i=0;i<t.modCount;i++){const a=n.modChannels[i],r=n.modInstruments[i],o=n.modulators[i],l=n.modFilterTypes[i];let h=t.modulators[o].forSong?2:0;o==t.modulators.dictionary.none.index&&(h=3),e.write(2,h),0!=h&&1!=h||(e.write(8,a),e.write(s,r)),3!=h&&e.write(6,o),"eq filter"!=t.modulators[n.modulators[i]].name&&"note filter"!=t.modulators[n.modulators[i]].name||e.write(6,l)}}}const c=a||l?0:n.octave*t.pitchesPerOctave;let f=a?4:c;const p=l?[0,1,2,3,4,5]:a?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],m=[];for(let e=0;e<p.length;e++)p[e]+=c;for(const i of n.patterns){if(this.patternInstruments){const n=N(t.instrumentCountMin,s,i.instruments.length);e.write(h,n-t.instrumentCountMin);for(let t=0;t<n;t++)e.write(u,i.instruments[t])}if(i.notes.length>0){e.write(1,1);let n=0;for(const t of i.notes){t.start<n&&l&&(e.write(2,0),e.write(1,1),e.writePartDuration(n-t.start)),t.start>n&&(e.write(2,0),l&&e.write(1,0),e.writePartDuration(t.start-n)),r.clear(),1==t.pitches.length?r.write(1,0):(r.write(1,1),r.write(3,t.pitches.length-2)),r.writePinCount(t.pins.length-1),l?r.write(9,t.pins[0].size):r.write(o,t.pins[0].size);let i=0,s=t.pitches[0],a=s;const h=[];for(let e=1;e<t.pins.length;e++){const n=t.pins[e],u=s+n.interval;a!=u?(r.write(1,1),h.push(u),a=u):r.write(1,0),r.writePartDuration(n.time-i),i=n.time,l?r.write(9,n.size):r.write(o,n.size)}const u=String.fromCharCode.apply(null,r.encodeBase64([])),c=m.indexOf(u);-1==c?(e.write(2,1),e.concat(r)):(e.write(1,1),e.writeLongTail(0,0,c),m.splice(c,1)),m.unshift(u),m.length>10&&m.pop();const d=t.pitches.concat(h);for(let i=0;i<d.length;i++){const n=d[i],s=p.indexOf(n);if(-1==s){let t=0,i=f;if(i<n)for(;i!=n;)i++,-1==p.indexOf(i)&&t++;else for(;i!=n;)i--,-1==p.indexOf(i)&&t--;e.write(1,0),e.writePitchInterval(t)}else e.write(1,1),e.write(4,s),p.splice(s,1);p.unshift(n),p.length>16&&p.pop(),f=i==t.pitches.length-1?t.pitches[0]:n}0==t.start&&e.write(1,t.continuesLastPattern?1:0),n=t.end}n<this.beatsPerBar*t.partsPerBeat+ +l&&(e.write(2,0),l&&e.write(1,0),e.writePartDuration(this.beatsPerBar*t.partsPerBeat+ +l-n))}else e.write(1,0)}}let l=e.lengthBase64(),h=[];for(;l>0;)h.unshift(L[63&l]),l>>=6;i.push(L[h.length]),Array.prototype.push.apply(i,h),e.encodeBase64(i);const u=64e3;if(i.length<u)return String.fromCharCode.apply(null,i);{let e="";for(let t=0;t<i.length;t+=u)e+=String.fromCharCode.apply(null,i.slice(t,t+u));return e}}static I(e){return 0==e?e=1:1==e&&(e=0),t.envelopes[A(0,t.envelopes.length,e)]}fromBase64String(e){if(null==e||""==e)return void this.initToDefault(!0);let i=0;for(;e.charCodeAt(i)<=32;)i++;if(35==e.charCodeAt(i)&&i++,123==e.charCodeAt(i))return void this.fromJsonObject(JSON.parse(0==i?e:e.substring(i)));const n=e.charCodeAt(i);let s,a,r;106==n?(s=!1,a=!0,r=!1,i++):100==n?(s=!1,a=!1,r=!0,i++):(s=!0,a=!1,r=!1);const o=C[e.charCodeAt(i++)];if(s&&(-1==o||o>te.P||o<te.T))return;if(a&&(-1==o||o>te.q||o<te.O))return;if(r&&(-1==o||o>te.k||o<te.R))return;const l=o<2,h=o<3,u=o<4,c=o<5,T=o<6,q=o<7,x=o<8,O=o<9;this.initToDefault(s&&O||a&&c);const D=s&&O||a&&c;if(h&&s){for(const e of this.channels)e.instruments[0].transition=t.transitions.dictionary.interrupt.index,e.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let R=null;if(s&&O||a&&c){R=[];for(let e=R.length;e<this.getChannelCount();e++){R[e]=[];for(let i=0;i<t.instrumentCountMin;i++)R[e][i]={}}}let z,E=0,H=0,L=-1,G=!1,j=!1;for(;i<e.length;)switch(z=e.charCodeAt(i++)){case 78:var U=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)];this.title=decodeURIComponent(e.substring(i,i+U)),document.title=this.title+" - "+P.versionDisplayName,i+=U;break;case 110:this.pitchChannelCount=C[e.charCodeAt(i++)],this.noiseChannelCount=C[e.charCodeAt(i++)],this.modChannelCount=s||l&&a?0:C[e.charCodeAt(i++)],this.pitchChannelCount=N(t.pitchChannelCountMin,t.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=N(t.noiseChannelCountMin,t.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=N(t.modChannelCountMin,t.modChannelCountMax,this.modChannelCount);for(let e=this.channels.length;e<this.getChannelCount();e++)this.channels[e]=new ee;if(this.channels.length=this.getChannelCount(),s&&O||a&&c)for(let e=R.length;e<this.getChannelCount();e++){R[e]=[];for(let i=0;i<t.instrumentCountMin;i++)R[e][i]={}}break;case 115:this.scale=C[e.charCodeAt(i++)],s&&(this.scale=0);break;case 107:this.key=A(0,t.keys.length,q&&s?11-C[e.charCodeAt(i++)]:C[e.charCodeAt(i++)]);break;case 108:this.loopStart=c&&s?C[e.charCodeAt(i++)]:(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)];break;case 101:this.loopLength=c&&s?C[e.charCodeAt(i++)]:(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]+1;break;case 116:this.tempo=u&&s?[95,120,151,190][C[e.charCodeAt(i++)]]:q&&s?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][C[e.charCodeAt(i++)]]:C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)],this.tempo=A(t.tempoMin,t.tempoMax+1,this.tempo);break;case 109:O&&s?(E=12*C[e.charCodeAt(i++)],E=A(0,t.reverbRange,E)):c&&a&&(E=C[e.charCodeAt(i++)],E=A(0,t.reverbRange,E));break;case 97:this.beatsPerBar=h&&s?[6,7,8,9,10][C[e.charCodeAt(i++)]]:C[e.charCodeAt(i++)]+1,this.beatsPerBar=Math.max(t.beatsPerBarMin,Math.min(t.beatsPerBarMax,this.beatsPerBar));break;case 103:{const n=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]+1;this.barCount=N(t.barCountMin,t.barCountMax,n);for(let e=0;e<this.getChannelCount();e++){for(let t=this.channels[e].bars.length;t<this.barCount;t++)this.channels[e].bars[t]=t<4?1:0;this.channels[e].bars.length=this.barCount}}break;case 106:{let n;n=x&&s?C[e.charCodeAt(i++)]+1:(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]+1,this.patternsPerChannel=N(1,t.barCountMax,n);const a=this.getChannelCount();for(let e=0;e<a;e++){const t=this.channels[e].patterns;for(let e=t.length;e<this.patternsPerChannel;e++)t[e]=new W;t.length=this.patternsPerChannel}}break;case 105:if(O&&s||c&&a){const n=N(t.instrumentCountMin,t.patternInstrumentCountMax,C[e.charCodeAt(i++)]+t.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=n>1;for(let e=0;e<this.getChannelCount();e++){const t=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,i=e>=this.pitchChannelCount+this.noiseChannelCount;for(let s=this.channels[e].instruments.length;s<n;s++)this.channels[e].instruments[s]=new Z(t,i);if(this.channels[e].instruments.length=n,T&&s)for(let s=0;s<n;s++)this.channels[e].instruments[s].setTypeAndReset(t?2:0,t,i);for(let t=R[e].length;t<n;t++)R[e][t]={}}}else{const n=C[e.charCodeAt(i++)];this.layeredInstruments=0!=(2&n),this.patternInstruments=0!=(1&n);for(let n=0;n<this.getChannelCount();n++){let s=1;(this.layeredInstruments||this.patternInstruments)&&(s=N(t.instrumentCountMin,this.getMaxInstrumentsPerChannel(),C[e.charCodeAt(i++)]+t.instrumentCountMin));const a=this.channels[n],r=this.getChannelIsNoise(n),o=this.getChannelIsMod(n);for(let e=a.instruments.length;e<s;e++)a.instruments[e]=new Z(r,o);a.instruments.length=s}}break;case 114:this.rhythm=C[e.charCodeAt(i++)],(a&&h||s)&&(this.rhythm!=t.rhythms.dictionary["÷3 (triplets)"].index&&this.rhythm!=t.rhythms.dictionary["÷6"].index||(G=!0),this.rhythm>=t.rhythms.dictionary["÷6"].index&&(j=!0));break;case 111:if(h&&s){const n=C[e.charCodeAt(i++)];this.channels[n].octave=A(0,t.pitchOctaves,C[e.charCodeAt(i++)]+1),n>=this.pitchChannelCount&&(this.channels[n].octave=0)}else if(O&&s||c&&a)for(let n=0;n<this.getChannelCount();n++)this.channels[n].octave=A(0,t.pitchOctaves,C[e.charCodeAt(i++)]+1),n>=this.pitchChannelCount&&(this.channels[n].octave=0);else{for(let n=0;n<this.pitchChannelCount;n++)this.channels[n].octave=A(0,t.pitchOctaves,C[e.charCodeAt(i++)]);for(let e=this.pitchChannelCount;e<this.getChannelCount();e++)this.channels[e].octave=0}break;case 84:{L++,L>=this.channels[H].instruments.length&&(H++,L=0),N(0,this.channels.length-1,H);const n=this.channels[H].instruments[L];let o=N(0,10,C[e.charCodeAt(i++)]);a&&c||r&&l?7!=o&&8!=o||(o+=2):(a&&T||r&&l)&&(8!=o&&9!=o||(o+=1)),n.setTypeAndReset(o,H>=this.pitchChannelCount&&H<this.pitchChannelCount+this.noiseChannelCount,H>=this.pitchChannelCount+this.noiseChannelCount),!(q&&s||l&&a)||0!=o&&9!=o&&6!=o||(n.aliases=!0,n.distortion=0,n.effects|=8),G&&(n.arpeggioSpeed=9),j&&(n.fastTwoNoteArp=!0),q&&s&&(n.effects=0,n.chord!=t.chords.dictionary.simultaneous.index&&(n.effects|=2048))}break;case 117:{const t=C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)];this.channels[H].instruments[L].preset=t,a&&c?7==this.channels[H].instruments[L].preset&&(this.channels[H].instruments[L].preset=9,this.channels[H].instruments[L].type=9):(a&&T||r&&l)&&8==this.channels[H].instruments[L].preset&&(this.channels[H].instruments[L].preset=9,this.channels[H].instruments[L].type=9),s&&t==P.nameToPresetValue("grand piano 1")&&(this.channels[H].instruments[L].preset=P.nameToPresetValue("grand piano 3"))}break;case 119:if(h&&s){const n=[1,2,3,4,5,6,7,8,0],s=C[e.charCodeAt(i++)],a=this.channels[s].instruments[0];a.chipWave=A(0,t.chipWaves.length,0|n[C[e.charCodeAt(i++)]]),a.convertLegacySettings(R[s][0],D)}else if(T&&s){const n=[1,2,3,4,5,6,7,8,0];for(let s=0;s<this.getChannelCount();s++)for(const a of this.channels[s].instruments)s>=this.pitchChannelCount?a.chipNoise=A(0,t.chipNoises.length,C[e.charCodeAt(i++)]):a.chipWave=A(0,t.chipWaves.length,0|n[C[e.charCodeAt(i++)]])}else if(q&&s){const n=[1,2,3,4,5,6,7,8,0];H>=this.pitchChannelCount?this.channels[H].instruments[L].chipNoise=A(0,t.chipNoises.length,C[e.charCodeAt(i++)]):this.channels[H].instruments[L].chipWave=A(0,t.chipWaves.length,0|n[C[e.charCodeAt(i++)]])}else 2==this.channels[H].instruments[L].type?this.channels[H].instruments[L].chipNoise=A(0,t.chipNoises.length,C[e.charCodeAt(i++)]):this.channels[H].instruments[L].chipWave=A(0,t.chipWaves.length,C[e.charCodeAt(i++)]);break;case 102:if(O&&s||c&&a)if(q&&s){const n=[10,6,3,0,8,5,2],a=["none","none","none","none","decay 1","decay 2","decay 3"];if(h&&s){const s=C[e.charCodeAt(i++)],r=this.channels[s].instruments[0],o=R[s][0],l=[1,3,4,5][A(0,n.length,C[e.charCodeAt(i++)])];o.filterCutoff=n[l],o.filterResonance=0,o.filterEnvelope=t.envelopes.dictionary[a[l]],r.convertLegacySettings(o,D)}else if(T&&s)for(let s=0;s<this.getChannelCount();s++)for(let r=0;r<this.channels[s].instruments.length;r++){const o=this.channels[s].instruments[r],l=R[s][r],h=A(0,n.length,C[e.charCodeAt(i++)]+1);s<this.pitchChannelCount?(l.filterCutoff=n[h],l.filterResonance=0,l.filterEnvelope=t.envelopes.dictionary[a[h]]):(l.filterCutoff=10,l.filterResonance=0,l.filterEnvelope=t.envelopes.dictionary.none),o.convertLegacySettings(l,D)}else{const s=A(0,n.length,C[e.charCodeAt(i++)]),r=this.channels[H].instruments[L],o=R[H][L];o.filterCutoff=n[s],o.filterResonance=0,o.filterEnvelope=t.envelopes.dictionary[a[s]],r.convertLegacySettings(o,D)}}else{const t=11,n=this.channels[H].instruments[L],s=R[H][L];s.filterCutoff=A(0,t,C[e.charCodeAt(i++)]),n.convertLegacySettings(s,D)}else{const n=this.channels[H].instruments[L];let o=C[e.charCodeAt(i++)];if(s||0==o){n.eqFilterType=!1,(a||r)&&(o=C[e.charCodeAt(i++)]);const s=o;n.eqFilter.controlPointCount=A(0,t.filterMaxPoints+1,s);for(let e=n.eqFilter.controlPoints.length;e<n.eqFilter.controlPointCount;e++)n.eqFilter.controlPoints[e]=new _;for(let s=0;s<n.eqFilter.controlPointCount;s++){const a=n.eqFilter.controlPoints[s];a.type=A(0,3,C[e.charCodeAt(i++)]),a.freq=A(0,t.filterFreqRange,C[e.charCodeAt(i++)]),a.gain=A(0,t.filterGainRange,C[e.charCodeAt(i++)])}for(let e=n.eqFilter.controlPointCount;e<s;e++)i+=3;if(n.eqSubFilters[0]=n.eqFilter,a&&!c||r){let s=C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)];for(let a=0;a<t.filterMorphCount-1;a++)if(s&1<<a){const s=C[e.charCodeAt(i++)];null==n.eqSubFilters[a+1]&&(n.eqSubFilters[a+1]=new Y),n.eqSubFilters[a+1].controlPointCount=A(0,t.filterMaxPoints+1,s);for(let e=n.eqSubFilters[a+1].controlPoints.length;e<n.eqSubFilters[a+1].controlPointCount;e++)n.eqSubFilters[a+1].controlPoints[e]=new _;for(let s=0;s<n.eqSubFilters[a+1].controlPointCount;s++){const r=n.eqSubFilters[a+1].controlPoints[s];r.type=A(0,3,C[e.charCodeAt(i++)]),r.freq=A(0,t.filterFreqRange,C[e.charCodeAt(i++)]),r.gain=A(0,t.filterGainRange,C[e.charCodeAt(i++)])}for(let e=n.eqSubFilters[a+1].controlPointCount;e<s;e++)i+=3}}}else n.eqFilterType=!0,n.eqFilterSimpleCut=A(0,t.filterSimpleCutRange,C[e.charCodeAt(i++)]),n.eqFilterSimplePeak=A(0,t.filterSimplePeakRange,C[e.charCodeAt(i++)])}break;case 121:if(O&&s||c&&a){const t=8,n=this.channels[H].instruments[L],s=R[H][L];s.filterResonance=A(0,t,C[e.charCodeAt(i++)]),n.convertLegacySettings(s,D)}break;case 122:{const n=this.channels[H].instruments[L];if(O&&s||c&&a)if(4==n.type)for(let s=0;s<t.drumCount;s++)n.drumsetEnvelopes[s]=te.I(C[e.charCodeAt(i++)]).index;else{const t=R[H][L];t.filterEnvelope=te.I(C[e.charCodeAt(i++)]),n.convertLegacySettings(t,D)}else for(let s=0;s<t.drumCount;s++)n.drumsetEnvelopes[s]=A(0,t.envelopes.length,C[e.charCodeAt(i++)])}break;case 87:{const n=this.channels[H].instruments[L];if(n.pulseWidth=A(0,t.pulseWidthRange+ +a,C[e.charCodeAt(i++)]),s&&(n.pulseWidth=Math.round(Math.pow(.5,(7-n.pulseWidth)*t.pulseWidthStepPower)*t.pulseWidthRange)),O&&s||c&&a){const t=R[H][L];t.pulseEnvelope=te.I(C[e.charCodeAt(i++)]),n.convertLegacySettings(t,D)}}break;case 120:{const n=this.channels[H].instruments[L];n.supersawDynamism=A(0,t.supersawDynamismMax+1,C[e.charCodeAt(i++)]),n.supersawSpread=A(0,t.supersawSpreadMax+1,C[e.charCodeAt(i++)]),n.supersawShape=A(0,t.supersawShapeMax+1,C[e.charCodeAt(i++)])}break;case 73:{const n=this.channels[H].instruments[L],s=C[e.charCodeAt(i++)];n.stringSustain=A(0,t.stringSustainRange,31&s),n.stringSustainType=t.enableAcousticSustain?A(0,2,s>>5):0}break;case 100:if(O&&s||c&&a){const n=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}];if(h&&s){const s=C[e.charCodeAt(i++)],a=n[A(0,n.length,C[e.charCodeAt(i++)])],r=this.channels[s].instruments[0];r.fadeIn=oe.secondsToFadeInSetting(a.fadeInSeconds),r.fadeOut=oe.ticksToFadeOutSetting(a.fadeOutTicks),r.transition=t.transitions.dictionary[a.transition].index,r.transition!=t.transitions.dictionary.normal.index&&(r.effects|=1024)}else if(T&&s)for(let s=0;s<this.getChannelCount();s++)for(const a of this.channels[s].instruments){const s=n[A(0,n.length,C[e.charCodeAt(i++)])];a.fadeIn=oe.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=oe.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=t.transitions.dictionary[s.transition].index,a.transition!=t.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(u||s){const s=n[A(0,n.length,C[e.charCodeAt(i++)])],a=this.channels[H].instruments[L];a.fadeIn=oe.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=oe.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=t.transitions.dictionary[s.transition].index,a.transition!=t.transitions.dictionary.normal.index&&(a.effects|=1024)}else{const s=n[A(0,n.length,C[e.charCodeAt(i++)])],a=this.channels[H].instruments[L];a.fadeIn=oe.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=oe.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=t.transitions.dictionary[s.transition].index,C[e.charCodeAt(i++)]>0&&(a.legacyTieOver=!0),a.clicklessTransition=!!C[e.charCodeAt(i++)],(a.transition!=t.transitions.dictionary.normal.index||a.clicklessTransition)&&(a.effects|=1024)}}else{const n=this.channels[H].instruments[L];n.fadeIn=A(0,t.fadeInRange,C[e.charCodeAt(i++)]),n.fadeOut=A(0,t.fadeOutTicks.length,C[e.charCodeAt(i++)]),(a||r)&&(n.clicklessTransition=!!C[e.charCodeAt(i++)])}break;case 99:if(O&&s||c&&a)if(q&&s)if(h&&s){const n=[0,3,2,0],s=["none","none","none","tremolo2"],a=C[e.charCodeAt(i++)],r=A(0,n.length,C[e.charCodeAt(i++)]),o=this.channels[a].instruments[0],l=R[a][0];o.vibrato=n[r],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=t.envelopes.dictionary[s[r]],o.convertLegacySettings(l,D)),o.vibrato!=t.vibratos.dictionary.none.index&&(o.effects|=512)}else if(T&&s){const n=[0,1,2,3,0,0],s=["none","none","none","none","tremolo5","tremolo2"];for(let r=0;r<this.getChannelCount();r++)for(let o=0;o<this.channels[r].instruments.length;o++){const l=A(0,n.length,C[e.charCodeAt(i++)]),h=this.channels[r].instruments[o],u=R[r][o];h.vibrato=n[l],null!=u.filterEnvelope&&1!=u.filterEnvelope.type||(u.filterEnvelope=t.envelopes.dictionary[s[l]],h.convertLegacySettings(u,D)),h.vibrato!=t.vibratos.dictionary.none.index&&(h.effects|=512),(0!=E||a&&c)&&!this.getChannelIsNoise(r)&&(h.effects|=1,h.reverb=E)}}else{const n=[0,1,2,3,0,0],s=["none","none","none","none","tremolo5","tremolo2"],r=A(0,n.length,C[e.charCodeAt(i++)]),o=this.channels[H].instruments[L],l=R[H][L];o.vibrato=n[r],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=t.envelopes.dictionary[s[r]],o.convertLegacySettings(l,D)),o.vibrato!=t.vibratos.dictionary.none.index&&(o.effects|=512),(0!=E||a&&c)&&(o.effects|=1,o.reverb=E)}else{const n=this.channels[H].instruments[L],s=A(0,t.vibratos.length+1,C[e.charCodeAt(i++)]);n.vibrato=s,n.vibrato!=t.vibratos.dictionary.none.index&&(n.effects|=512),s==t.vibratos.length?(n.vibratoDepth=A(0,t.modulators.dictionary["vibrato depth"].maxRawVol+1,C[e.charCodeAt(i++)])/50,n.vibratoSpeed=A(0,t.modulators.dictionary["vibrato speed"].maxRawVol+1,C[e.charCodeAt(i++)]),n.vibratoDelay=A(0,t.modulators.dictionary["vibrato delay"].maxRawVol+1,C[e.charCodeAt(i++)])/2,n.vibratoType=A(0,t.vibratoTypes.length,C[e.charCodeAt(i++)]),n.effects|=512):(n.vibratoDepth=t.vibratos[n.vibrato].amplitude,n.vibratoSpeed=10,n.vibratoDelay=t.vibratos[n.vibrato].delayTicks/2,n.vibratoType=t.vibratos[n.vibrato].type)}break;case 71:if(a&&c){const n=this.channels[H].instruments[L];n.arpeggioSpeed=A(0,t.modulators.dictionary["arp speed"].maxRawVol+1,C[e.charCodeAt(i++)]),n.fastTwoNoteArp=!!C[e.charCodeAt(i++)]}break;case 104:if(h&&s){const n=C[e.charCodeAt(i++)];this.channels[n].instruments[0].unison=A(0,t.unisons.length,C[e.charCodeAt(i++)])}else if(T&&s)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments){const n=C[e.charCodeAt(i++)];let a=A(0,t.unisons.length,n);8==n&&(a=2,s.chord=3),s.unison=a}else if(q&&s){const n=C[e.charCodeAt(i++)];let s=A(0,t.unisons.length,n);8==n&&(s=2,this.channels[H].instruments[L].chord=3),this.channels[H].instruments[L].unison=s}else this.channels[H].instruments[L].unison=A(0,t.unisons.length,C[e.charCodeAt(i++)]);break;case 67:if(O&&s||c&&a){const n=this.channels[H].instruments[L];n.chord=A(0,t.chords.length,C[e.charCodeAt(i++)]),n.chord!=t.chords.dictionary.simultaneous.index&&(n.effects|=2048)}break;case 113:{const n=this.channels[H].instruments[L];if(O&&s||c&&a){n.effects=16383&C[e.charCodeAt(i++)],0!=E||a&&c?F(n.effects)&&(n.reverb=E):n.effects&=-2,n.effects|=4,n.vibrato!=t.vibratos.dictionary.none.index&&(n.effects|=512),n.detune!=t.detuneCenter&&(n.effects|=256),n.aliases?n.effects|=8:n.effects&=-9;const s=R[H][L];n.convertLegacySettings(s,D)}else{if(n.effects=(C[e.charCodeAt(i++)]<<30|C[e.charCodeAt(i++)]<<24|C[e.charCodeAt(i++)]<<18|C[e.charCodeAt(i++)]<<12|C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)]<<0)>>>0,v(n.effects)){let o=C[e.charCodeAt(i++)];if(s||0==o){n.noteFilterType=!1,(a||r)&&(o=C[e.charCodeAt(i++)]),n.noteFilter.controlPointCount=A(0,t.filterMaxPoints+1,o);for(let e=n.noteFilter.controlPoints.length;e<n.noteFilter.controlPointCount;e++)n.noteFilter.controlPoints[e]=new _;for(let s=0;s<n.noteFilter.controlPointCount;s++){const a=n.noteFilter.controlPoints[s];a.type=A(0,3,C[e.charCodeAt(i++)]),a.freq=A(0,t.filterFreqRange,C[e.charCodeAt(i++)]),a.gain=A(0,t.filterGainRange,C[e.charCodeAt(i++)])}for(let e=n.noteFilter.controlPointCount;e<o;e++)i+=3;if(n.noteSubFilters[0]=n.noteFilter,a&&!c||r){let s=C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)];for(let a=0;a<t.filterMorphCount-1;a++)if(s&1<<a){const s=C[e.charCodeAt(i++)];null==n.noteSubFilters[a+1]&&(n.noteSubFilters[a+1]=new Y),n.noteSubFilters[a+1].controlPointCount=A(0,t.filterMaxPoints+1,s);for(let e=n.noteSubFilters[a+1].controlPoints.length;e<n.noteSubFilters[a+1].controlPointCount;e++)n.noteSubFilters[a+1].controlPoints[e]=new _;for(let s=0;s<n.noteSubFilters[a+1].controlPointCount;s++){const r=n.noteSubFilters[a+1].controlPoints[s];r.type=A(0,3,C[e.charCodeAt(i++)]),r.freq=A(0,t.filterFreqRange,C[e.charCodeAt(i++)]),r.gain=A(0,t.filterGainRange,C[e.charCodeAt(i++)])}for(let e=n.noteSubFilters[a+1].controlPointCount;e<s;e++)i+=3}}}else n.noteFilterType=!0,n.noteFilter.reset(),n.noteFilterSimpleCut=A(0,t.filterSimpleCutRange,C[e.charCodeAt(i++)]),n.noteFilterSimplePeak=A(0,t.filterSimplePeakRange,C[e.charCodeAt(i++)])}f(n.effects)&&(n.transition=A(0,t.transitions.length,C[e.charCodeAt(i++)])),p(n.effects)&&(n.chord=A(0,t.chords.length,C[e.charCodeAt(i++)]),n.chord==t.chords.dictionary.arpeggio.index&&(a||r)&&(n.arpeggioSpeed=C[e.charCodeAt(i++)],n.fastTwoNoteArp=!!C[e.charCodeAt(i++)])),m(n.effects)&&(n.pitchShift=A(0,t.pitchShiftRange,C[e.charCodeAt(i++)])),d(n.effects)&&(s?(n.detune=A(t.detuneMin,t.detuneMax+1,C[e.charCodeAt(i++)]),n.detune=Math.round((n.detune-9)*(Math.abs(n.detune-9)+1)/2+t.detuneCenter)):n.detune=A(t.detuneMin,t.detuneMax+1,(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)])),y(n.effects)&&(n.vibrato=A(0,t.vibratos.length+1,C[e.charCodeAt(i++)]),n.vibrato==t.vibratos.length&&(a||r)?(n.vibratoDepth=A(0,t.modulators.dictionary["vibrato depth"].maxRawVol+1,C[e.charCodeAt(i++)])/25,n.vibratoSpeed=A(0,t.modulators.dictionary["vibrato speed"].maxRawVol+1,C[e.charCodeAt(i++)]),n.vibratoDelay=A(0,t.modulators.dictionary["vibrato delay"].maxRawVol+1,C[e.charCodeAt(i++)]),n.vibratoType=A(0,t.vibratoTypes.length,C[e.charCodeAt(i++)])):(n.vibratoDepth=t.vibratos[n.vibrato].amplitude,n.vibratoSpeed=10,n.vibratoDelay=t.vibratos[n.vibrato].delayTicks/2,n.vibratoType=t.vibratos[n.vibrato].type)),g(n.effects)&&(n.distortion=A(0,t.distortionRange,C[e.charCodeAt(i++)]),(a&&!c||r)&&(n.aliases=!!C[e.charCodeAt(i++)])),b(n.effects)&&(n.bitcrusherFreq=A(0,t.bitcrusherFreqRange,C[e.charCodeAt(i++)]),n.bitcrusherQuantization=A(0,t.bitcrusherQuantizationRange,C[e.charCodeAt(i++)])),M(n.effects)&&(n.pan=A(0,t.panMax+1,s?Math.round(C[e.charCodeAt(i++)]*(t.panMax/8)):(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]),(a&&!l||r)&&(n.panDelay=C[e.charCodeAt(i++)])),w(n.effects)&&(n.chorus=s?2*A(0,t.chorusRange/2+1,C[e.charCodeAt(i++)]):A(0,t.chorusRange,C[e.charCodeAt(i++)])),S(n.effects)&&(n.echoSustain=A(0,t.echoSustainRange,C[e.charCodeAt(i++)]),n.echoDelay=A(0,t.echoDelayRange,C[e.charCodeAt(i++)])),F(n.effects)&&(n.reverb=A(0,t.reverbRange,s?Math.round(C[e.charCodeAt(i++)]*t.reverbRange/3):C[e.charCodeAt(i++)])),k(n.effects)&&(n.upperNoteLimit=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)],n.lowerNoteLimit=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]),I(n.effects)&&(n.invertWave=!!C[e.charCodeAt(i++)])}n.effects&=16383}break;case 118:if(h&&s){const n=C[e.charCodeAt(i++)];this.channels[n].instruments[0].volume=Math.round(A(-t.volumeRange/2,1,5*-C[e.charCodeAt(i++)]))}else if(T&&s)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments)s.volume=Math.round(A(-t.volumeRange/2,1,5*-C[e.charCodeAt(i++)]));else if(q&&s){this.channels[H].instruments[L].volume=Math.round(A(-t.volumeRange/2,1,5*-C[e.charCodeAt(i++)]))}else if(s){this.channels[H].instruments[L].volume=Math.round(A(-t.volumeRange/2,1,25*-C[e.charCodeAt(i++)]/7))}else{this.channels[H].instruments[L].volume=Math.round(A(-t.volumeRange/2,t.volumeRange/2+1,(C[e.charCodeAt(i++)]<<6|C[e.charCodeAt(i++)])-t.volumeRange/2))}break;case 76:if(O&&s){this.channels[H].instruments[L].pan=A(0,t.panMax+1,C[e.charCodeAt(i++)]*(t.panMax/8))}else if(c&&a){const n=this.channels[H].instruments[L];n.pan=A(0,t.panMax+1,(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)]),(a&&!h||r)&&(n.panDelay=C[e.charCodeAt(i++)])}break;case 68:{const n=this.channels[H].instruments[L];a&&c&&(n.detune=A(t.detuneMin,t.detuneMax+1,4*((C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)])),n.effects|=256)}break;case 77:{let t=this.channels[H].instruments[L];for(let n=0;n<64;n++)t.customChipWave[n]=A(-24,25,C[e.charCodeAt(i++)]-24);let n=0;for(let e=0;e<t.customChipWave.length;e++)n+=t.customChipWave[e];const s=n/t.customChipWave.length;let a=0,r=0;for(let e=0;e<t.customChipWave.length;e++)a+=r,r=t.customChipWave[e]-s,t.customChipWaveIntegral[e]=a;t.customChipWaveIntegral[64]=0}break;case 79:{let t=C[e.charCodeAt(i++)];63==t?this.restoreLimiterDefaults():(this.compressionRatio=t<10?t/10:1+(t-10)/60,t=C[e.charCodeAt(i++)],this.limitRatio=t<10?t/10:t-9,this.limitDecay=C[e.charCodeAt(i++)],this.limitRise=250*C[e.charCodeAt(i++)]+2e3,this.compressionThreshold=C[e.charCodeAt(i++)]/20,this.limitThreshold=C[e.charCodeAt(i++)]/20,this.masterGain=((C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)])/50)}break;case 85:for(let t=0;t<this.getChannelCount();t++){var K;K=u&&a?C[e.charCodeAt(i++)]:(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)],this.channels[t].name=decodeURIComponent(e.substring(i,i+K)),i+=K}break;case 65:{const n=this.channels[H].instruments[L];if(n.algorithm=A(0,t.algorithms.length,C[e.charCodeAt(i++)]),O&&s||c&&a){const e=R[H][L];n.convertLegacySettings(e,D)}}break;case 70:this.channels[H].instruments[L].feedbackType=A(0,t.feedbacks.length,C[e.charCodeAt(i++)]);break;case 66:this.channels[H].instruments[L].feedbackAmplitude=A(0,t.operatorAmplitudeMax+1,C[e.charCodeAt(i++)]);break;case 86:if(O&&s||c&&a){const t=this.channels[H].instruments[L],n=R[H][L];n.feedbackEnvelope=te.I(C[e.charCodeAt(i++)]),t.convertLegacySettings(n,D)}break;case 81:if(s||a||h&&r)for(let n=0;n<t.operatorCount;n++){let s=t.operatorFrequencies.findIndex((n=>n.name==A(0,t.operatorFrequencies.length,C[e.charCodeAt(i++)]).toString()));this.channels[H].instruments[L].operators[n].frequency=t.operatorFrequencies[s].mult,this.channels[H].instruments[L].operators[n].hzOffset=t.operatorFrequencies[s].hzOffset,this.channels[H].instruments[L].operators[n].invert=1!=t.operatorFrequencies[s].amplitudeSign}else for(let n=0;n<t.operatorCount;n++){const t=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)];this.channels[H].instruments[L].operators[n].frequency=A(0,101,t/4)}break;case 89:for(let n=0;n<t.operatorCount;n++){const t=C[e.charCodeAt(i++)],s=(C[e.charCodeAt(i++)]<<6)+C[e.charCodeAt(i++)];this.channels[H].instruments[L].operators[n].hzOffset=A(-201,201,s/10),0==t&&(this.channels[H].instruments[L].operators[n].hzOffset*=-1)}break;case 90:for(let n=0;n<t.operatorCount;n++)this.channels[H].instruments[L].operators[n].invert=!!C[e.charCodeAt(i++)];break;case 80:for(let n=0;n<t.operatorCount;n++)this.channels[H].instruments[L].operators[n].amplitude=A(0,t.operatorAmplitudeMax+1,C[e.charCodeAt(i++)]);break;case 69:{const n=this.channels[H].instruments[L];if(O&&s||c&&a){const s=R[H][L];s.operatorEnvelopes=[];for(let n=0;n<t.operatorCount;n++)s.operatorEnvelopes[n]=te.I(C[e.charCodeAt(i++)]);n.convertLegacySettings(s,D)}else{const s=A(0,t.maxEnvelopeCount+1,C[e.charCodeAt(i++)]);(a&&!T||r&&!l)&&(n.envelopeSpeed=A(0,t.modulators.dictionary["envelope speed"].maxRawVol+1,C[e.charCodeAt(i++)]),n.discreteEnvelope=!!C[e.charCodeAt(i++)]);for(let a=0;a<s;a++){const s=A(0,t.instrumentAutomationTargets.length,C[e.charCodeAt(i++)]);let a=0;const r=t.instrumentAutomationTargets[s].maxCount;r>1&&(a=A(0,r,C[e.charCodeAt(i++)]));const o=A(0,t.envelopes.length,C[e.charCodeAt(i++)]);n.addEnvelope(s,a,o)}}}break;case 82:{const n=this.channels[H].instruments[L];for(let s=0;s<t.operatorCount;s++)n.operators[s].waveform=A(0,t.operatorWaves.length,C[e.charCodeAt(i++)]),3==n.operators[s].waveform&&(n.operators[s].pulseWidth=A(0,t.pwmOperatorWaves.length,C[e.charCodeAt(i++)]))}break;case 83:{const n=this.channels[H].instruments[L];if(3==n.type){const s=Math.ceil(t.spectrumControlPoints*t.spectrumControlPointBits/6),a=new V(e,i,i+s);for(let e=0;e<t.spectrumControlPoints;e++)n.spectrumWave.spectrum[e]=a.read(t.spectrumControlPointBits);n.spectrumWave.markCustomWaveDirty(),i+=s}else{if(4!=n.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const s=Math.ceil(t.drumCount*t.spectrumControlPoints*t.spectrumControlPointBits/6),a=new V(e,i,i+s);for(let e=0;e<t.drumCount;e++){for(let i=0;i<t.spectrumControlPoints;i++)n.drumsetSpectrumWaves[e].spectrum[i]=a.read(t.spectrumControlPointBits);n.drumsetSpectrumWaves[e].markCustomWaveDirty()}i+=s}}}break;case 72:{const n=this.channels[H].instruments[L],s=Math.ceil(t.harmonicsControlPoints*t.harmonicsControlPointBits/6),a=new V(e,i,i+s);for(let e=0;e<t.harmonicsControlPoints;e++)n.harmonicsWave.harmonics[e]=a.read(t.harmonicsControlPointBits);n.harmonicsWave.markCustomWaveDirty(),i+=s}break;case 88:if(a&&c){const t=this.channels[H].instruments[L];t.aliases=!!C[e.charCodeAt(i++)],t.aliases&&(t.distortion=0,t.effects|=8)}break;case 98:{let t;if(h&&s){const n=C[e.charCodeAt(i++)],s=C[e.charCodeAt(i++)];t=Math.ceil(.5*s);const a=new V(e,i,i+t);for(let e=0;e<s;e++)this.channels[n].bars[e]=a.read(3)+1}else if(c&&s){let n=0;for(;1<<n<this.patternsPerChannel;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new V(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)+1}else{let n=0;for(;1<<n<this.patternsPerChannel+1;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new V(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)}i+=t}break;case 112:{let n,o=0,l=!(u&&a||s),f=l?4:3,p=l?16:8;if(h&&s)n=C[e.charCodeAt(i++)],i++,o=C[e.charCodeAt(i++)],o<<=6,o+=C[e.charCodeAt(i++)];else{n=0;let t=N(1,4,C[e.charCodeAt(i++)]);for(;t>0;)o<<=6,o+=C[e.charCodeAt(i++)],t--}const m=new V(e,i,i+o);i+=o;const d=te.getNeededBits(t.noteSizeMax);let y=-1,g=-1,b=-1;for(;;){const e=this.channels[n],i=this.getChannelIsNoise(n),o=this.getChannelIsMod(n),M=this.getMaxInstrumentsPerPattern(n),w=te.getNeededBits(M-t.instrumentCountMin),S=te.getNeededBits(e.instruments.length-1);if(o){const i=c&&a?S:te.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let s=0;s<e.instruments.length;s++){let o=e.instruments[s];for(let e=0;e<t.modCount;e++){let l=m.read(2);switch(l){case 0:o.modChannels[e]=A(0,this.pitchChannelCount+this.noiseChannelCount+1,m.read(8)),o.modInstruments[e]=A(0,this.channels[o.modChannels[e]].instruments.length+2,m.read(i));break;case 1:o.modChannels[e]=this.pitchChannelCount+A(0,this.noiseChannelCount+1,m.read(8)),o.modInstruments[e]=A(0,this.channels[o.modChannels[e]].instruments.length+2,m.read(S));break;case 2:o.modChannels[e]=-1;break;case 3:o.modChannels[e]=-2}if(3!=l&&(o.modulators[e]=m.read(6)),!(!c&&a||r)||"eq filter"!=t.modulators[o.modulators[e]].name&&"note filter"!=t.modulators[o.modulators[e]].name||(o.modFilterTypes[e]=m.read(6)),c&&a&&o.modChannels[e]>=0){let i=v(this.channels[o.modChannels[e]].instruments[o.modInstruments[e]].effects);7==o.modulators[e]?(o.modulators[e]=i?t.modulators.dictionary["note filt cut"].index:t.modulators.dictionary["eq filt cut"].index,o.modFilterTypes[e]=1):8==o.modulators[e]&&(o.modulators[e]=i?t.modulators.dictionary["note filt peak"].index:t.modulators.dictionary["eq filt peak"].index,o.modFilterTypes[e]=2)}else c&&a&&o.modulators[e]==t.modulators.dictionary["song reverb"].index&&(y=n,g=s,b=e);c&&a&&14!=t.modulators[o.modulators[e]].associatedEffect&&(this.channels[o.modChannels[e]].instruments[o.modInstruments[e]].effects|=1<<t.modulators[o.modulators[e]].associatedEffect)}}}const F=[];for(let i=0;i<e.instruments.length;i++){F[i]=[];for(let n=0;n<t.modCount;n++)F[i][t.modCount-1-n]=1+3*+(c&&a&&o&&e.instruments[i].modulators[n]==t.modulators.dictionary.detune.index)}const k=i||o?0:12*e.octave;let I=i||o?4:k;const P=o?[0,1,2,3,4,5]:i?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],T=[];for(let e=0;e<P.length;e++)P[e]+=k;for(let i=0;i<this.patternsPerChannel;i++){const n=e.patterns[i];if(O&&s||c&&a)n.instruments[0]=N(0,e.instruments.length-1,m.read(S)),n.instruments.length=1;else if(this.patternInstruments){const i=N(t.instrumentCountMin,M,m.read(w)+t.instrumentCountMin);for(let t=0;t<i;t++)n.instruments[t]=N(0,e.instruments.length-1+2*+o,m.read(S));n.instruments.length=i}else n.instruments[0]=0,n.instruments.length=t.instrumentCountMin;if(!(s&&h||0!=m.read(1))){n.notes.length=0;continue}let r=0;const y=n.notes;let v=0;for(;r<this.beatsPerBar*t.partsPerBeat+ +o;){const i=1==m.read(1);let h=!1,g=0;if(i?g=N(0,T.length-1,m.readLongTail(0,0)):h=1==m.read(1),i||h){let h,b,M;if(i)h=T[g],T.splice(g,1);else{if(h={},l)1==m.read(1)?h.pitchCount=m.read(3)+2:h.pitchCount=1;else for(h.pitchCount=1;h.pitchCount<4&&1==m.read(1);)h.pitchCount++;h.pinCount=m.readPinCount(),h.initialSize=s?2*m.read(2):o?m.read(9):m.read(d),h.pins=[],h.length=0,h.bendCount=0;for(let e=0;e<h.pinCount;e++){let e={};e.pitchBend=1==m.read(1),e.pitchBend&&h.bendCount++,h.length+=q&&s?m.readLegacyPartDuration()*t.partsPerBeat/t.rhythms[this.rhythm].stepsPerBeat:m.readPartDuration(),e.time=h.length,e.size=s?2*m.read(2):o?m.read(9):m.read(d),h.pins.push(e)}}T.unshift(h),T.length>10&&T.pop(),y.length<=v?(b=new B(0,r,r+h.length,h.initialSize),y[v++]=b):(b=y[v++],b.start=r,b.end=r+h.length,b.pins[0].size=h.initialSize);let w=0;const S=[];for(let e=0;e<h.pitchCount+h.bendCount;e++){if(1==m.read(1)){const e=N(0,P.length-1,m.read(f));M=P[e],P.splice(e,1)}else{M=I;let e=m.readPitchInterval();for(;e>0;){for(M++;-1!=P.indexOf(M);)M++;e--}for(;e<0;){for(M--;-1!=P.indexOf(M);)M--;e++}}P.unshift(M),P.length>p&&P.pop(),e<h.pitchCount?b.pitches[w++]=M:S.push(M),I=e==h.pitchCount-1?b.pitches[0]:M}b.pitches.length=w,S.unshift(b.pitches[0]),o&&(b.pins[0].size*=F[n.instruments[0]][b.pitches[0]]);let k=1;for(const e of h.pins){e.pitchBend&&S.shift();const t=S[0]-b.pitches[0];if(b.pins.length<=k)b.pins[k++]=$(t,e.time,o?e.size*F[n.instruments[0]][b.pitches[0]]:e.size);else{const i=b.pins[k++];i.interval=t,i.time=e.time,i.size=o?e.size*F[n.instruments[0]][b.pitches[0]]:e.size}}b.pins.length=k,0==b.start&&(b.continuesLastPattern=O&&s||c&&a?!u&&!s&&e.instruments[n.instruments[0]].legacyTieOver:1==m.read(1)),r=N(0,this.beatsPerBar*t.partsPerBeat,b.end)}else if(o){const e=1==m.read(1),t=m.readPartDuration();e?r-=t:r+=t}else{r+=q&&s?m.readLegacyPartDuration()*t.partsPerBeat/t.rhythms[this.rhythm].stepsPerBeat:m.readPartDuration()}}y.length=v}if(h&&s)break;if(n++,n>=this.getChannelCount())break}if(a&&c&&b>=0)for(let e=0;e<this.channels.length;e++)for(let i=0;i<this.channels[e].instruments.length;i++){const n=this.channels[e].instruments[i];if(F(n.effects)&&(n.reverb=t.reverbRange-1),y==e&&g==i){const i=this.channels[e].bars[0];if(i>0){const n=this.channels[e].patterns[i-1];let s=6;for(const e of n.notes)e.pitches[0]==t.modCount-1-b&&(s=Math.min(s,e.start));s>0&&n.notes.push(new B(t.modCount-1-b,0,s,E))}else if(this.channels[e].patterns.length<t.barCountMax){const i=new W;if(this.channels[e].patterns.push(i),this.channels[e].bars[0]=this.channels[e].patterns.length,this.channels[e].patterns.length>this.patternsPerChannel){for(let e=0;e<this.channels.length;e++)this.channels[e].patterns.length<=this.patternsPerChannel&&this.channels[e].patterns.push(new W);this.patternsPerChannel++}i.instruments.length=1,i.instruments[0]=g,i.notes.length=0,i.notes.push(new B(t.modCount-1-b,0,6,E))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(z)+" at index "+(i-1))}}toJsonObject(e=!0,i=1,n=!0){const s=[];for(let t=0;t<this.getChannelCount();t++){const a=this.channels[t],r=[],o=this.getChannelIsNoise(t),l=this.getChannelIsMod(t);for(const e of a.instruments)r.push(e.toJsonObject());const h=[];for(const e of a.patterns)h.push(e.toJsonObject(this,a,l));const u=[];if(e)for(let e=0;e<this.loopStart;e++)u.push(a.bars[e]);for(let e=0;e<i;e++)for(let e=this.loopStart;e<this.loopStart+this.loopLength;e++)u.push(a.bars[e]);if(n)for(let e=this.loopStart+this.loopLength;e<this.barCount;e++)u.push(a.bars[e]);const c={type:l?"mod":o?"drum":"pitch",name:a.name,instruments:r,patterns:h,sequence:u};o||(c.octaveScrollBar=a.octave-1),s.push(c)}return{name:this.title,format:te.H,version:te.k,scale:t.scales[this.scale].name,key:t.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:t.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:s}}fromJsonObject(e){if(this.initToDefault(!0),!e)return;if(null!=e.name&&(this.title=e.name),this.scale=0,null!=e.scale){const i={"romani :)":"double harmonic :)","romani :(":"double harmonic :(","dbl harmonic :)":"double harmonic :)","dbl harmonic :(":"double harmonic :(",enigma:"strange"},n=null!=i[e.scale]?i[e.scale]:e.scale,s=t.scales.findIndex((e=>e.name==n));-1!=s&&(this.scale=s)}if(null!=e.key)if("number"==typeof e.key)this.key=(e.key+1200>>>0)%t.keys.length;else if("string"==typeof e.key){const t=e.key,i=t.charAt(0).toUpperCase(),n=t.charAt(1).toLowerCase();let s={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[i];const a={"#":1,"♯":1,b:-1,"♭":-1}[n];null!=s&&(null!=a&&(s+=a),s<0&&(s+=12),s%=12,this.key=s)}null!=e.beatsPerMinute&&(this.tempo=A(t.tempoMin,t.tempoMax+1,0|e.beatsPerMinute));let i=0;null!=e.reverb&&(i=A(0,32,0|e.reverb)),null!=e.beatsPerBar&&(this.beatsPerBar=Math.max(t.beatsPerBarMin,Math.min(t.beatsPerBarMax,0|e.beatsPerBar)));let n=4;null!=e.ticksPerBeat&&(n=0|e.ticksPerBeat||4,this.rhythm=t.rhythms.findIndex((e=>e.stepsPerBeat==n)),-1==this.rhythm&&(this.rhythm=1)),null!=e.masterGain?this.masterGain=Math.max(0,Math.min(5,e.masterGain||0)):this.masterGain=1,null!=e.limitThreshold?this.limitThreshold=Math.max(0,Math.min(2,e.limitThreshold||0)):this.limitThreshold=1,null!=e.compressionThreshold?this.compressionThreshold=Math.max(0,Math.min(1.1,e.compressionThreshold||0)):this.compressionThreshold=1,null!=e.limitRise?this.limitRise=Math.max(2e3,Math.min(1e4,e.limitRise||0)):this.limitRise=4e3,null!=e.limitDecay?this.limitDecay=Math.max(1,Math.min(30,e.limitDecay||0)):this.limitDecay=4,null!=e.limitRatio?this.limitRatio=Math.max(0,Math.min(11,e.limitRatio||0)):this.limitRatio=1,null!=e.compressionRatio?this.compressionRatio=Math.max(0,Math.min(1.168,e.compressionRatio||0)):this.compressionRatio=1;let s=1,a=1,r=1;if(null!=e.channels)for(const t of e.channels)t.instruments&&(s=Math.max(s,0|t.instruments.length)),t.patterns&&(a=Math.max(a,0|t.patterns.length)),t.sequence&&(r=Math.max(r,0|t.sequence.length));null!=e.layeredInstruments?this.layeredInstruments=!!e.layeredInstruments:this.layeredInstruments=!1,null!=e.patternInstruments?this.patternInstruments=!!e.patternInstruments:this.patternInstruments=s>1,this.patternsPerChannel=Math.min(a,t.barCountMax),this.barCount=Math.min(r,t.barCountMax),null!=e.introBars&&(this.loopStart=A(0,this.barCount,0|e.introBars)),null!=e.loopBars&&(this.loopLength=A(1,this.barCount-this.loopStart+1,0|e.loopBars));const o=[],l=[],h=[];if(null!=e.channels)for(let s=0;s<e.channels.length;s++){let a=e.channels[s];const r=new ee;let u=!1,c=!1;if(null!=a.type?(u="drum"==a.type,c="mod"==a.type):u=s>=3,u?l.push(r):c?h.push(r):o.push(r),null!=a.octaveScrollBar&&(r.octave=A(0,t.pitchOctaves,1+(0|a.octaveScrollBar)),u&&(r.octave=0)),null!=a.name?r.name=a.name:r.name="",Array.isArray(a.instruments)){const e=a.instruments;for(let t=0;t<e.length&&!(t>=this.getMaxInstrumentsPerChannel());t++){const n=new Z(u,c);r.instruments[t]=n,n.fromJsonObject(e[t],u,c,!1,!1,i)}}for(let e=0;e<this.patternsPerChannel;e++){const t=new W;let i;r.patterns[e]=t,a.patterns&&(i=a.patterns[e]),null!=i&&t.fromJsonObject(i,this,r,n,u,c)}r.patterns.length=this.patternsPerChannel;for(let e=0;e<this.barCount;e++)r.bars[e]=null!=a.sequence?Math.min(this.patternsPerChannel,a.sequence[e]>>>0):0;r.bars.length=this.barCount}o.length>t.pitchChannelCountMax&&(o.length=t.pitchChannelCountMax),l.length>t.noiseChannelCountMax&&(l.length=t.noiseChannelCountMax),h.length>t.modChannelCountMax&&(h.length=t.modChannelCountMax),this.pitchChannelCount=o.length,this.noiseChannelCount=l.length,this.modChannelCount=h.length,this.channels.length=0,Array.prototype.push.apply(this.channels,o),Array.prototype.push.apply(this.channels,l),Array.prototype.push.apply(this.channels,h)}getPattern(e,t){if(t<0||t>=this.barCount)return null;const i=this.channels[e].bars[t];return 0==i?null:this.channels[e].patterns[i-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(e){return 32-Math.clz32(Math.ceil(e+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}}te.H="Dogebox2",te.T=2,te.P=9,te.O=1,te.q=6,te.R=1,te.k=3,te.S=100;class ie{constructor(){this.delayLine=null,this.allPassG=0,this.allPassGDelta=0,this.sustainFilterA1=0,this.sustainFilterA1Delta=0,this.sustainFilterA2=0,this.sustainFilterA2Delta=0,this.sustainFilterB0=0,this.sustainFilterB0Delta=0,this.sustainFilterB1=0,this.sustainFilterB1Delta=0,this.sustainFilterB2=0,this.sustainFilterB2Delta=0,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(e,i,n,s,a,r,o,l){const h=2*Math.PI*t.pickedStringDispersionCenterFreq/e.samplesPerSecond,u=this.prevDelayLength,c=n.phaseDeltas[s],f=n.phaseDeltaScales[s],p=c*Math.pow(f,a),m=2*Math.PI*c,d=2*Math.PI*p,y=2*m,v=2*d,g=Math.min(Math.PI,m*t.pickedStringDispersionFreqMult*Math.pow(h/m,t.pickedStringDispersionFreqScale)),b=Math.min(Math.PI,d*t.pickedStringDispersionFreqMult*Math.pow(h/d,t.pickedStringDispersionFreqScale)),M=2*Math.PI*t.pickedStringShelfHz/e.samplesPerSecond,w=(Math.pow(100,r)-1)/99,S=(Math.pow(100,o)-1)/99,F=1==l?.25:0,k=15.6,I=3*e.samplesPerSecond/48e3,P=Math.pow(.5,w*Math.pow(M/(m*k),1+2*F)*k),T=Math.pow(.5,S*Math.pow(M/(d*k),1+2*F)*k),q=Math.pow(P,.002),x=Math.pow(T,.002);oe.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(g),e.tempFrequencyResponse.analyze(oe.tempFilterStartCoefficients,y);const O=oe.tempFilterStartCoefficients.b[0],D=-e.tempFrequencyResponse.angle()/y;oe.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(b),e.tempFrequencyResponse.analyze(oe.tempFilterEndCoefficients,v);const R=oe.tempFilterEndCoefficients.b[0],z=-e.tempFrequencyResponse.angle()/v,H=0==l?0:1;if(0==H){const e=Math.pow(P,t.stringDecayRate),i=Math.pow(T,t.stringDecayRate);oe.tempFilterStartCoefficients.highShelf2ndOrder(M,e,.5),oe.tempFilterEndCoefficients.highShelf2ndOrder(M,i,.5)}else{const t=Math.pow(1==H?0:1,.25),i=Math.pow(I*I*m*3.3*48e3/e.samplesPerSecond,.5+F)/I/Math.pow(w,.5),n=Math.pow(I*I*d*3.3*48e3/e.samplesPerSecond,.5+F)/I/Math.pow(S,.5),s=i*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),a=n*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),r=Math.pow(2,-Math.pow(2,-Math.pow(t,.9))),o=Math.pow(2,-Math.pow(2,-Math.pow(t,.9)));oe.tempFilterStartCoefficients.lowPass2ndOrderButterworth(E(s),r),oe.tempFilterEndCoefficients.lowPass2ndOrderButterworth(E(a),o)}e.tempFrequencyResponse.analyze(oe.tempFilterStartCoefficients,y);const A=oe.tempFilterStartCoefficients.a[1],N=oe.tempFilterStartCoefficients.a[2],L=oe.tempFilterStartCoefficients.b[0]*q,C=oe.tempFilterStartCoefficients.b[1]*q,V=oe.tempFilterStartCoefficients.b[2]*q,G=-e.tempFrequencyResponse.angle()/y;e.tempFrequencyResponse.analyze(oe.tempFilterEndCoefficients,v);const $=oe.tempFilterEndCoefficients.a[1],B=oe.tempFilterEndCoefficients.a[2],W=oe.tempFilterEndCoefficients.b[0]*x,j=oe.tempFilterEndCoefficients.b[1]*x,U=oe.tempFilterEndCoefficients.b[2]*x,K=-e.tempFrequencyResponse.angle()/v,J=1/c,Q=1/p,_=Math.ceil(2*Math.max(J,Q)),Y=J-D-G,X=Q-z-K;this.prevDelayLength=Y,this.delayLengthDelta=(X-Y)/a,this.allPassG=O,this.sustainFilterA1=A,this.sustainFilterA2=N,this.sustainFilterB0=L,this.sustainFilterB1=C,this.sustainFilterB2=V,this.allPassGDelta=(R-O)/a,this.sustainFilterA1Delta=($-A)/a,this.sustainFilterA2Delta=(B-N)/a,this.sustainFilterB0Delta=(W-L)/a,this.sustainFilterB1Delta=(j-C)/a,this.sustainFilterB2Delta=(U-V)/a;const ee=Math.abs(Math.log2(Y/u))>.01,te=-1==this.delayIndex||ee;if(null==this.delayLine||this.delayLine.length<=_){const t=Math.ceil(2*e.samplesPerSecond/Z.frequencyFromPitch(12)),i=new Float32Array(oe.fittingPowerOfTwo(Math.max(t,_)));if(!te&&null!=this.delayLine){const e=this.delayLine.length-1>>0,t=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let n=0;n<this.delayLine.length;n++)i[n]=this.delayLine[t+n&e]}this.delayLine=i}const ie=this.delayLine,ne=ie.length-1>>0;if(te){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0;const t=-Y,n=Math.floor(t-J/2),s=Math.ceil(n+2*J);this.delayResetOffset=s;for(let e=n;e<=s;e++)ie[e&ne]=0;const a=i.wave,r=a.length-1,o=r/J,l=Math.min(.2*J,.003*e.samplesPerSecond),h=Math.ceil(t),u=t+J+l,c=u;let f=(h-t)*o,p=0;for(let e=h;e<=c;e++){const i=0|f,n=i%r;let s=a[n];const h=f-i;s+=(a[n+1]-s)*h;const c=(s-p)/o,m=Math.min(1,(e-t)/l)*Math.min(1,(u-e)/l),d=m*m*(3-2*m);ie[e&ne]+=c*d,p=s,f+=o}}}}class ne{constructor(){this.noteSecondsStart=0,this.noteSecondsEnd=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=t.noteSizeMax,this.noteSizeEnd=t.noteSizeMax,this.prevNoteSize=t.noteSizeMax,this.nextNoteSize=t.noteSizeMax,this.N=t.noteSizeMax,this.prevNoteSecondsStart=0,this.prevNoteSecondsEnd=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.L=t.noteSizeMax,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.envelopeStarts=[],this.envelopeEnds=[],this.V=[],this.$=0,this.lowpassCutoffDecayVolumeCompensation=1;for(let e=0;e<36;e++)this.envelopeStarts[e]=1,this.envelopeEnds[e]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this.N=t.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this.L=t.noteSizeMax,this.$=0}computeEnvelopes(e,i,n,s,a,r,o){a*=o;const l=e.getTransition();null==r||!r.atNoteStart||l.continues||r.forceContinueAtStart||(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this.L=this.N,this.noteSecondsEnd=0,this.noteTicksEnd=0),null!=r&&(null!=r.note?this.N=r.note.pins[r.note.pins.length-1].size:this.N=t.noteSizeMax);const h=n+o,u=s+1,c=this.noteSecondsEnd,f=c+a,p=this.noteTicksEnd,m=p+1,d=this.prevNoteSecondsEnd,y=d+a,v=this.prevNoteTicksEnd,g=v+1,b=1/(t.ticksPerPart*t.partsPerBeat),M=b*n,w=b*h;let S=this.N,F=this.N,k=this.L,I=0,P=!1,T=!1,q=!1,x=!1,O=0,D=0,R=0,z=0;if(null!=r&&null!=r.note&&!r.passedEndOfNote){const e=r.note.getEndPinIndex(i),n=r.note.pins[e-1],a=r.note.pins[e],o=(r.note.start+n.time)*t.ticksPerPart,h=(r.note.start+a.time)*t.ticksPerPart,c=(s-o)/(h-o),f=(u-o)/(h-o);if(S=n.size+(a.size-n.size)*c,F=n.size+(a.size-n.size)*f,l.slides){const e=r.noteStartPart*t.ticksPerPart,i=r.noteEndPart*t.ticksPerPart,n=.5*(i-e),a=Math.min(n,l.slideTicks);null==r.prevNote||r.forceContinueAtStart||(s-e<a&&(P=!0,O=.5*(1-(s-e)/a)),u-e<a&&(T=!0,D=.5*(1-(u-e)/a))),null==r.nextNote||r.forceContinueAtEnd||(I=r.nextNote.pins[0].size,i-s<a&&(q=!0,R=.5*(1-(i-s)/a)),i-u<a&&(x=!0,z=.5*(1-(i-u)/a)))}}let E=1,H=!1;for(let i=0;i<=e.envelopeCount;i++){let n,s,a;if(i==e.envelopeCount){if(H)break;n=t.instrumentAutomationTargets.dictionary.noteVolume,s=0,a=t.envelopes.dictionary["note size"]}else{let r=e.envelopes[i];n=t.instrumentAutomationTargets[r.target],s=r.index,a=t.envelopes[r.envelope],0==a.type&&(H=!0)}if(null!=n.computeIndex){const t=n.computeIndex+s;let i=ne.computeEnvelope(a,c,M,S);if(P){i+=(ne.computeEnvelope(a,d,M,k)-i)*O}if(q){i+=(ne.computeEnvelope(a,0,M,I)-i)*R}let r=i;if(0==e.discreteEnvelope){if(r=ne.computeEnvelope(a,f,w,F),T){r+=(ne.computeEnvelope(a,y,w,k)-r)*D}if(x){r+=(ne.computeEnvelope(a,0,w,I)-r)*z}}if(this.envelopeStarts[t]*=i,this.envelopeEnds[t]*=r,this.V[this.$++]=t,n.isFilter){const t=null!=e.tmpNoteFilterStart?e.tmpNoteFilterStart:e.noteFilter;t.controlPointCount>s&&0==t.controlPoints[s].type&&(E=Math.max(E,ne.getLowpassCutoffDecayVolumeCompensation(a)))}}}this.noteSecondsStart=c,this.noteSecondsEnd=f,this.noteTicksStart=p,this.noteTicksEnd=m,this.prevNoteSecondsStart=d,this.prevNoteSecondsEnd=y,this.prevNoteTicksStart=v,this.prevNoteTicksEnd=g,this.prevNoteSize=k,this.nextNoteSize=I,this.noteSizeStart=S,this.noteSizeEnd=F,this.prevSlideStart=P,this.prevSlideEnd=T,this.nextSlideStart=q,this.nextSlideEnd=x,this.prevSlideRatioStart=O,this.prevSlideRatioEnd=D,this.nextSlideRatioStart=R,this.nextSlideRatioEnd=z,this.lowpassCutoffDecayVolumeCompensation=E}clearEnvelopes(){for(let e=0;e<this.$;e++){const t=this.V[e];this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}this.$=0}static computeEnvelope(e,t,i,n){switch(e.type){case 0:return oe.noteSizeToVolumeMult(n);case 1:return 1;case 4:return 1/(1+t*e.speed);case 5:return 1-1/(1+t*e.speed);case 6:return.5-.5*Math.cos(2*i*Math.PI*e.speed);case 7:return.75-.25*Math.cos(2*i*Math.PI*e.speed);case 2:return Math.max(1,2-10*t);case 3:const s=.25/Math.sqrt(e.speed);return t<s?t/s:1/(1+(t-s)*e.speed);case 8:return Math.pow(2,-e.speed*t);case 9:return 1*+(t<.25/Math.sqrt(e.speed));case 10:const a=Math.log(e.speed)/25;return Math.max(0,Math.min(1,1-2*Math.abs((t-a)*e.speed-.5)));case 11:return 5/(1+t*e.speed*5)%1;case 12:return Math.round(.5-.5*Math.cos(2*i*Math.PI*e.speed));default:throw new Error("Unrecognized operator envelope type.")}}static computeCustomEnvelope(e,t,i,n){switch(e.endType){case 3:case 2:return 0;case 1:return e.interpolate?this.arrayInterp(e.data,t%e.data.length):e.data[Math.round(t)%e.data.length];case 0:return t>=e.data.length?e.data[e.data.length-1]:e.interpolate?this.arrayInterp(e.data,t):e.data[Math.round(t)];default:throw new Error("Unrecognized envelope end type.")}}static arrayInterp(e,t){if(e.length<2)throw new Error("Linear interpolation requires at least two values in the array.");t=Math.max(0,Math.min(e.length-1,t));const i=Math.floor(t),n=Math.ceil(t),s=e[i];return s+(t-i)*(e[n]-s)}static getLowpassCutoffDecayVolumeCompensation(e){return 8==e.type?1.25+.025*e.speed:4==e.type?1+.02*e.speed:1}}class se{constructor(){this.pitches=Array(t.maxChordSize).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.noiseSample=0,this.stringSustainStart=0,this.stringSustainEnd=0,this.phases=[],this.operatorWaves=[],this.phaseDeltas=[],this.phaseDeltaScales=[],this.expression=0,this.expressionDelta=0,this.operatorExpressions=[],this.operatorExpressionDeltas=[],this.prevPitchExpressions=Array(t.maxPitchOrOperatorCount).fill(null),this.prevVibrato=null,this.prevStringDecay=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.supersawDynamism=0,this.supersawDynamismDelta=0,this.supersawUnisonDetunes=[],this.supersawShape=0,this.supersawShapeDelta=0,this.supersawDelayLength=0,this.supersawDelayLengthDelta=0,this.supersawDelayLine=null,this.supersawDelayIndex=-1,this.supersawPrevPhaseDelta=null,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.stereoVolumeLStart=0,this.stereoVolumeRStart=0,this.stereoVolumeLDelta=0,this.stereoVolumeRDelta=0,this.stereoDelayStart=0,this.stereoDelayEnd=0,this.stereoDelayDelta=0,this.customVolumeStart=0,this.customVolumeEnd=0,this.filterResonanceStart=0,this.filterResonanceDelta=0,this.isFirstOrder=!1,this.envelopeComputer=new ne,this.reset()}reset(){this.noiseSample=0;for(let e=0;e<t.maxPitchOrOperatorCount;e++)this.phases[e]=0,this.operatorWaves[e]=t.operatorWaves[0],this.feedbackOutputs[e]=0,this.prevPitchExpressions[e]=null;for(let e=0;e<this.noteFilterCount;e++)this.noteFilters[e].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0,this.supersawDelayIndex=-1;for(const e of this.pickedStrings)e.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.supersawPrevPhaseDelta=null,this.drumsetPitch=null}}class ae{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new O,this.activeModTones=new O,this.releasedTones=new O,this.liveInputTones=new O,this.type=0,this.synthesizer=null,this.wave=null,this.noisePitchFilterMult=1,this.unison=null,this.chord=null,this.effects=0,this.volumeScale=0,this.aliases=!1,this.arpTime=0,this.vibratoTime=0,this.nextVibratoTime=0,this.envelopeTime=0,this.eqFilterVolume=1,this.eqFilterVolumeDelta=0,this.mixVolume=1,this.mixVolumeDelta=0,this.delayInputMult=0,this.delayInputMultDelta=0,this.distortion=0,this.distortionDelta=0,this.distortionDrive=0,this.distortionDriveDelta=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeL=0,this.panningVolumeR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetL=0,this.panningOffsetR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusVoiceMult=0,this.chorusVoiceMultDelta=0,this.chorusCombinedMult=0,this.chorusCombinedMultDelta=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=null,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoMult=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMult=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.invertWave=!1,this.spectrumWave=new K,this.harmonicsWave=new Q,this.drumsetSpectrumWaves=[];for(let e=0;e<t.drumCount;e++)this.drumsetSpectrumWaves[e]=new K}allocateNecessaryBuffers(e,i,n){if(M(i.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<e.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(e.panningDelayBufferSize)),w(i.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(e.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(e.chorusDelayBufferSize))),S(i.effects)){const e=Math.max(t.echoDelayRange>>1,i.echoDelay+1),s=2*oe.fittingPowerOfTwo(e*t.echoDelayStepTicks*n);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(s),this.echoDelayLineR=new Float32Array(s);else if(this.echoDelayLineL.length<s||this.echoDelayLineR.length<s){const e=new Float32Array(s),t=new Float32Array(s),i=this.echoDelayLineL.length-1;for(let n=0;n<this.echoDelayLineL.length;n++)e[n]=this.echoDelayLineL[this.echoDelayPos+n&i],t[n]=this.echoDelayLineL[this.echoDelayPos+n&i];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=e,this.echoDelayLineR=t}}F(i.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(t.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let e=0;e<this.eqFilterCount;e++)this.eqFilters[e].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let e=0;e<this.panningDelayLine.length;e++)this.panningDelayLine[e]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.volumeScale=1,this.aliases=!1,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.vibratoTime=0,this.nextVibratoTime=0,this.arpTime=0,this.envelopeTime=0,this.chorusDelayLineDirty){for(let e=0;e<this.chorusDelayLineL.length;e++)this.chorusDelayLineL[e]=0;for(let e=0;e<this.chorusDelayLineR.length;e++)this.chorusDelayLineR[e]=0}if(this.echoDelayLineDirty){for(let e=0;e<this.echoDelayLineL.length;e++)this.echoDelayLineL[e]=0;for(let e=0;e<this.echoDelayLineR.length;e++)this.echoDelayLineR[e]=0}if(this.reverbDelayLineDirty)for(let e=0;e<this.reverbDelayLine.length;e++)this.reverbDelayLine[e]=0;this.chorusPhase=0}compute(e,i,n,s,a,r,o){this.computed=!0,this.invertWave=i.invertWave,this.type=i.type,this.synthesizer=oe.getInstrumentSynthFunction(i),this.unison=t.unisons[i.unison],this.chord=i.getChord(),this.noisePitchFilterMult=t.chipNoises[i.chipNoise].pitchFilterMult,this.effects=i.effects,this.aliases=i.aliases,this.volumeScale=1,this.allocateNecessaryBuffers(e,i,n);const l=e.samplesPerSecond;this.updateWaves(i,l);const h=g(this.effects),u=b(this.effects),c=M(this.effects),f=w(this.effects),p=S(this.effects),m=F(this.effects);if(h){let n=i.distortion,a=i.distortion;e.isModActive(t.modulators.dictionary.distortion.index,r,o)&&(n=e.getModValue(t.modulators.dictionary.distortion.index,r,o,!1),a=e.getModValue(t.modulators.dictionary.distortion.index,r,o,!0));const l=Math.min(1,n/(t.distortionRange-1)),h=Math.min(1,a/(t.distortionRange-1)),u=Math.pow(1-.895*(Math.pow(20,l)-1)/19,2),c=Math.pow(1-.895*(Math.pow(20,h)-1)/19,2),f=(1+2*l)/t.distortionBaseVolume,p=(1+2*h)/t.distortionBaseVolume;this.distortion=u,this.distortionDelta=(c-u)/s,this.distortionDrive=f,this.distortionDriveDelta=(p-f)/s}if(u){let n=i.bitcrusherFreq,a=i.bitcrusherFreq;e.isModActive(t.modulators.dictionary["freq crush"].index,r,o)&&(n=e.getModValue(t.modulators.dictionary["freq crush"].index,r,o,!1),a=e.getModValue(t.modulators.dictionary["freq crush"].index,r,o,!0));let h=i.bitcrusherQuantization,u=i.bitcrusherQuantization;e.isModActive(t.modulators.dictionary["bit crush"].index,r,o)&&(h=e.getModValue(t.modulators.dictionary["bit crush"].index,r,o,!1),u=e.getModValue(t.modulators.dictionary["bit crush"].index,r,o,!0));const c=t.keys[e.song.key].basePitch,f=Z.frequencyFromPitch(c+60)*Math.pow(2,(t.bitcrusherFreqRange-1-n)*t.bitcrusherOctaveStep),p=Z.frequencyFromPitch(c+60)*Math.pow(2,(t.bitcrusherFreqRange-1-a)*t.bitcrusherOctaveStep),m=Math.min(1,f/l),d=Math.min(1,p/l);this.bitcrusherPhaseDelta=m,this.bitcrusherPhaseDeltaScale=Math.pow(d/m,1/s);const y=2*t.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(t.bitcrusherQuantizationRange-1-h))),v=2*t.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(t.bitcrusherQuantizationRange-1-u)));this.bitcrusherScale=y,this.bitcrusherScaleScale=Math.pow(v/y,1/s);const g=2*t.bitcrusherBaseVolume*Math.pow(1.5,t.bitcrusherQuantizationRange-1-h),b=2*t.bitcrusherBaseVolume*Math.pow(1.5,t.bitcrusherQuantizationRange-1-u);this.bitcrusherFoldLevel=g,this.bitcrusherFoldLevelScale=Math.pow(b/g,1/s)}let d=1;if(i.eqFilterType){const n=i.eqFilter;null==i.eqSubFilters[1]&&(i.eqSubFilters[1]=new Y);const a=i.eqSubFilters[1];let h,u=i.eqFilterSimpleCut,c=i.eqFilterSimplePeak,f=i.eqFilterSimpleCut,p=i.eqFilterSimplePeak,m=!1;if(e.isModActive(t.modulators.dictionary["eq filt cut"].index,r,o)&&(u=e.getModValue(t.modulators.dictionary["eq filt cut"].index,r,o,!1),f=e.getModValue(t.modulators.dictionary["eq filt cut"].index,r,o,!0),m=!0),e.isModActive(t.modulators.dictionary["eq filt peak"].index,r,o)&&(c=e.getModValue(t.modulators.dictionary["eq filt peak"].index,r,o,!1),p=e.getModValue(t.modulators.dictionary["eq filt peak"].index,r,o,!0),m=!0),m){n.convertLegacySettingsForSynth(u,c),a.convertLegacySettingsForSynth(f,p),h=n.controlPoints[0];let e=a.controlPoints[0];h.toCoefficients(oe.tempFilterStartCoefficients,l,1,1),e.toCoefficients(oe.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new z),this.eqFilters[0].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterEndCoefficients,1/s,0==h.type)}else n.convertLegacySettingsForSynth(u,c,!0),h=n.controlPoints[0],h.toCoefficients(oe.tempFilterStartCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new z),this.eqFilters[0].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterStartCoefficients,1/s,0==h.type);d*=h.getVolumeCompensationMult(),this.eqFilterCount=1,d=Math.min(3,d)}else{const e=null!=i.tmpEqFilterStart?i.tmpEqFilterStart:i.eqFilter;for(let t=0;t<e.controlPointCount;t++){let n=e.controlPoints[t],a=null!=i.tmpEqFilterEnd&&null!=i.tmpEqFilterEnd.controlPoints[t]?i.tmpEqFilterEnd.controlPoints[t]:e.controlPoints[t];n.type!=a.type&&(n=a),n.toCoefficients(oe.tempFilterStartCoefficients,l,1,1),a.toCoefficients(oe.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<=t&&(this.eqFilters[t]=new z),this.eqFilters[t].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterEndCoefficients,1/s,0==n.type),d*=n.getVolumeCompensationMult()}this.eqFilterCount=e.controlPointCount,d=Math.min(3,d)}const y=oe.instrumentVolumeToVolumeMult(i.volume);this.mixVolume=y;let v=y;if(e.isModActive(t.modulators.dictionary["mix volume"].index,r,o)){const i=e.getModValue(t.modulators.dictionary["mix volume"].index,r,o,!1),n=e.getModValue(t.modulators.dictionary["mix volume"].index,r,o,!0);this.mixVolume*=i<=0?(i+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(i),v*=n<=0?(n+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(n)}e.isModActive(t.modulators.dictionary["song volume"].index)&&(this.mixVolume*=e.getModValue(t.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,v*=e.getModValue(t.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(v-this.mixVolume)/s;let k=d,I=d,P=1,T=1;if(c){let n=i.pan,a=i.pan;e.isModActive(t.modulators.dictionary.pan.index,r,o)&&(n=e.getModValue(t.modulators.dictionary.pan.index,r,o,!1),a=e.getModValue(t.modulators.dictionary.pan.index,r,o,!0));let h=Math.max(-1,Math.min(1,(n-t.panCenter)/t.panCenter)),u=Math.max(-1,Math.min(1,(a-t.panCenter)/t.panCenter));const c=1.414*Math.cos((1+h)*Math.PI*.25),f=1.414*Math.cos((1-h)*Math.PI*.25),p=1.414*Math.cos((1+u)*Math.PI*.25),m=1.414*Math.cos((1-u)*Math.PI*.25),d=l*t.panDelaySecondsMax;let y=i.panDelay,v=i.panDelay;e.isModActive(t.modulators.dictionary["pan delay"].index,r,o)&&(y=e.getModValue(t.modulators.dictionary["pan delay"].index,r,o,!1),v=e.getModValue(t.modulators.dictionary["pan delay"].index,r,o,!0));const g=h*y*d/10,b=u*v*d/10,M=Math.max(0,g),w=Math.max(0,-g),S=Math.max(0,b),F=Math.max(0,-b);this.panningVolumeL=c,this.panningVolumeR=f,this.panningVolumeDeltaL=(p-c)/s,this.panningVolumeDeltaR=(m-f)/s,this.panningOffsetL=this.panningDelayPos-M+e.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-w+e.panningDelayBufferSize,this.panningOffsetDeltaL=(S-M)/s,this.panningOffsetDeltaR=(F-w)/s}if(f){let n=i.chorus,a=i.chorus;e.isModActive(t.modulators.dictionary.chorus.index,r,o)&&(n=e.getModValue(t.modulators.dictionary.chorus.index,r,o,!1),a=e.getModValue(t.modulators.dictionary.chorus.index,r,o,!0));let l=Math.min(1,n/(t.chorusRange-1)),h=Math.min(1,a/(t.chorusRange-1));l=.6*l+.4*Math.pow(l,6),h=.6*h+.4*Math.pow(h,6);const u=1/Math.sqrt(3*l*l+1),c=1/Math.sqrt(3*h*h+1);this.chorusVoiceMult=l,this.chorusVoiceMultDelta=(h-l)/s,this.chorusCombinedMult=u,this.chorusCombinedMultDelta=(c-u)/s}let q=0,x=0;if(p){let a=i.echoSustain,h=i.echoSustain;e.isModActive(t.modulators.dictionary.echo.index,r,o)&&(a=Math.max(0,e.getModValue(t.modulators.dictionary.echo.index,r,o,!1)),h=Math.max(0,e.getModValue(t.modulators.dictionary.echo.index,r,o,!0)));const u=.9*Math.min(1,Math.pow(a/t.echoSustainRange,1.1)),c=.9*Math.min(1,Math.pow(h/t.echoSustainRange,1.1));this.echoMult=u,this.echoMultDelta=Math.max(0,(c-u)/s),q=Math.max(u,c);let f=i.echoDelay,p=i.echoDelay,m=!1;e.isModActive(t.modulators.dictionary["echo delay"].index,r,o)&&(f=e.getModValue(t.modulators.dictionary["echo delay"].index,r,o,!1),p=e.getModValue(t.modulators.dictionary["echo delay"].index,r,o,!0),m=!0);const d=Math.round((f+1)*t.echoDelayStepTicks*n),y=Math.round((p+1)*t.echoDelayStepTicks*n);null==this.echoDelayOffsetEnd||m?this.echoDelayOffsetStart=d:this.echoDelayOffsetStart=this.echoDelayOffsetEnd,this.echoDelayOffsetEnd=y,x=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/l,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/s;const v=2*Math.PI*t.echoShelfHz/e.samplesPerSecond;oe.tempFilterStartCoefficients.highShelf1stOrder(v,t.echoShelfGain),this.echoShelfA1=oe.tempFilterStartCoefficients.a[1],this.echoShelfB0=oe.tempFilterStartCoefficients.b[0],this.echoShelfB1=oe.tempFilterStartCoefficients.b[1]}let O=0;if(m){let n=i.reverb,a=i.reverb;e.isModActive(t.modulators.dictionary.reverb.index,r,o)&&(n=e.getModValue(t.modulators.dictionary.reverb.index,r,o,!1),a=e.getModValue(t.modulators.dictionary.reverb.index,r,o,!0)),e.isModActive(t.modulators.dictionary["song reverb"].index,r,o)&&(n*=(e.getModValue(t.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-t.modulators.dictionary["song reverb"].convertRealFactor)/t.reverbRange,a*=(e.getModValue(t.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-t.modulators.dictionary["song reverb"].convertRealFactor)/t.reverbRange);const l=.425*Math.min(1,Math.pow(n/t.reverbRange,.667)),h=.425*Math.min(1,Math.pow(a/t.reverbRange,.667));this.reverbMult=l,this.reverbMultDelta=(h-l)/s,O=Math.max(l,h);const u=2*Math.PI*t.reverbShelfHz/e.samplesPerSecond;oe.tempFilterStartCoefficients.highShelf1stOrder(u,t.reverbShelfGain),this.reverbShelfA1=oe.tempFilterStartCoefficients.a[1],this.reverbShelfB0=oe.tempFilterStartCoefficients.b[0],this.reverbShelfB1=oe.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){k=0,I=0,P=0,T=0;let i=0;f&&(i+=e.chorusDelayBufferSize),p&&(i+=this.echoDelayLineL.length),m&&(i+=t.reverbDelayBufferSize),this.flushedSamples+=s,this.flushedSamples>=i&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress||(k=0),I=0;const e=1/256,i=-Math.log2(e);let s=0;if(f&&(s+=t.chorusMaxDelay),p){const e=Math.pow(q,1/x);s+=-1/Math.log2(e)*i}if(m){const e=2*O,n=t.reverbDelayBufferSize/4/l,a=Math.pow(e,1/n);s+=-1/Math.log2(a)*i}const a=n/l/s,r=this.attentuationProgress+a;r>=1&&(T=0),this.attentuationProgress=r,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=k,this.eqFilterVolumeDelta=(I-k)/s,this.delayInputMult=P,this.delayInputMultDelta=(T-P)/s}updateWaves(e,i){if(this.volumeScale=1,0==e.type)this.wave=this.aliases?t.rawChipWaves[e.chipWave].samples:t.chipWaves[e.chipWave].samples;else if(9==e.type)this.wave=this.aliases?e.customChipWave:e.customChipWaveIntegral,this.volumeScale=.05;else if(2==e.type)this.wave=r(e.chipNoise,x,T);else if(5==e.type)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type);else if(7==e.type)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type);else if(3==e.type)this.wave=this.spectrumWave.getCustomWave(e.spectrumWave,8);else if(4==e.type){for(let i=0;i<t.drumCount;i++)this.drumsetSpectrumWaves[i].getCustomWave(e.drumsetSpectrumWaves[i],ae.W(i));this.wave=null}else this.wave=null}getDrumsetWave(e){if(4==this.type)return this.drumsetSpectrumWaves[e].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}static drumsetIndexReferenceDelta(e){return Z.frequencyFromPitch(t.spectrumBasePitch+6*e)/44100}static W(e){return 15+Math.log2(ae.drumsetIndexReferenceDelta(e))}}class re{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class oe{constructor(e=null){this.samplesPerSecond=44100,this.song=null,this.preferLowerLatency=!1,this.anticipatePoorPerformance=!1,this.liveInputDuration=0,this.liveBassInputDuration=0,this.liveInputStarted=!1,this.liveBassInputStarted=!1,this.liveInputPitches=[],this.liveBassInputPitches=[],this.liveInputChannel=0,this.liveBassInputChannel=0,this.liveInputInstruments=[],this.liveBassInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.enableMetronome=!1,this.countInMetronome=!1,this.renderingSong=!1,this.heldMods=[],this.wantToSkip=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.modValues=[],this.modInsValues=[],this.nextModValues=[],this.nextModInsValues=[],this.isPlayingSong=!1,this.isRecording=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new _,this.tempFrequencyResponse=new R,this.loopBar=-1,this.channels=[],this.tonePool=new O,this.tempMatchedPitchTones=Array(t.maxChordSize).fill(null),this.startedMetronome=!1,this.metronomeSamplesRemaining=-1,this.metronomeAmplitude=0,this.metronomePrevAmplitude=0,this.metronomeFilter=0,this.limit=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=e=>{const t=e.outputBuffer,i=t.getChannelData(0),n=t.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==i[0]&&0==n[0]&&0==i[t.length-1]&&0==n[t.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const e=t.length;for(let t=0;t<e;t++)i[t]=0,n[t]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():this.synthesize(i,n,t.length,this.isPlayingSong)},this.computeDelayBufferSizes(),null!=e&&this.setSong(e)}syncSongState(){const e=this.song.getChannelCount();for(let t=this.channels.length;t<e;t++)this.channels[t]=new re;this.channels.length=e;for(let t=0;t<e;t++){const e=this.song.channels[t],i=this.channels[t];for(let t=i.instruments.length;t<e.instruments.length;t++)i.instruments[t]=new ae;if(i.instruments.length=e.instruments.length,i.muted!=e.muted&&(i.muted=e.muted,i.muted))for(const e of i.instruments)e.resetAllEffects()}}initModFilters(e){if(null!=e)for(let t=0;t<e.getChannelCount();t++)for(let i=0;i<e.channels[t].instruments.length;i++){const n=e.channels[t].instruments[i];n.tmpEqFilterStart=n.eqFilter,n.tmpEqFilterEnd=null,n.tmpNoteFilterStart=n.noteFilter,n.tmpNoteFilterEnd=null}}warmUpSynthesizer(e){if(null!=e){this.syncSongState();const t=this.getSamplesPerTick();for(let i=0;i<e.getChannelCount();i++)for(let n=0;n<e.channels[i].instruments.length;n++){const s=e.channels[i].instruments[n],a=this.channels[i].instruments[n];oe.getInstrumentSynthFunction(s),a.vibratoTime=0,a.nextVibratoTime=0,a.envelopeTime=0,a.arpTime=0,a.updateWaves(s,this.samplesPerSecond),a.allocateNecessaryBuffers(this,s,t)}}var t=new Float32Array(1);this.isPlayingSong=!0,this.synthesize(t,t,1,!0),this.isPlayingSong=!1}computeLatestModValues(){if(null!=this.song&&this.song.modChannelCount>0){let e=[],i=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[],this.heldMods=[];for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++){i[e]=[],this.modInsValues[e]=[],this.nextModInsValues[e]=[];for(let t=0;t<this.song.channels[e].instruments.length;t++)this.modInsValues[e][t]=[],this.nextModInsValues[e][t]=[],i[e][t]=[]}let n=this.beat*t.partsPerBeat+this.part;for(let s=this.song.pitchChannelCount+this.song.noiseChannelCount;s<this.song.getChannelCount();s++)if(!this.song.channels[s].muted){let a;for(let r=this.bar;r>=0;r--)if(a=this.song.getPattern(s,r),null!=a){let o=a.instruments[0],l=this.song.channels[s].instruments[o],h=[],u=[],c=r==this.bar?n:this.findPartsInBar(r);for(const e of a.notes)if(e.start<=c&&(null==h[t.modCount-1-e.pitches[0]]||e.end>h[t.modCount-1-e.pitches[0]]))if(e.start==c&&(h[t.modCount-1-e.pitches[0]]=e.start,u[t.modCount-1-e.pitches[0]]=e.pins[0].size),e.end<=c)h[t.modCount-1-e.pitches[0]]=e.end,u[t.modCount-1-e.pitches[0]]=e.pins[e.pins.length-1].size;else{h[t.modCount-1-e.pitches[0]]=c;for(let i=0;i<e.pins.length;i++)if(e.pins[i].time+e.start>c){const n=e.pins[i].time-e.pins[i-1].time,s=c-e.start-e.pins[i-1].time,a=e.pins[i].size-e.pins[i-1].size;u[t.modCount-1-e.pitches[0]]=Math.round(e.pins[i-1].size+a*s/n),i=e.pins.length}}for(let n=0;n<t.modCount;n++)if(null!=h[n])if(t.modulators[l.modulators[n]].forSong)(null==e[l.modulators[n]]||r*t.partsPerBeat*this.song.beatsPerBar+h[n]>e[l.modulators[n]])&&(this.setModValue(u[n],u[n],l.modChannels[n],l.modInstruments[n],l.modulators[n]),e[l.modulators[n]]=r*t.partsPerBeat*this.song.beatsPerBar+h[n]);else{let e=[];if(l.modInstruments[n]==this.song.channels[l.modChannels[n]].instruments.length)for(let t=0;t<this.song.channels[l.modChannels[n]].instruments.length;t++)e.push(t);else if(l.modInstruments[n]>this.song.channels[l.modChannels[n]].instruments.length){const t=this.song.getPattern(l.modChannels[n],r);null!=t&&(e=t.instruments)}else e.push(l.modInstruments[n]);for(let s=0;s<e.length;s++){const a=l.modulators[n]==t.modulators.dictionary["eq filter"].index,o=l.modulators[n]==t.modulators.dictionary["note filter"].index;let c=l.modulators[n];if(a?c=t.modulators.length+(0|l.modFilterTypes[n]):o&&(c=t.modulators.length+1+2*t.filterMaxPoints+(0|l.modFilterTypes[n])),null==i[l.modChannels[n]][e[s]][c]||r*t.partsPerBeat*this.song.beatsPerBar+h[n]>i[l.modChannels[n]][e[s]][c]){if(a){let i=this.song.channels[l.modChannels[n]].instruments[e[s]];if(0==l.modFilterTypes[n])i.tmpEqFilterStart=i.eqSubFilters[u[n]];else{for(let e=0;e<t.filterMorphCount;e++)null!=i.tmpEqFilterStart&&i.tmpEqFilterStart==i.eqSubFilters[e]&&(i.tmpEqFilterStart=new Y,i.tmpEqFilterStart.fromJsonObject(i.eqSubFilters[e].toJsonObject()),e=t.filterMorphCount);null!=i.tmpEqFilterStart&&Math.floor((l.modFilterTypes[n]-1)/2)<i.tmpEqFilterStart.controlPointCount&&(l.modFilterTypes[n]%2?i.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].freq=u[n]:i.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].gain=u[n])}i.tmpEqFilterEnd=i.tmpEqFilterStart}else if(o){let i=this.song.channels[l.modChannels[n]].instruments[e[s]];if(0==l.modFilterTypes[n])i.tmpNoteFilterStart=i.noteSubFilters[u[n]];else{for(let e=0;e<t.filterMorphCount;e++)null!=i.tmpNoteFilterStart&&i.tmpNoteFilterStart==i.noteSubFilters[e]&&(i.tmpNoteFilterStart=new Y,i.tmpNoteFilterStart.fromJsonObject(i.noteSubFilters[e].toJsonObject()),e=t.filterMorphCount);null!=i.tmpNoteFilterStart&&Math.floor((l.modFilterTypes[n]-1)/2)<i.tmpNoteFilterStart.controlPointCount&&(l.modFilterTypes[n]%2?i.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].freq=u[n]:i.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[n]-1)/2)].gain=u[n])}i.tmpNoteFilterEnd=i.tmpNoteFilterStart}else this.setModValue(u[n],u[n],l.modChannels[n],e[s],c);i[l.modChannels[n]][e[s]][c]=r*t.partsPerBeat*this.song.beatsPerBar+h[n]}}}}}}}determineInvalidModulators(e){if(null!=this.song)for(let i=0;i<t.modCount;i++){if(e.invalidModulators[i]=!0,-1==e.modChannels[i]){0!=e.modulators[i]&&(e.invalidModulators[i]=!1);continue}const n=this.song.channels[e.modChannels[i]];if(null==n)continue;let s=[];s=e.modInstruments[i]>=n.instruments.length?n.instruments:[n.instruments[e.modInstruments[i]]];for(let n=0;n<s.length;n++){const a=s[n];if(null==a)continue;const r=t.modulators[e.modulators[i]].name;14!=t.modulators[e.modulators[i]].associatedEffect&&!(a.effects&1<<t.modulators[e.modulators[i]].associatedEffect)||1!=a.type&&("fm slider 1"==r||"fm slider 2"==r||"fm slider 3"==r||"fm slider 4"==r||"fm feedback"==r)||6!=a.type&&8!=a.type&&"pulse width"==r||8!=a.type&&("dynamism"==r||"spread"==r||"saw shape"==r)||!a.getChord().arpeggiates&&("arp speed"==r||"reset arp"==r)||a.eqFilterType&&"eq filter"==r||!a.eqFilterType&&("eq filt cut"==r||"eq filt peak"==r)||"eq filter"==r&&Math.floor((e.modFilterTypes[i]+1)/2)>a.getLargestControlPointCount(!1)||a.noteFilterType&&"note filter"==r||!a.noteFilterType&&("note filt cut"==r||"note filt peak"==r)||"note filter"==r&&Math.floor((e.modFilterTypes[i]+1)/2)>a.getLargestControlPointCount(!0)||(e.invalidModulators[i]=!1,n=s.length)}}}static operatorAmplitudeCurve(e){return(Math.pow(16,e/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(e){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,e));let i=this.playheadInternal;this.bar=Math.floor(i),i=this.song.beatsPerBar*(i-this.bar),this.beat=Math.floor(i),i=t.partsPerBeat*(i-this.beat),this.part=Math.floor(i),i=t.ticksPerPart*(i-this.part),this.tick=Math.floor(i),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*t.ticksPerPart*t.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*t.partsPerBeat+this.part)*t.ticksPerPart+this.tick}getCurrentPart(){return this.beat*t.partsPerBeat+this.part}findPartsInBar(e){if(null==this.song)return 0;let i=t.partsPerBeat*this.song.beatsPerBar;for(let n=this.song.pitchChannelCount+this.song.noiseChannelCount;n<this.song.getChannelCount();n++){let s=this.song.getPattern(n,e);if(null!=s){let e=this.song.channels[n].instruments[s.instruments[0]];for(let n=0;n<t.modCount;n++)if(e.modulators[n]==t.modulators.dictionary["next bar"].index)for(const e of s.notes)e.pitches[0]==t.modCount-1-n&&i>e.start&&(i=e.start)}}return i}getTotalSamples(e,i,n){if(null==this.song)return-1;let s=e?0:this.song.loopStart,a=i?this.song.barCount:this.song.loopStart+this.song.loopLength,r=!1,o=!1,l=this.song.tempo;for(let e=this.song.getChannelCount()-1;e>=this.song.pitchChannelCount+this.song.noiseChannelCount;e--)for(let i=s;i<a;i++){let n=this.song.getPattern(e,i);if(null!=n){let i=this.song.channels[e].instruments[n.instruments[0]];for(let e=0;e<t.modCount;e++)i.modulators[e]==t.modulators.dictionary.tempo.index&&(r=!0),i.modulators[e]==t.modulators.dictionary["next bar"].index&&(o=!0)}}if(s>0){let e=null,i=0;for(let n=s-1;n>=0;n--){for(let s=this.song.getChannelCount()-1;s>=this.song.pitchChannelCount+this.song.noiseChannelCount;s--){let a=this.song.getPattern(s,n);if(null!=a){let r=a.instruments[0],o=this.song.channels[s].instruments[r],l=this.findPartsInBar(n);for(const n of a.notes)if(o.modulators[t.modCount-1-n.pitches[0]]==t.modulators.dictionary.tempo.index&&n.start<l&&(null==e||n.end>e))if(n.end<=l)e=n.end,i=n.pins[n.pins.length-1].size;else{e=l;for(let e=0;e<n.pins.length;e++)if(n.pins[e].time+n.start>l){const t=n.pins[e].time-n.pins[e-1].time,s=l-n.start-n.pins[e-1].time,a=n.pins[e].size-n.pins[e-1].size;i=Math.round(n.pins[e-1].size+a*s/t),e=n.pins.length}}}}null!=e&&(l=i+t.modulators.dictionary.tempo.convertRealFactor,n=-1)}}if(r||o){let e=s,i=!1,h=0;for(;!i;){let s=t.partsPerBeat*this.song.beatsPerBar,u=0;if(o&&(s=this.findPartsInBar(e)),r){let i=!1;for(let n=this.song.getChannelCount()-1;n>=this.song.pitchChannelCount+this.song.noiseChannelCount;n--)if(0==i){let a=this.song.getPattern(n,e);if(null!=a){let e=this.song.channels[n].instruments[a.instruments[0]];for(let n=0;n<t.modCount;n++)if(0==i&&e.modulators[n]==t.modulators.dictionary.tempo.index&&a.notes.find((e=>e.pitches[0]==t.modCount-1-n))){i=!0,a.notes.sort((function(e,t){return e.start==t.start?e.pitches[0]-t.pitches[0]:e.start-t.start}));for(const e of a.notes)if(e.pitches[0]==t.modCount-1-n&&(h+=Math.min(s-u,e.start-u)*t.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),e.start<s))for(let i=1;i<e.pins.length;i++){if(e.pins[i-1].time+e.start<=s){const n=t.ticksPerPart*Math.min(s-(e.start+e.pins[i-1].time),e.pins[i].time-e.pins[i-1].time),a=e.pins[i-1].size+t.modulators.dictionary.tempo.convertRealFactor;let r=e.pins[i].size+t.modulators.dictionary.tempo.convertRealFactor;e.pins[i].time+e.start>s&&(r=e.pins[i-1].size+(e.pins[i].size-e.pins[i-1].size)*(s-(e.start+e.pins[i-1].time))/(e.pins[i].time-e.pins[i-1].time)+t.modulators.dictionary.tempo.convertRealFactor);let o=t.partsPerBeat*t.ticksPerPart/60;h+=r!=a?-this.samplesPerSecond*n*(Math.log(o*r*n)-Math.log(o*a*n))/(o*(a-r)):n*this.getSamplesPerTickSpecificBPM(r),l=r}u=Math.min(e.start+e.pins[i].time,s)}}}}}h+=(s-u)*t.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),e++,0!=n&&e==this.song.loopStart+this.song.loopLength&&(e=this.song.loopStart,n>0&&n--),e>=a&&(i=!0)}return Math.ceil(h)}return this.getSamplesPerBar()*this.getTotalBars(e,i,n)}getTotalBars(e,t,i=this.loopRepeatCount){if(null==this.song)throw new Error;let n=this.song.loopLength*(i+1);return e&&(n+=this.song.loopStart),t&&(n+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),n}setSong(e){"string"==typeof e?this.song=new te(e):e instanceof te&&(this.song=e),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=oe.fittingPowerOfTwo(this.samplesPerSecond*t.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=oe.fittingPowerOfTwo(this.samplesPerSecond*t.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const e=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(null==this.audioCtx||null==this.scriptNode||this.scriptNode.bufferSize!=e){null!=this.scriptNode&&this.deactivateAudio();const t=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:t}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(e,0,2):this.audioCtx.createJavaScriptNode(e,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.initModFilters(this.song),this.computeLatestModValues(),this.activateAudio(),this.warmUpSynthesizer(this.song),this.isPlayingSong=!0)}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1,this.modValues=[],this.nextModValues=[],this.heldMods=[],null!=this.song)){this.song.inVolumeCap=0,this.song.outVolumeCap=0;for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)this.modInsValues[e]=[],this.nextModInsValues[e]=[]}}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const e of this.channels)for(const t of e.instruments)t.resetAllEffects()}setModValue(e,i,n,s,a){let r=e+t.modulators[a].convertRealFactor,o=i+t.modulators[a].convertRealFactor;return t.modulators[a].forSong?null!=this.modValues[a]&&this.modValues[a]==r&&this.nextModValues[a]==o||(this.modValues[a]=r,this.nextModValues[a]=o):null!=this.modInsValues[n][s][a]&&this.modInsValues[n][s][a]==r&&this.nextModInsValues[n][s][a]==o||(this.modInsValues[n][s][a]=r,this.nextModInsValues[n][s][a]=o),r}getModValue(e,i,n,s){if(t.modulators[e].forSong){if(null!=this.modValues[e]&&null!=this.nextModValues[e])return s?this.nextModValues[e]:this.modValues[e]}else if(null!=i&&null!=n&&null!=this.modInsValues[i][n][e]&&null!=this.nextModInsValues[i][n][e])return s?this.nextModInsValues[i][n][e]:this.modInsValues[i][n][e];return-1}isAnyModActive(e,i){for(let n=0;n<t.modulators.length;n++)if(null!=this.modValues&&null!=this.modValues[n]||null!=this.modInsValues&&null!=this.modInsValues[e]&&null!=this.modInsValues[e][i]&&null!=this.modInsValues[e][i][n])return!0;return!1}unsetMod(e,t,i){if(this.isModActive(e)||null!=t&&null!=i&&this.isModActive(e,t,i)){this.modValues[e]=null,this.nextModValues[e]=null;for(let n=0;n<this.heldMods.length;n++)null!=t&&null!=i?this.heldMods[n].channelIndex==t&&this.heldMods[n].instrumentIndex==i&&this.heldMods[n].setting==e&&this.heldMods.splice(n,1):this.heldMods[n].setting==e&&this.heldMods.splice(n,1);null!=t&&null!=i&&(this.modInsValues[t][i][e]=null,this.nextModInsValues[t][i][e]=null)}}isFilterModActive(e,t,i){const n=this.song.channels[t].instruments[i];if(e){if(n.noteFilterType)return!1;if(null!=n.tmpNoteFilterEnd)return!0}else{if(n.eqFilterType)return!1;if(null!=n.tmpEqFilterEnd)return!0}return!1}isModActive(e,i,n){return t.modulators[e].forSong?null!=this.modValues&&null!=this.modValues[e]:null!=i&&null!=n&&null!=this.modInsValues&&null!=this.modInsValues[i]&&null!=this.modInsValues[i][n]&&null!=this.modInsValues[i][n][e]}forceHoldMods(e,t,i,n){let s=!1;for(let a=0;a<this.heldMods.length;a++)this.heldMods[a].channelIndex==t&&this.heldMods[a].instrumentIndex==i&&this.heldMods[a].setting==n&&(this.heldMods[a].volume=e,this.heldMods[a].holdFor=24,s=!0);s||this.heldMods.push({volume:e,channelIndex:t,instrumentIndex:i,setting:n,holdFor:24})}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(e){this.bar=e,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const e=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const e=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const e=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}getNextBar(){let e=this.bar+1;return this.isRecording?e>=this.song.barCount&&(e=this.song.barCount-1):this.bar!=this.loopBar||this.renderingSong?0!=this.loopRepeatCount&&e==this.song.loopStart+this.song.loopLength&&(e=this.song.loopStart):e=this.bar,e}skipBar(){if(!this.song)return;const e=this.getSamplesPerTick();this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=e,this.isAtStartOfTick=!0,0!=this.loopRepeatCount&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)}synthesize(e,i,n,s=!0){if(null==this.song){for(let t=0;t<n;t++)e[t]=0,i[t]=0;return void this.deactivateAudio()}const a=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let r=this.getSamplesPerTick(),o=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>r)&&(this.tickSampleCountdown=r,this.isAtStartOfTick=!0),s&&(this.beat>=a.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=r,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<n)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(n));const l=+this.volume,h=1-Math.pow(.5,this.song.limitDecay/this.samplesPerSecond),u=1-Math.pow(.5,this.song.limitRise/this.samplesPerSecond);let c=+this.limit,f=[],p=-1,m=0;for(;m<n&&!o;){this.nextBar=this.getNextBar(),this.nextBar>=a.barCount&&(this.nextBar=null);const d=n-m,y=Math.ceil(this.tickSampleCountdown),v=Math.min(y,d),g=m+v;if(this.isPlayingSong||this.renderingSong){for(let e=a.pitchChannelCount+a.noiseChannelCount;e<a.getChannelCount();e++){const i=a.channels[e],n=this.channels[e];this.determineCurrentActiveTones(a,e,r,s);for(let s=0;s<i.instruments.length;s++){const i=n.instruments[s];for(let n=0;n<i.activeModTones.count();n++){const s=i.activeModTones.get(n),o=a.channels[e].instruments[s.instrumentIndex];let l=t.modCount-1-s.pitches[0];(o.modulators[l]==t.modulators.dictionary["note filter"].index||o.modulators[l]==t.modulators.dictionary["eq filter"].index)&&null!=o.modFilterTypes[l]&&o.modFilterTypes[l]>0||this.playModTone(a,e,r,m,v,s,!1,!1)}}}for(let e=a.pitchChannelCount+a.noiseChannelCount;e<a.getChannelCount();e++){const i=a.channels[e],n=this.channels[e];for(let s=0;s<i.instruments.length;s++){const i=n.instruments[s];for(let n=0;n<i.activeModTones.count();n++){const s=i.activeModTones.get(n),o=a.channels[e].instruments[s.instrumentIndex];let l=t.modCount-1-s.pitches[0];(o.modulators[l]==t.modulators.dictionary["note filter"].index||o.modulators[l]==t.modulators.dictionary["eq filter"].index)&&null!=o.modFilterTypes[l]&&o.modFilterTypes[l]>0&&this.playModTone(a,e,r,m,v,s,!1,!1)}}}}if(this.wantToSkip){let e=f.includes(this.bar);if(e&&m==p)return;-1==p&&(p=m),e||f.push(this.bar),this.wantToSkip=!1,this.skipBar()}else{for(let n=0;n<a.pitchChannelCount+a.noiseChannelCount;n++){const o=a.channels[n],l=this.channels[n];this.isAtStartOfTick&&(this.determineCurrentActiveTones(a,n,r,s&&!this.countInMetronome),this.determineLiveInputTones(a,n,r));for(let s=0;s<o.instruments.length;s++){const h=o.instruments[s],u=l.instruments[s];if(this.isAtStartOfTick){let e=u.activeTones.count()+u.liveInputTones.count();for(let i=0;i<u.releasedTones.count();i++){const s=u.releasedTones.get(i);if(s.ticksSinceReleased>=Math.abs(h.getFadeOutTicks())){this.freeReleasedTone(u,i),i--;continue}const o=e>=t.maximumTonesPerChannel;this.computeTone(a,n,r,s,!0,o),e++}u.awake&&(u.computed||u.compute(this,h,r,Math.ceil(r),null,n,s),u.computed=!1)}for(let e=0;e<u.activeTones.count();e++){const t=u.activeTones.get(e);this.playTone(n,m,v,t)}for(let e=0;e<u.liveInputTones.count();e++){const t=u.liveInputTones.get(e);this.playTone(n,m,v,t)}for(let e=0;e<u.releasedTones.count();e++){const t=u.releasedTones.get(e);this.playTone(n,m,v,t)}u.awake&&oe.effectsSynth(this,e,i,m,v,u);const c=this.tickSampleCountdown,f=1-c/r,p=1-(c-v)/r,d=(this.beat*t.partsPerBeat+this.part)*t.ticksPerPart+this.tick,y=d/t.ticksPerPart,g=(d+1)/t.ticksPerPart,b=y+(g-y)*f,M=y+(g-y)*p;let w=h.vibratoSpeed;u.vibratoTime=u.nextVibratoTime,this.isModActive(t.modulators.dictionary["vibrato speed"].index,n,s)&&(w=this.getModValue(t.modulators.dictionary["vibrato speed"].index,n,s)),0==w?(u.vibratoTime=0,u.nextVibratoTime=0):u.nextVibratoTime+=.1*w*(M-b)}}if(this.enableMetronome||this.countInMetronome)if(0==this.part){if(!this.startedMetronome){const e=a.beatsPerBar>4&&a.beatsPerBar%2==0&&this.beat==a.beatsPerBar/2,t=0==this.beat?8:e?6:4,i=0==this.beat?1600:e?1200:800,n=0==this.beat?.06:e?.05:.04,s=this.samplesPerSecond/i,r=2*Math.PI/s;this.metronomeSamplesRemaining=Math.floor(s*t),this.metronomeFilter=2*Math.cos(r),this.metronomeAmplitude=n*Math.sin(r),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const t=Math.min(g,m+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=t-m;for(let n=m;n<t;n++){e[n]+=this.metronomeAmplitude,i[n]+=this.metronomeAmplitude;const t=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=t}}}else this.startedMetronome=!1;for(let t=m;t<g;t++){const n=e[t]*a.masterGain*a.masterGain,s=i[t]*a.masterGain*a.masterGain,r=n<0?-n:n,o=s<0?-s:s,f=r>o?r:o;this.song.inVolumeCap=this.song.inVolumeCap>f?this.song.inVolumeCap:f;const p=+(f>a.compressionThreshold)+ +(f>a.limitThreshold),m=+(0==p)*((.8*(f+1-a.compressionThreshold)+.25)*a.compressionRatio+1.05*(1-a.compressionRatio))+1.05*+(1==p)+ +(2==p)*(1.05*((f+1-a.limitThreshold)*a.limitRatio+(1-a.limitThreshold)));c+=(m-c)*(c<m?u:h);const d=l/(c>=1?1.05*c:.8*c+.25);e[t]=n*d,i[t]=s*d,this.song.outVolumeCap=this.song.outVolumeCap>f*d?this.song.outVolumeCap:f*d}if(m+=v,this.isAtStartOfTick=!1,this.tickSampleCountdown-=v,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const e of this.channels)for(const t of e.instruments){for(let e=0;e<t.releasedTones.count();e++){const i=t.releasedTones.get(e);i.isOnLastTick?(this.freeReleasedTone(t,e),e--):i.ticksSinceReleased++}t.deactivateAfterThisTick&&t.deactivate(),t.tonesAddedInThisTick=!1}for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let i=0;i<this.song.channels[e].instruments.length;i++){let n=this.song.channels[e].instruments[i],s=this.channels[e].instruments[i],a=n.arpeggioSpeed;this.isModActive(t.modulators.dictionary["arp speed"].index,e,i)?(a=Math.max(0,Math.min(t.arpSpeedScale.length-1,this.getModValue(t.modulators.dictionary["arp speed"].index,e,i,!1))),Number.isInteger(a)?s.arpTime+=t.arpSpeedScale[a]:s.arpTime+=(1-a%1)*t.arpSpeedScale[Math.floor(a)]+a%1*t.arpSpeedScale[Math.ceil(a)]):s.arpTime+=t.arpSpeedScale[a];let r=n.envelopeSpeed;this.isModActive(t.modulators.dictionary["envelope speed"].index,e,i)?(r=Math.max(0,Math.min(t.arpSpeedScale.length-1,this.getModValue(t.modulators.dictionary["envelope speed"].index,e,i,!1))),Number.isInteger(r)?s.envelopeTime+=t.arpSpeedScale[r]:s.envelopeTime+=(1-r%1)*t.arpSpeedScale[Math.floor(r)]+r%1*t.arpSpeedScale[Math.ceil(r)]):s.envelopeTime+=t.arpSpeedScale[r]}for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let t=0;t<this.song.channels[e].instruments.length;t++){let i=this.song.channels[e].instruments[t];null!=i.tmpEqFilterEnd?i.tmpEqFilterStart=i.tmpEqFilterEnd:i.tmpEqFilterStart=i.eqFilter,null!=i.tmpNoteFilterEnd?i.tmpNoteFilterStart=i.tmpNoteFilterEnd:i.tmpNoteFilterStart=i.noteFilter}if(this.tick++,this.tickSampleCountdown+=r,this.tick==t.ticksPerPart){this.tick=0,this.part++,this.liveInputDuration--,this.liveBassInputDuration--;for(let e=0;e<this.heldMods.length;e++)this.heldMods[e].holdFor--,this.heldMods[e].holdFor<=0&&this.heldMods.splice(e,1);this.part==t.partsPerBeat&&(this.part=0,s&&(this.beat++,this.beat==a.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.resetEffects(),this.pause()))))))}}for(let e=0;e<t.modulators.length;e++)null!=this.nextModValues&&null!=this.nextModValues[e]&&(this.modValues[e]=this.nextModValues[e]);this.isModActive(t.modulators.dictionary.tempo.index)&&(r=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,r));for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let i=0;i<this.channels[e].instruments.length;i++){const n=this.channels[e].instruments[i],s=this.song.channels[e].instruments[i];n.nextVibratoTime=n.nextVibratoTime%(t.vibratoTypes[s.vibratoType].period/(t.ticksPerPart*r/this.samplesPerSecond)),n.arpTime=n.arpTime%(2520*t.ticksPerArpeggio),n.envelopeTime=n.envelopeTime%(t.partsPerBeat*t.ticksPerPart*this.song.beatsPerBar)}for(let e=0;e<t.modulators.length;e++)for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let i=0;i<this.song.getMaxInstrumentsPerChannel();i++)null!=this.nextModInsValues&&null!=this.nextModInsValues[t]&&null!=this.nextModInsValues[t][i]&&null!=this.nextModInsValues[t][i][e]&&(this.modInsValues[t][i][e]=this.nextModInsValues[t][i][e])}}(!Number.isFinite(c)||Math.abs(c)<H)&&(c=0),this.limit=c,s&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/r)/2+this.part)/t.partsPerBeat+this.beat)/a.beatsPerBar+this.bar)}freeTone(e){this.tonePool.pushBack(e)}newTone(){if(this.tonePool.count()>0){const e=this.tonePool.popBack();return e.freshlyAllocated=!0,e}return new se}releaseTone(e,t){e.releasedTones.pushFront(t),t.atNoteStart=!1,t.passedEndOfNote=!0}freeReleasedTone(e,t){this.freeTone(e.releasedTones.get(t)),e.releasedTones.remove(t)}freeAllTones(){for(const e of this.channels)for(const t of e.instruments){for(;t.activeTones.count()>0;)this.freeTone(t.activeTones.popBack());for(;t.activeModTones.count()>0;)this.freeTone(t.activeModTones.popBack());for(;t.releasedTones.count()>0;)this.freeTone(t.releasedTones.popBack());for(;t.liveInputTones.count()>0;)this.freeTone(t.liveInputTones.popBack())}}determineLiveInputTones(e,t,i){const n=e.channels[t],s=this.channels[t],a=this.liveInputPitches,r=this.liveBassInputPitches;for(let o=0;o<n.instruments.length;o++){const l=s.instruments[o],h=l.liveInputTones;let u=0;const c=n.instruments[o],f=a.filter((e=>e>=c.lowerNoteLimit&&e<=c.upperNoteLimit));if(this.liveInputDuration>0&&t==this.liveInputChannel&&a.length>0&&-1!=this.liveInputInstruments.indexOf(o))if(c.getChord().singleTone){let n;h.count()<=u?(n=this.newTone(),h.pushBack(n)):!c.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,h.get(u)),n=this.newTone(),h.set(u,n)):n=h.get(u),u++;for(let e=0;e<f.length;e++)n.pitches[e]=f[e];n.pitchCount=f.length,n.chordSize=1,n.instrumentIndex=o,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1,this.computeTone(e,t,i,n,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(h,f);for(let n=0;n<f.length;n++){let s;null!=this.tempMatchedPitchTones[u]?(s=this.tempMatchedPitchTones[u],this.tempMatchedPitchTones[u]=null,1==s.pitchCount&&s.pitches[0]==f[n]||(this.releaseTone(l,s),s=this.newTone()),h.pushBack(s)):(s=this.newTone(),h.pushBack(s)),u++,s.pitches[0]=f[n],s.pitchCount=1,s.chordSize=f.length,s.instrumentIndex=o,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,i,s,!1,!1)}}if(this.liveBassInputDuration>0&&t==this.liveBassInputChannel&&r.length>0&&-1!=this.liveBassInputInstruments.indexOf(o)){const s=n.instruments[o];if(s.getChord().singleTone){let n;h.count()<=u?(n=this.newTone(),h.pushBack(n)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,h.get(u)),n=this.newTone(),h.set(u,n)):n=h.get(u),u++;for(let e=0;e<r.length;e++)n.pitches[e]=r[e];n.pitchCount=r.length,n.chordSize=1,n.instrumentIndex=o,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveBassInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1,this.computeTone(e,t,i,n,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(h,r);for(let n=0;n<r.length;n++){let s;null!=this.tempMatchedPitchTones[u]?(s=this.tempMatchedPitchTones[u],this.tempMatchedPitchTones[u]=null,1==s.pitchCount&&s.pitches[0]==r[n]||(this.releaseTone(l,s),s=this.newTone()),h.pushBack(s)):(s=this.newTone(),h.pushBack(s)),u++,s.pitches[0]=r[n],s.pitchCount=1,s.chordSize=r.length,s.instrumentIndex=o,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveBassInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,i,s,!1,!1)}}}for(;h.count()>u;)this.releaseTone(l,h.popBack());this.clearTempMatchedPitchTones(u,l)}this.liveInputStarted=!1,this.liveBassInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(e,t,i,n,s,a,r,o,l,h){if(e.patternInstruments&&-1==n.instruments.indexOf(s)){if(i.instruments.length>1||n.instruments.length>1)return null;const e=t.instruments[n.instruments[0]];if(h)return e.getChord();const s=e.getTransition();return a.includeAdjacentPatterns&&s.includeAdjacentPatterns&&s.slides==a.slides?e.getChord():null}return h||a.includeAdjacentPatterns?r:null}static adjacentNotesHaveMatchingPitches(e,t){if(e.pitches.length!=t.pitches.length)return!1;const i=e.pins[e.pins.length-1].interval;for(const n of e.pitches)if(-1==t.pitches.indexOf(n+i))return!1;return!0}moveTonesIntoOrderedTempMatchedList(e,t){for(let i=0;i<e.count();i++){const n=e.get(i),s=n.pitches[0]+n.lastInterval;for(let a=0;a<t.length;a++)if(t[a]==s){this.tempMatchedPitchTones[a]=n,e.remove(i),i--;break}}for(;e.count()>0;){const t=e.popFront();for(let e=0;e<this.tempMatchedPitchTones.length;e++)if(null==this.tempMatchedPitchTones[e]){this.tempMatchedPitchTones[e]=t;break}}}determineCurrentActiveTones(e,i,n,s){const a=e.channels[i],r=this.channels[i],o=e.getPattern(i,this.bar),l=this.getCurrentPart(),h=this.tick+t.ticksPerPart*l;if(s&&e.getChannelIsMod(i)){let n=[],s=[],u=[],c=t.modCount;for(;c--;)n.push(null),s.push(null),u.push(null);if(null!=o&&!a.muted)for(let e=0;e<o.notes.length;e++)o.notes[e].end<=l?(null==s[o.notes[e].pitches[0]]||o.notes[e].end>s[o.notes[e].pitches[0]].start)&&(s[o.notes[e].pitches[0]]=o.notes[e]):o.notes[e].start<=l&&o.notes[e].end>l?n[o.notes[e].pitches[0]]=o.notes[e]:o.notes[e].start>l&&(null==u[o.notes[e].pitches[0]]||o.notes[e].start<u[o.notes[e].pitches[0]].start)&&(u[o.notes[e].pitches[0]]=o.notes[e]);let f=0;const p=e.patternInstruments&&null!=o?o.instruments[0]:0,m=r.instruments[p],d=m.activeModTones;for(let e=0;e<t.modCount;e++){if(null!=n[e]&&(null!=s[e]&&s[e].end!=n[e].start&&(s[e]=null),null!=u[e]&&u[e].start!=n[e].end&&(u[e]=null)),null!=r.singleSeamlessInstrument&&r.singleSeamlessInstrument!=p&&r.singleSeamlessInstrument<r.instruments.length){const e=r.instruments[r.singleSeamlessInstrument],t=r.instruments[p];for(;e.activeModTones.count()>0;)t.activeModTones.pushFront(e.activeModTones.popBack())}if(r.singleSeamlessInstrument=p,null!=n[e]){let i=s[e],a=u[e],r=!1,o=!1;const l=t.ticksPerPart*n[e].start==h&&this.isAtStartOfTick;let c;if(d.count()<=f)c=this.newTone(),d.pushBack(c);else if(l&&null==i){const e=d.get(f);e.isOnLastTick?this.freeTone(e):this.releaseTone(m,e),c=this.newTone(),d.set(f,c)}else c=d.get(f);f++;for(let t=0;t<n[e].pitches.length;t++)c.pitches[t]=n[e].pitches[t];c.pitchCount=n[e].pitches.length,c.chordSize=1,c.instrumentIndex=p,c.note=n[e],c.noteStartPart=n[e].start,c.noteEndPart=n[e].end,c.prevNote=i,c.nextNote=a,c.prevNotePitchIndex=0,c.nextNotePitchIndex=0,c.atNoteStart=l,c.passedEndOfNote=!1,c.forceContinueAtStart=r,c.forceContinueAtEnd=o}}for(;d.count()>f;){const t=d.popBack(),n=e.channels[i];if(t.instrumentIndex<n.instruments.length&&!t.isOnLastTick){const e=this.channels[i].instruments[t.instrumentIndex];this.releaseTone(e,t)}else this.freeTone(t)}}else if(!e.getChannelIsMod(i)){let u=null,c=null,f=null;if(s&&null!=o&&!a.muted&&(!this.isRecording||this.liveInputChannel!=i)){for(let e=0;e<o.notes.length;e++)if(o.notes[e].end<=l)c=o.notes[e];else if(o.notes[e].start<=l&&o.notes[e].end>l)u=o.notes[e];else if(o.notes[e].start>l){f=o.notes[e];break}null!=u&&(null!=c&&c.end!=u.start&&(c=null),null!=f&&f.start!=u.end&&(f=null))}if(null!=o&&(!e.layeredInstruments||1==a.instruments.length||e.patternInstruments&&1==o.instruments.length)){const t=e.patternInstruments?o.instruments[0]:0;if(null!=r.singleSeamlessInstrument&&r.singleSeamlessInstrument!=t&&r.singleSeamlessInstrument<r.instruments.length){const e=r.instruments[r.singleSeamlessInstrument],i=r.instruments[t];for(;e.activeTones.count()>0;)i.activeTones.pushFront(e.activeTones.popBack())}r.singleSeamlessInstrument=t}else r.singleSeamlessInstrument=null;for(let s=0;s<a.instruments.length;s++){const p=r.instruments[s],m=p.activeTones;let d=0;if(null!=u&&(!e.patternInstruments||-1!=o.instruments.indexOf(s))){const r=a.instruments[s];let y=c,v=f;const g=t.partsPerBeat*e.beatsPerBar,b=r.getTransition(),M=r.getChord();let w=!1,S=!1,F=0,k=0;if(0==u.start){let t=null==this.prevBar?null:e.getPattern(i,this.prevBar);if(null!=t){const i=t.notes.length<=0?null:t.notes[t.notes.length-1];if(null!=i&&i.end==g){const n=u.continuesLastPattern&&oe.adjacentNotesHaveMatchingPitches(i,u),r=this.adjacentPatternHasCompatibleInstrumentTransition(e,a,o,t,s,b,M,u,i,n);null!=r&&(y=i,F=r.singleTone?1:y.pitches.length,w=n)}}}else null!=y&&(F=M.singleTone?1:y.pitches.length);if(u.end==g){let t=null==this.nextBar?null:e.getPattern(i,this.nextBar);if(null!=t){const i=t.notes.length<=0?null:t.notes[0];if(null!=i&&0==i.start){const n=i.continuesLastPattern&&oe.adjacentNotesHaveMatchingPitches(u,i),r=this.adjacentPatternHasCompatibleInstrumentTransition(e,a,o,t,s,b,M,u,i,n);null!=r&&(v=i,k=r.singleTone?1:v.pitches.length,S=n)}}}else null!=v&&(k=M.singleTone?1:v.pitches.length);let I=u.pitches.filter((e=>e>=r.lowerNoteLimit&&e<=r.upperNoteLimit));if(!M.singleTone||I.length<=0){const a=r.getTransition();(a.isSeamless&&!a.slides&&0==M.strumParts||w)&&t.ticksPerPart*u.start==h&&null!=y&&this.moveTonesIntoOrderedTempMatchedList(m,I);let o=0;for(let r=0;r<I.length;r++){let c=F>r?y:null,f=u,g=k>r?v:null,b=f.start+o,I=!1;if(b>l){if(!(m.count()>r&&(a.isSeamless||w)&&null!=c))break;g=f,f=c,c=null,b=f.start+o,I=!0}let P=f.end;(a.isSeamless||w)&&null!=g&&(P=Math.min(t.partsPerBeat*this.song.beatsPerBar,P+o)),(a.continues||w)&&null!=c||(o+=M.strumParts);const T=t.ticksPerPart*b==h;let q;if(null!=this.tempMatchedPitchTones[d])q=this.tempMatchedPitchTones[d],this.tempMatchedPitchTones[d]=null,m.pushBack(q);else if(m.count()<=d)q=this.newTone(),m.pushBack(q);else if(!T||(a.isSeamless||w)&&null!=c)q=m.get(d);else{const e=m.get(d);e.isOnLastTick?this.freeTone(e):this.releaseTone(p,e),q=this.newTone(),m.set(d,q)}d++,q.pitches[0]=f.pitches[r],q.pitchCount=1,q.chordSize=f.pitches.length,q.instrumentIndex=s,q.note=f,q.noteStartPart=b,q.noteEndPart=P,q.prevNote=c,q.nextNote=g,q.prevNotePitchIndex=r,q.nextNotePitchIndex=r,q.atNoteStart=T,q.passedEndOfNote=I,q.forceContinueAtStart=w&&null!=c,q.forceContinueAtEnd=S&&null!=g,this.computeTone(e,i,n,q,!1,!1)}}else{const a=t.ticksPerPart*u.start==h;let o;if(m.count()<=d)o=this.newTone(),m.pushBack(o);else if(!a||(b.isSeamless||r.clicklessTransition||w)&&null!=y)o=m.get(d);else{const e=m.get(d);e.isOnLastTick?this.freeTone(e):this.releaseTone(p,e),o=this.newTone(),m.set(d,o)}d++;for(let e=0;e<I.length;e++)o.pitches[e]=I[e];o.pitchCount=I.length,o.chordSize=1,o.instrumentIndex=s,o.note=u,o.noteStartPart=u.start,o.noteEndPart=u.end,o.prevNote=y,o.nextNote=v,o.prevNotePitchIndex=0,o.nextNotePitchIndex=0,o.atNoteStart=a,o.passedEndOfNote=!1,o.forceContinueAtStart=w,o.forceContinueAtEnd=S,this.computeTone(e,i,n,o,!1,!1)}}for(;m.count()>d;){const t=m.popBack(),n=e.channels[i];if(t.instrumentIndex<n.instruments.length&&!t.isOnLastTick){const e=r.instruments[t.instrumentIndex];this.releaseTone(e,t)}else this.freeTone(t)}this.clearTempMatchedPitchTones(d,p)}}}clearTempMatchedPitchTones(e,t){for(let i=e;i<this.tempMatchedPitchTones.length;i++){const e=this.tempMatchedPitchTones[i];null!=e&&(e.isOnLastTick?this.freeTone(e):this.releaseTone(t,e),this.tempMatchedPitchTones[i]=null)}}playTone(e,t,i,n){const s=this.channels[e].instruments[n.instrumentIndex];null!=s.synthesizer&&s.synthesizer(this,t,i,n,s),n.envelopeComputer.clearEnvelopes()}playModTone(e,i,n,s,a,r,o,l){const h=e.channels[i].instruments[r.instrumentIndex];if(null!=r.note){const e=this.getTicksIntoBar(),i=e/t.ticksPerPart,o=(e+1)/t.ticksPerPart,l=this.tickSampleCountdown,u=i+(o-i)*(1-l/n),c=i+(o-i)*(1-(l-a)/n),f=t.ticksPerPart*u,p=t.ticksPerPart*c,m=r.note.getEndPinIndex(this.getCurrentPart()),d=r.note.pins[m-1],y=r.note.pins[m],v=(r.note.start+d.time)*t.ticksPerPart,g=(r.note.start+y.time)*t.ticksPerPart,b=(f-v)/(g-v),M=(p-v)/(g-v);r.expression=d.size+(y.size-d.size)*b,r.expressionDelta=d.size+(y.size-d.size)*M-r.expression,oe.modSynth(this,s,a,r,h)}}static computeChordExpression(e){return 1/(.25*(e-1)+1)}computeTone(e,i,n,s,r,o){const l=Math.ceil(n),h=e.channels[i],c=this.channels[i],f=h.instruments[s.instrumentIndex],p=c.instruments[s.instrumentIndex];p.awake=!0,p.tonesAddedInThisTick=!0,p.computed||p.compute(this,f,n,l,s,i,s.instrumentIndex);const g=f.getTransition(),b=f.getChord(),M=b.singleTone?1:oe.computeChordExpression(s.chordSize),w=e.getChannelIsNoise(i),S=w?t.noiseInterval:1,F=t.ticksPerPart*n/this.samplesPerSecond,k=1/this.samplesPerSecond,I=1/t.partsPerBeat,P=this.getTicksIntoBar(),T=P/t.ticksPerPart,q=(P+1)/t.ticksPerPart,x=this.getCurrentPart();let O=1;s.specialIntervalExpressionMult=1;let D=o,R=0,E=0,H=1,A=1,N=M,L=M,C=16,V=t.keys[e.key].basePitch,G=1,$=48;if(3==f.type)G=t.spectrumBaseExpression,w&&(V=t.spectrumBasePitch,G*=2),C=t.spectrumBasePitch,$=28;else if(4==f.type)V=t.spectrumBasePitch,G=t.drumsetBaseExpression,C=V;else if(2==f.type)V=w?t.chipNoises[f.chipNoise].basePitch:V+t.chipNoises[f.chipNoise].basePitch-12,G=t.noiseBaseExpression,C=V,$=t.chipNoises[f.chipNoise].isSoft?24:60;else if(1==f.type)G=t.fmBaseExpression;else if(0==f.type||9==f.type)G=t.chipBaseExpression;else if(5==f.type)G=t.harmonicsBaseExpression;else if(6==f.type)G=t.pwmBaseExpression;else if(8==f.type)G=t.supersawBaseExpression;else if(7==f.type)G=t.pickedStringBaseExpression;else{if(10!=f.type)throw new Error("Unknown instrument type in computeTone.");G=1,C=0,$=1,V=0}(s.atNoteStart&&!g.isSeamless&&!s.forceContinueAtStart||s.freshlyAllocated)&&s.reset(),s.freshlyAllocated=!1;for(let e=0;e<t.maxPitchOrOperatorCount;e++)s.phaseDeltas[e]=0,s.phaseDeltaScales[e]=0,s.operatorExpressions[e]=0,s.operatorExpressionDeltas[e]=0;s.expression=0,s.expressionDelta=0;for(let e=0;e<t.operatorCount;e++)s.operatorWaves[e]=oe.getOperatorWave(f.operators[e].waveform,f.operators[e].pulseWidth);if(r){const e=s.ticksSinceReleased,i=s.ticksSinceReleased+1;R=E=s.lastInterval;const n=Math.abs(f.getFadeOutTicks());H=oe.noteSizeToVolumeMult((1-e/n)*t.noteSizeMax),A=oe.noteSizeToVolumeMult((1-i/n)*t.noteSizeMax),o&&(A=0),s.ticksSinceReleased+1>=n&&(D=!0)}else if(null==s.note)H=A=1,s.lastInterval=0,s.ticksSinceReleased=0,s.liveInputSamplesHeld+=l;else{const e=s.note,i=s.nextNote,n=s.noteStartPart,a=s.noteEndPart,r=e.getEndPinIndex(x),o=e.pins[r-1],l=e.pins[r],h=n*t.ticksPerPart,u=a*t.ticksPerPart,c=(e.start+o.time)*t.ticksPerPart,p=(e.start+l.time)*t.ticksPerPart;s.ticksSinceReleased=0;const m=x*t.ticksPerPart+this.tick,d=m+1,y=m-h,v=d-h,b=Math.min(1,(m-c)/(p-c)),M=Math.min(1,(d-c)/(p-c));if(H=1,A=1,R=o.interval+(l.interval-o.interval)*b,E=o.interval+(l.interval-o.interval)*M,s.lastInterval=E,!g.isSeamless&&!s.forceContinueAtEnd||null==i){const e=-f.getFadeOutTicks();if(e>0){const t=u-h;H*=Math.min(1,(t-y)/e),A*=Math.min(1,(t-v)/e),d>=h+t&&(D=!0)}}}s.isOnLastTick=D;let B,W,j=f.noteFilter;if(f.noteFilterType){const e=f.noteFilter;null==f.noteSubFilters[1]&&(f.noteSubFilters[1]=new Y);const n=f.noteSubFilters[1];let a=f.noteFilterSimpleCut,r=f.noteFilterSimplePeak,o=f.noteFilterSimpleCut,l=f.noteFilterSimplePeak,h=!1;this.isModActive(t.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex)&&(a=this.getModValue(t.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex,!1),o=this.getModValue(t.modulators.dictionary["note filt cut"].index,i,s.instrumentIndex,!0),h=!0),this.isModActive(t.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex)&&(r=this.getModValue(t.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex,!1),l=this.getModValue(t.modulators.dictionary["note filt peak"].index,i,s.instrumentIndex,!0),h=!0),e.convertLegacySettingsForSynth(a,r,!h),n.convertLegacySettingsForSynth(o,l,!h),B=e.controlPoints[0],W=n.controlPoints[0],f.noteFilter=e,f.tmpNoteFilterStart=e}const U=s.envelopeComputer;let K=t.arpSpeedScale[f.envelopeSpeed];this.isModActive(t.modulators.dictionary["envelope speed"].index,i,s.instrumentIndex)&&(K=Math.max(0,Math.min(t.arpSpeedScale.length-1,this.getModValue(t.modulators.dictionary["envelope speed"].index,i,s.instrumentIndex,!1))),K=Number.isInteger(K)?t.arpSpeedScale[K]:(1-K%1)*t.arpSpeedScale[Math.floor(K)]+K%1*t.arpSpeedScale[Math.ceil(K)]),U.computeEnvelopes(f,x,p.envelopeTime,t.ticksPerPart*T,n/this.samplesPerSecond,s,K);const J=s.envelopeComputer.envelopeStarts,Q=s.envelopeComputer.envelopeEnds;if(f.noteFilter=j,null!=s.note&&g.slides){const e=s.prevNote,t=s.nextNote;if(null!=e){const t=e.pitches[s.prevNotePitchIndex]+e.pins[e.pins.length-1].interval-s.pitches[0];if(U.prevSlideStart&&(R+=t*U.prevSlideRatioStart),U.prevSlideEnd&&(E+=t*U.prevSlideRatioEnd),!b.singleTone){const t=e.pitches.length-s.chordSize;U.prevSlideStart&&(N=oe.computeChordExpression(s.chordSize+t*U.prevSlideRatioStart)),U.prevSlideEnd&&(L=oe.computeChordExpression(s.chordSize+t*U.prevSlideRatioEnd))}}if(null!=t){const e=t.pitches[s.nextNotePitchIndex]-(s.pitches[0]+s.note.pins[s.note.pins.length-1].interval);if(U.nextSlideStart&&(R+=e*U.nextSlideRatioStart),U.nextSlideEnd&&(E+=e*U.nextSlideRatioEnd),!b.singleTone){const e=t.pitches.length-s.chordSize;U.nextSlideStart&&(N=oe.computeChordExpression(s.chordSize+e*U.nextSlideRatioStart)),U.nextSlideEnd&&(L=oe.computeChordExpression(s.chordSize+e*U.nextSlideRatioEnd))}}}if(m(f.effects)){let e=t.justIntonationSemitones[f.pitchShift]/S,n=1,a=1;this.isModActive(t.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex)&&(e=t.justIntonationSemitones[t.justIntonationSemitones.length-1],n=this.getModValue(t.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex,!1)/t.pitchShiftCenter,a=this.getModValue(t.modulators.dictionary["pitch shift"].index,i,s.instrumentIndex,!0)/t.pitchShiftCenter);R+=e*J[14]*n,E+=e*Q[14]*a}if(d(f.effects)||this.isModActive(t.modulators.dictionary["song detune"].index,i,s.instrumentIndex)){const e=J[15],n=Q[15];let a=f.detune,r=f.detune;this.isModActive(t.modulators.dictionary.detune.index,i,s.instrumentIndex)&&(a=this.getModValue(t.modulators.dictionary.detune.index,i,s.instrumentIndex,!1)+t.detuneCenter,r=this.getModValue(t.modulators.dictionary.detune.index,i,s.instrumentIndex,!0)+t.detuneCenter),this.isModActive(t.modulators.dictionary["song detune"].index,i,s.instrumentIndex)&&(a+=4*this.getModValue(t.modulators.dictionary["song detune"].index,i,s.instrumentIndex,!1),r+=4*this.getModValue(t.modulators.dictionary["song detune"].index,i,s.instrumentIndex,!0)),R+=oe.detuneToCents(a)*e*t.pitchesPerOctave/1200,E+=oe.detuneToCents(r)*n*t.pitchesPerOctave/1200}if(y(f.effects)){let e,n,a,r;if(f.vibrato==t.vibratos.length?(e=2*f.vibratoDelay,f.vibratoDelay==t.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY),n=f.vibratoDepth,a=n):(e=t.vibratos[f.vibrato].delayTicks,n=t.vibratos[f.vibrato].amplitude,a=n),this.isModActive(t.modulators.dictionary["vibrato delay"].index,i,s.instrumentIndex)&&(e=2*this.getModValue(t.modulators.dictionary["vibrato delay"].index,i,s.instrumentIndex,!1),e==2*t.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY)),this.isModActive(t.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex)&&(n=this.getModValue(t.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex,!1)/25,a=this.getModValue(t.modulators.dictionary["vibrato depth"].index,i,s.instrumentIndex,!0)/25),null!=s.prevVibrato)r=s.prevVibrato;else{if(r=n*oe.getLFOAmplitude(f,F*p.vibratoTime)*J[16],e>0){const t=e-U.noteTicksStart;r*=Math.max(0,Math.min(1,1-t/2))}}let o=oe.getLFOAmplitude(f,F*p.nextVibratoTime);const l=Q[16];if(10!=f.type){let t=a*o*l;if(e>0){const i=e-U.noteTicksEnd;t*=Math.max(0,Math.min(1,1-i/2))}s.prevVibrato=t,R+=r,E+=t}}if(!g.isSeamless&&!s.forceContinueAtStart||null==s.prevNote){const e=f.getFadeInSeconds();e>0&&(H*=Math.min(1,U.noteSecondsStart/e),A*=Math.min(1,U.noteSecondsEnd/e))}4==f.type&&null==s.drumsetPitch&&(s.drumsetPitch=s.pitches[0],null!=s.note&&(s.drumsetPitch+=s.note.pickMainInterval()),s.drumsetPitch=Math.max(0,Math.min(t.drumCount-1,s.drumsetPitch)));let X=U.lowpassCutoffDecayVolumeCompensation;if(v(f.effects)){const e=J[1],t=Q[1];if(f.noteFilterType){const i=J[17],n=Q[17],a=J[25],r=Q[25];B.toCoefficients(oe.tempFilterStartCoefficients,this.samplesPerSecond,e*i,a),W.toCoefficients(oe.tempFilterEndCoefficients,this.samplesPerSecond,t*n,r),s.noteFilters.length<1&&(s.noteFilters[0]=new z),s.noteFilters[0].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterEndCoefficients,1/l,0==B.type),X*=B.getVolumeCompensationMult(),s.noteFilterCount=1}else{const i=null!=f.tmpNoteFilterStart?f.tmpNoteFilterStart:f.noteFilter;for(let n=0;n<i.controlPointCount;n++){const a=J[17+n],r=Q[17+n],o=J[25+n],h=Q[25+n];let u=i.controlPoints[n];const c=null!=f.tmpNoteFilterEnd&&null!=f.tmpNoteFilterEnd.controlPoints[n]?f.tmpNoteFilterEnd.controlPoints[n]:i.controlPoints[n];u.type!=c.type&&(u=c),u.toCoefficients(oe.tempFilterStartCoefficients,this.samplesPerSecond,e*a,o),c.toCoefficients(oe.tempFilterEndCoefficients,this.samplesPerSecond,t*r,h),s.noteFilters.length<=n&&(s.noteFilters[n]=new z),s.noteFilters[n].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterEndCoefficients,1/l,0==u.type),X*=u.getVolumeCompensationMult()}s.noteFilterCount=i.controlPointCount}}else s.noteFilterCount=0;if(4==f.type){const e=f.getDrumsetEnvelope(s.drumsetPitch);X*=ne.getLowpassCutoffDecayVolumeCompensation(e);let t=ne.computeEnvelope(e,U.noteSecondsStart,I*T,U.noteSizeStart);if(U.prevSlideStart){t+=(ne.computeEnvelope(e,U.prevNoteSecondsStart,I*T,U.prevNoteSize)-t)*U.prevSlideRatioStart}if(U.nextSlideStart){t+=(ne.computeEnvelope(e,0,I*T,U.nextNoteSize)-t)*U.nextSlideRatioStart}let i=t;if(0==f.discreteEnvelope){if(i=ne.computeEnvelope(e,U.noteSecondsEnd,I*q,U.noteSizeEnd),U.prevSlideEnd){i+=(ne.computeEnvelope(e,U.prevNoteSecondsEnd,I*q,U.prevNoteSize)-i)*U.prevSlideRatioEnd}if(U.nextSlideEnd){i+=(ne.computeEnvelope(e,0,I*q,U.nextNoteSize)-i)*U.nextSlideRatioEnd}}const n=this.tempDrumSetControlPoint;n.type=0,n.gain=_.getRoundedSettingValueFromLinearGain(.5),n.freq=_.getRoundedSettingValueFromHz(8e3),n.toCoefficients(oe.tempFilterStartCoefficients,this.samplesPerSecond,t*(1+t),1),n.toCoefficients(oe.tempFilterEndCoefficients,this.samplesPerSecond,i*(1+i),1),s.noteFilters.length==s.noteFilterCount&&(s.noteFilters[s.noteFilterCount]=new z),s.noteFilters[s.noteFilterCount].loadCoefficientsWithGradient(oe.tempFilterStartCoefficients,oe.tempFilterEndCoefficients,1/l,!0),s.noteFilterCount++}if(X=Math.min(3,X),1==f.type){let e=1,n=0,a=w?12:V,r=0;const o=b.arpeggiates;if(s.pitchCount>1&&o){const e=Math.floor(p.arpTime/t.ticksPerArpeggio);r=s.pitches[u(s.pitchCount,f.fastTwoNoteArp,e)]-s.pitches[0]}const h=t.algorithms[f.algorithm].carrierCount;for(let u=0;u<t.operatorCount;u++){const c=t.algorithms[f.algorithm].associatedCarrier[u]-1,p=s.pitches[o?0:u<s.pitchCount?u:c<s.pitchCount?c:0],m=f.operators[u].frequency,d=t.operatorCarrierInterval[c]+r,y=a+(p+R)*S+d,v=a+(p+E)*S+d,g=Z.frequencyFromPitch(y),b=Z.frequencyFromPitch(v),M=f.operators[u].hzOffset,w=m*g+M,F=m*b+M,I=J[5+u],P=Q[5+u];let T,q;1!=I||1!=P?(T=Math.pow(2,Math.log2(w/g)*I)*g,q=Math.pow(2,Math.log2(F/b)*P)*b):(T=w,q=F),s.phaseDeltas[u]=T*k,s.phaseDeltaScales[u]=Math.pow(q/T,1/l);let x=f.operators[u].amplitude,O=f.operators[u].amplitude;this.isModActive(t.modulators.dictionary["fm slider 1"].index+u,i,s.instrumentIndex)&&(x*=this.getModValue(t.modulators.dictionary["fm slider 1"].index+u,i,s.instrumentIndex,!1)/15,O*=this.getModValue(t.modulators.dictionary["fm slider 1"].index+u,i,s.instrumentIndex,!0)/15);const D=oe.operatorAmplitudeCurve(x),z=oe.operatorAmplitudeCurve(O),H=f.operators[u].invert?-1:1;let A=D*H,N=z*H;if(u<h){let e;e=null!=s.prevPitchExpressions[u]?s.prevPitchExpressions[u]:Math.pow(2,-(y-C)/$);const t=Math.pow(2,-(v-C)/$);s.prevPitchExpressions[u]=t,A*=e,N*=t,n+=z}else A*=1.5*t.sineWaveLength,N*=1.5*t.sineWaveLength,e*=1-Math.min(1,f.operators[u].amplitude/15);if(A*=J[9+u],N*=Q[9+u],this.isModActive(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex)){const e=this.getModValue(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!1),n=this.getModValue(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!0);A*=e<=0?(e+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(e),N*=n<=0?(n+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(n)}s.operatorExpressions[u]=A,s.operatorExpressionDeltas[u]=(N-A)/l}e*=(Math.pow(2,2-1.4*f.feedbackAmplitude/15)-1)/3,e*=1-Math.min(1,Math.max(0,n-1)/2),e=1+3*e;const c=G*e*X*H*N*J[0],m=G*e*X*A*L*Q[0];s.expression=c,s.expressionDelta=(m-c)/l;let d=f.feedbackAmplitude,y=f.feedbackAmplitude;this.isModActive(t.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex)&&(d*=this.getModValue(t.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex,!1)/15,y*=this.getModValue(t.modulators.dictionary["fm feedback"].index,i,s.instrumentIndex,!0)/15);let v=.3*t.sineWaveLength*d/15;const g=.3*t.sineWaveLength*y/15;let M=v*J[13],F=g*Q[13];s.feedbackMult=M,s.feedbackDelta=(F-M)/l}else{const e=Math.pow(2,(E-R)*S/12),n=Math.pow(e,1/l);let r=s.pitches[0];if(s.pitchCount>1&&(b.arpeggiates||b.customInterval)){const e=Math.floor(p.arpTime/t.ticksPerArpeggio);if(b.customInterval){const t=s.pitches[1+u(s.pitchCount-1,f.fastTwoNoteArp,e)]-s.pitches[0];O=Math.pow(2,t/12),s.specialIntervalExpressionMult=Math.pow(2,-t/$)}else r=s.pitches[u(s.pitchCount,f.fastTwoNoteArp,e)]}const o=V+(r+R)*S,h=V+(r+E)*S;let c;c=null!=s.prevPitchExpressions[0]?s.prevPitchExpressions[0]:Math.pow(2,-(o-C)/$);const m=Math.pow(2,-(h-C)/$);s.prevPitchExpressions[0]=m;let d=G*X;if(2==f.type&&(d*=t.chipNoises[f.chipNoise].expression),0==f.type&&(d*=t.chipWaves[f.chipWave].expression),6==f.type){const e=a(f.pulseWidth);let n=e,r=e;this.isModActive(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex)&&(n=this.getModValue(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!1)/(2*t.pulseWidthRange),r=this.getModValue(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!0)/(2*t.pulseWidthRange));const o=n*J[2],h=r*Q[2];s.pulseWidth=o,s.pulseWidthDelta=(h-o)/l}if(7==f.type){let e=f.stringSustain,n=f.stringSustain;this.isModActive(t.modulators.dictionary.sustain.index,i,s.instrumentIndex)&&(e=this.getModValue(t.modulators.dictionary.sustain.index,i,s.instrumentIndex,!1),n=this.getModValue(t.modulators.dictionary.sustain.index,i,s.instrumentIndex,!0)),s.stringSustainStart=e,s.stringSustainEnd=n,d*=Math.pow(2,.7*(1-e/(t.stringSustainRange-1)))}const y=Z.frequencyFromPitch(o);if(0==f.type||9==f.type||5==f.type||7==f.type){const e=t.unisons[f.unison],i=7==f.type?1:e.voices/2;d*=e.expression*i;const a=J[4],r=Q[4],o=Math.pow(2,(e.offset+e.spread)*a/12),h=Math.pow(2,(e.offset+e.spread)*r/12),u=Math.pow(2,(e.offset-e.spread)*a/12)*O,c=Math.pow(2,(e.offset-e.spread)*r/12)*O;s.phaseDeltas[0]=y*k*o,s.phaseDeltas[1]=y*k*u,s.phaseDeltaScales[0]=n*Math.pow(h/o,1/l),s.phaseDeltaScales[1]=n*Math.pow(c/u,1/l)}else s.phaseDeltas[0]=y*k,s.phaseDeltaScales[0]=n;let v=1,M=1;if(8==f.type){const n=1/Math.sqrt(t.supersawVoiceCount);let r=f.supersawDynamism/t.supersawDynamismMax,o=f.supersawDynamism/t.supersawDynamismMax;this.isModActive(t.modulators.dictionary.dynamism.index,i,s.instrumentIndex)&&(r=this.getModValue(t.modulators.dictionary.dynamism.index,i,s.instrumentIndex,!1)/t.supersawDynamismMax,o=this.getModValue(t.modulators.dictionary.dynamism.index,i,s.instrumentIndex,!0)/t.supersawDynamismMax);const h=1-Math.pow(Math.max(0,1-r*J[33]),.2),u=1-Math.pow(Math.max(0,1-o*Q[33]),.2),c=Math.pow(2,Math.log2(n)*h),p=Math.pow(2,Math.log2(n)*u),m=Math.sqrt((1/Math.pow(c,2)-1)/(t.supersawVoiceCount-1)),d=Math.sqrt((1/Math.pow(p,2)-1)/(t.supersawVoiceCount-1));s.supersawDynamism=m,s.supersawDynamismDelta=(d-m)/l;const g=-1==s.supersawDelayIndex;if(g){let e=0;for(let i=0;i<t.supersawVoiceCount;i++)s.phases[i]=e,e+=-Math.log(Math.random());const i=1+(t.supersawVoiceCount-1)*m;let n=0;for(let i=0;i<t.supersawVoiceCount;i++){const t=0==i?1:m,a=s.phases[i]/e;s.phases[i]=a,n+=(a-.5)*t}let a=1,r=0;for(let e=t.supersawVoiceCount-1;e>=0;e--){const t=1-s.phases[e],o=t-r;if(n<0){const e=-n/i;if(e<o){a=r+e;break}}n+=o*i-(0==e?1:m),r=t}for(let e=0;e<t.supersawVoiceCount;e++)s.phases[e]+=a;for(let e=1;e<t.supersawVoiceCount-1;e++){const i=e+Math.floor(Math.random()*(t.supersawVoiceCount-e)),n=s.phases[e];s.phases[e]=s.phases[i],s.phases[i]=n}}const b=f.supersawSpread/t.supersawSpreadMax;let w=b,S=b;this.isModActive(t.modulators.dictionary.spread.index,i,s.instrumentIndex)&&(w=this.getModValue(t.modulators.dictionary.spread.index,i,s.instrumentIndex,!1)/t.supersawSpreadMax,S=this.getModValue(t.modulators.dictionary.spread.index,i,s.instrumentIndex,!0)/t.supersawSpreadMax);const F=.5*(w*J[34]+S*Q[34]),I=Math.pow(1-Math.sqrt(Math.max(0,1-F)),1.75);for(let e=0;e<t.supersawVoiceCount;e++){const i=0==e?0:Math.pow(((e+1>>1)-.5+.025*((2&e)-1))/(t.supersawVoiceCount>>1),1.1)*(2*(1&e)-1);s.supersawUnisonDetunes[e]=Math.pow(2,I*i/12)}const P=f.supersawShape/t.supersawShapeMax;let T=P*J[35],q=P*Q[35];this.isModActive(t.modulators.dictionary["saw shape"].index,i,s.instrumentIndex)&&(T=this.getModValue(t.modulators.dictionary["saw shape"].index,i,s.instrumentIndex,!1)/t.supersawShapeMax,q=this.getModValue(t.modulators.dictionary["saw shape"].index,i,s.instrumentIndex,!0)/t.supersawShapeMax);const x=T*J[35],O=q*Q[35];s.supersawShape=x,s.supersawShapeDelta=(O-x)/l;const D=a(f.pulseWidth);let R=D,z=D;this.isModActive(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex)&&(R=this.getModValue(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!1)/(2*t.pulseWidthRange),z=this.getModValue(t.modulators.dictionary["pulse width"].index,i,s.instrumentIndex,!0)/(2*t.pulseWidthRange));const E=R*J[2],H=z*Q[2],A=null!=s.supersawPrevPhaseDelta?s.supersawPrevPhaseDelta:y*k,N=y*k*e;s.supersawPrevPhaseDelta=N;const L=E/A,C=H/N;s.supersawDelayLength=L,s.supersawDelayLengthDelta=(C-L)/l;const V=Math.ceil(Math.max(L,C))+2;if(null==s.supersawDelayLine||s.supersawDelayLine.length<=V){const e=Math.ceil(.5*this.samplesPerSecond/Z.frequencyFromPitch(24)),t=new Float32Array(oe.fittingPowerOfTwo(Math.max(e,V)));if(!g&&null!=s.supersawDelayLine){const e=s.supersawDelayLine.length-1>>0,i=s.supersawDelayIndex;for(let n=0;n<s.supersawDelayLine.length;n++)t[n]=s.supersawDelayLine[i+n&e]}s.supersawDelayLine=t,s.supersawDelayIndex=s.supersawDelayLine.length}else g&&(s.supersawDelayLine.fill(0),s.supersawDelayIndex=s.supersawDelayLine.length);const G=t.pwmBaseExpression/t.supersawBaseExpression;v*=(1+(G-1)*x)/Math.sqrt(1+(t.supersawVoiceCount-1)*m*m),M*=(1+(G-1)*O)/Math.sqrt(1+(t.supersawVoiceCount-1)*d*d)}let w=d*H*N*c*J[0]*v,F=d*A*L*m*Q[0]*M;if(this.isModActive(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex)){const e=this.getModValue(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!1),n=this.getModValue(t.modulators.dictionary["note volume"].index,i,s.instrumentIndex,!0);w*=e<=0?(e+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(e),F*=n<=0?(n+t.volumeRange/2)/(t.volumeRange/2):oe.instrumentVolumeToVolumeMult(n)}if(s.expression=w,s.expressionDelta=(F-w)/l,7==f.type){let e;if(null!=s.prevStringDecay)e=s.prevStringDecay;else{const i=s.envelopeComputer.envelopeStarts[3];e=1-Math.min(1,i*s.stringSustainStart/(t.stringSustainRange-1))}const i=s.envelopeComputer.envelopeEnds[3];let n=1-Math.min(1,i*s.stringSustainEnd/(t.stringSustainRange-1));s.prevStringDecay=n;const a=t.unisons[f.unison];for(let e=s.pickedStrings.length;e<a.voices;e++)s.pickedStrings[e]=new ie;if(s.atNoteStart&&!g.continues&&!s.forceContinueAtStart)for(const e of s.pickedStrings)e.delayIndex=-1;for(let t=0;t<a.voices;t++)s.pickedStrings[t].update(this,p,s,t,l,e,n,f.stringSustainType)}}}static getLFOAmplitude(e,i){let n=0;for(const s of t.vibratoTypes[e.vibratoType].periodsSeconds)n+=Math.sin(2*Math.PI*i/s);return n}static getInstrumentSynthFunction(e){if(1==e.type){const i=e.algorithm+"_"+e.feedbackType;if(null==oe.fmSynthFunctionCache[i]){const n=[];for(const i of oe.fmSourceTemplate)if(-1!=i.indexOf("// CARRIER OUTPUTS")){const s=[];for(let i=0;i<t.algorithms[e.algorithm].carrierCount;i++)s.push("operator"+i+"Scaled");n.push(i.replace("/*operator#Scaled*/",s.join(" + ")))}else if(-1!=i.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let i=t.operatorCount-1;i>=0;i--)for(const s of oe.operatorSourceTemplate)if(-1!=s.indexOf("/* + operator@Scaled*/")){let a="";for(const n of t.algorithms[e.algorithm].modulatedBy[i])a+=" + operator"+(n-1)+"Scaled";const r=t.feedbacks[e.feedbackType].indices[i];if(r.length>0){a+=" + feedbackMult * (";const e=[];for(const t of r)e.push("operator"+(t-1)+"Output");a+=e.join(" + ")+")"}n.push(s.replace(/\#/g,i+"").replace("/* + operator@Scaled*/",a))}else n.push(s.replace(/\#/g,i+""));else if(-1!=i.indexOf("#"))for(let e=0;e<t.operatorCount;e++)n.push(i.replace(/\#/g,e+""));else n.push(i);const s="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {"+n.join("\n")+"}";oe.fmSynthFunctionCache[i]=new Function("Config","Synth",s)(t,oe)}return oe.fmSynthFunctionCache[i]}if(0==e.type)return oe.chipSynth;if(9==e.type)return oe.chipSynth;if(5==e.type)return oe.harmonicsSynth;if(6==e.type)return oe.pulseWidthSynth;if(8==e.type)return oe.supersawSynth;if(7==e.type)return oe.pickedStringSynth;if(2==e.type)return oe.noiseSynth;if(3==e.type)return oe.spectrumSynth;if(4==e.type)return oe.drumsetSynth;if(10==e.type)return oe.modSynth;throw new Error("Unrecognized instrument type: "+e.type)}static chipSynth(e,t,i,n,s){const a=s.invertWave?-1:1,r=g(s.effects)&&s.aliases,o=e.tempMonoInstrumentSampleBuffer,l=s.wave,h=s.volumeScale,u=r&&9==s.type?l.length:l.length-1,c=n.specialIntervalExpressionMult*s.unison.sign;1!=s.unison.voices||s.chord.customInterval||(n.phases[1]=n.phases[0]);let f=n.phaseDeltas[0]*u,p=n.phaseDeltas[1]*u;const m=+n.phaseDeltaScales[0],d=+n.phaseDeltaScales[1];let y=+n.expression;const v=+n.expressionDelta;let b=n.phases[0]%1*u,M=n.phases[1]%1*u;const w=n.noteFilters,S=0|n.noteFilterCount;let F=+n.initialNoteFilterInput1,k=+n.initialNoteFilterInput2;const I=oe.applyFilters;let P=0,T=0;if(!r){const e=0|b,t=0|M,i=e%u,n=t%u,s=b-e,a=M-t;P=+l[i],T=+l[n],P+=(l[i+1]-P)*s,T+=(l[n+1]-T)*a}const q=t+i;for(let e=t;e<q;e++){let t,i,n;if(b+=f,M+=p,r)t=l[(0|b)%u],i=l[(0|M)%u],n=t+i;else{const e=0|b,s=0|M,a=e%u,r=s%u;let o=l[a],h=l[r];const m=b-e,d=M-s;o+=(l[a+1]-o)*m,h+=(l[r+1]-h)*d,t=(o-P)/f,i=(h-T)/p,P=o,T=h,n=t+i*c}n*=a;const s=I(n*h,F,k,S,w);k=F,F=n*h,f*=m,p*=d;const g=s*y;y+=v,o[e]+=g}n.phases[0]=b/u,n.phases[1]=M/u,n.phaseDeltas[0]=f/u,n.phaseDeltas[1]=p/u,n.expression=y,e.sanitizeFilters(w),n.initialNoteFilterInput1=F,n.initialNoteFilterInput2=k}static harmonicsSynth(e,t,i,n,s){const a=s.invertWave?-1:1,r=e.tempMonoInstrumentSampleBuffer,o=s.wave,l=o.length-1,h=n.specialIntervalExpressionMult*s.unison.sign;1!=s.unison.voices||s.chord.customInterval||(n.phases[1]=n.phases[0]);let u=n.phaseDeltas[0]*l,c=n.phaseDeltas[1]*l;const f=+n.phaseDeltaScales[0],p=+n.phaseDeltaScales[1];let m=+n.expression;const d=+n.expressionDelta;let y=n.phases[0]%1*l,v=n.phases[1]%1*l;const g=n.noteFilters,b=0|n.noteFilterCount;let M=+n.initialNoteFilterInput1,w=+n.initialNoteFilterInput2;const S=oe.applyFilters,F=0|y,k=0|v,I=F%l,P=k%l,T=y-F,q=v-k;let x=+o[I],O=+o[P];x+=(o[I+1]-x)*T,O+=(o[P+1]-O)*q;const D=t+i;for(let e=t;e<D;e++){y+=u,v+=c;const t=0|y,i=0|v,n=t%l,s=i%l;let F=o[n],k=o[s];const I=y-t,P=v-i;F+=(o[n+1]-F)*I,k+=(o[s+1]-k)*P;const T=(F-x)/u,q=(k-O)/c;x=F,O=k;const D=(T+q*h)*a,R=S(D,M,w,b,g);w=M,M=D,u*=f,c*=p;const z=R*m;m+=d,r[e]+=z}n.phases[0]=y/l,n.phases[1]=v/l,n.phaseDeltas[0]=u/l,n.phaseDeltas[1]=c/l,n.expression=m,e.sanitizeFilters(g),n.initialNoteFilterInput1=M,n.initialNoteFilterInput2=w}static pickedStringSynth(e,i,n,s,a){const r=a.unison.voices;let o=oe.pickedStringFunctionCache[r];if(null==o){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n                const sign = instrumentState.invertWave ? -1 : 1;\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\n\t\t\t\t\tconst inputSample = (";const i=[];for(let e=0;e<r;e++)i.push("fractionalDelaySample"+e+(1==e?" * unisonSign":""));e+=i.join(" + "),e+=") * expression * sign;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\n\t\t\t\ttone.expression = expression;\n\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}",e=e.replace(/^.*\#.*$/gm,(e=>{const t=[];for(let i=0;i<r;i++)t.push(e.replace(/\#/g,String(i)));return t.join("\n")})),o=new Function("Config","Synth",e)(t,oe),oe.pickedStringFunctionCache[r]=o}o(e,i,n,s,a)}static effectsSynth(e,i,n,s,a,r){const o=g(r.effects),l=b(r.effects),h=r.eqFilterCount>0,u=M(r.effects),c=w(r.effects),f=S(r.effects),p=F(r.effects);let m=0;o&&(m|=1),m<<=1,l&&(m|=1),m<<=1,h&&(m|=1),m<<=1,u&&(m|=1),m<<=1,c&&(m|=1),m<<=1,f&&(m|=1),m<<=1,p&&(m|=1);let d=oe.effectsFunctionCache[m];if(null==d){let e="return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {";const i=c||p||f;e+="\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",i&&(e+="\n\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),o&&(e+="\n\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),l&&(e+="\n\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),h&&(e+="\n\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;"),e+="\n\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",u&&(e+="\n\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),c&&(e+="\n\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),f&&(e+="\n\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),p&&(e+="\n\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),e+="\n\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",o&&(e+="\n\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),l&&(e+="\n\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),h&&(e+="\n\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),e+="\n\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",e+=u?"\n\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",c&&(e+="\n\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),f&&(e+="\n\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    "),p&&(e+="\n\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),e+="\n\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",i&&(e+="\n\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),e+="\n\t\t\t\t}\n\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",i&&(e+="\n\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;"),o&&(e+="\n\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),l&&(e+="\n\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;"),h&&(e+="\n\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),u&&(e+="\n\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;"),c&&(e+="\n\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;"),f&&(e+="\n\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),p&&(e+="\n\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),e+="}",d=new Function("Config","Synth",e)(t,oe),oe.effectsFunctionCache[m]=d}d(e,i,n,s,a,r)}static pulseWidthSynth(e,t,i,n,s){const a=s.invertWave?-1:1,r=e.tempMonoInstrumentSampleBuffer;let o=n.phaseDeltas[0];const l=+n.phaseDeltaScales[0];let h=+n.expression;const u=+n.expressionDelta;let c=n.phases[0]%1,f=n.pulseWidth;const p=n.pulseWidthDelta,m=n.noteFilters,d=0|n.noteFilterCount;let y=+n.initialNoteFilterInput1,v=+n.initialNoteFilterInput2;const g=oe.applyFilters,b=t+i;for(let e=t;e<b;e++){const t=c%1,i=(c+f)%1;let n=i-t;if(!s.aliases){if(t<o)n+=.5*((M=t/o)+M-M*M-1);else if(t>1-o){n+=.5*((M=(t-1)/o)+M+M*M+1)}if(i<o)n-=.5*((M=i/o)+M-M*M-1);else if(i>1-o){var M;n-=.5*((M=(i-1)/o)+M+M*M+1)}}const b=n*a,w=g(b,y,v,d,m);v=y,y=b,c+=o,o*=l,f+=p;const S=w*h;h+=u,r[e]+=S}n.phases[0]=c,n.phaseDeltas[0]=o,n.expression=h,n.pulseWidth=f,e.sanitizeFilters(m),n.initialNoteFilterInput1=y,n.initialNoteFilterInput2=v}static supersawSynth(e,i,n,s,a){const r=a.invertWave?-1:1,o=e.tempMonoInstrumentSampleBuffer,l=0|t.supersawVoiceCount;let h=s.phaseDeltas[0];const u=+s.phaseDeltaScales[0];let c=+s.expression;const f=+s.expressionDelta;let p=s.phases,m=+s.supersawDynamism;const d=+s.supersawDynamismDelta,y=s.supersawUnisonDetunes;let v=+s.supersawShape;const g=+s.supersawShapeDelta;let b=+s.supersawDelayLength;const M=+s.supersawDelayLengthDelta,w=s.supersawDelayLine,S=w.length-1>>0;let F=0|s.supersawDelayIndex;F=(F&S)+w.length;const k=s.noteFilters,I=0|s.noteFilterCount;let P=+s.initialNoteFilterInput1,T=+s.initialNoteFilterInput2;const q=oe.applyFilters,x=i+n;for(let e=i;e<x;e++){let t=(p[0]+h)%1,i=t-.5*(1+(l-1)*m);if(!a.aliases)if(t<h)i-=.5*((O=t/h)+O-O*O-1);else if(t>1-h){var O;i-=.5*((O=(t-1)/h)+O+O*O+1)}p[0]=t;for(let e=1;e<l;e++){const t=h*y[e];let n=(p[e]+t)%1;if(i+=n*m,!a.aliases)if(n<t){const e=n/t;i-=.5*(e+e-e*e-1)*m}else if(n>1-t){const e=(n-1)/t;i-=.5*(e+e+e*e+1)*m}p[e]=n}w[F&S]=i;const n=F-b,s=0|n,x=s+1,D=n-s,R=w[s&S];F++;const z=i-(R+(w[x&S]-R)*D)*v,E=q(z,P,T,I,k);T=P,P=z,h*=u,m+=d,v+=g,b+=M;const H=E*c*r;c+=f,o[e]+=H}s.phaseDeltas[0]=h,s.expression=c,s.supersawDynamism=m,s.supersawShape=v,s.supersawDelayLength=b,s.supersawDelayIndex=F,e.sanitizeFilters(k),s.initialNoteFilterInput1=P,s.initialNoteFilterInput2=T}static noiseSynth(e,i,n,s,a){const r=Math.abs(Math.sin(1e4*(s.noteStartPart+s.noteEndPart+s.pitches[0]+e.bar))),o=a.invertWave?-1:1,l=e.tempMonoInstrumentSampleBuffer,h=a.wave;let u=+s.phaseDeltas[0];const c=+s.phaseDeltaScales[0];let f=+s.expression;const p=+s.expressionDelta;let m=s.phases[0]%1*t.chipNoiseLength;0==s.phases[0]&&(m=r*t.chipNoiseLength);const d=t.chipNoiseLength-1;let y=+s.noiseSample;const v=s.noteFilters,g=0|s.noteFilterCount;let b=+s.initialNoteFilterInput1,M=+s.initialNoteFilterInput2;const w=oe.applyFilters,S=Math.min(1,u*a.noisePitchFilterMult),F=i+n;for(let e=i;e<F;e++){y+=(h[m&d]-y)*S;const t=y*o,i=w(t,b,M,g,v);M=b,b=t,m+=u,u*=c;const n=i*f;f+=p,l[e]+=n}s.phases[0]=m/t.chipNoiseLength,s.phaseDeltas[0]=u,s.expression=f,s.noiseSample=y,e.sanitizeFilters(v),s.initialNoteFilterInput1=b,s.initialNoteFilterInput2=M}static spectrumSynth(e,i,n,s,a){const r=a.invertWave?-1:1,o=e.tempMonoInstrumentSampleBuffer,l=a.wave;let h=128*s.phaseDeltas[0];const u=+s.phaseDeltaScales[0];let c=+s.expression;const f=+s.expressionDelta;let p=+s.noiseSample;const m=s.noteFilters,d=0|s.noteFilterCount;let y=+s.initialNoteFilterInput1,v=+s.initialNoteFilterInput2;const g=oe.applyFilters;let b=s.phases[0]%1*t.spectrumNoiseLength;0==s.phases[0]&&(b=oe.findRandomZeroCrossing(l,t.spectrumNoiseLength,e,s)+h);const M=t.spectrumNoiseLength-1,w=Math.min(1,h),S=i+n;for(let e=i;e<S;e++){const t=0|b,i=t&M;let n=l[i];const s=b-t;n+=(l[i+1]-n)*s,p+=(n-p)*w;const a=p*r,S=g(a,y,v,d,m);v=y,y=a,b+=h,h*=u;const F=S*c;c+=f,o[e]+=F}s.phases[0]=b/t.spectrumNoiseLength,s.phaseDeltas[0]=h/128,s.expression=c,s.noiseSample=p,e.sanitizeFilters(m),s.initialNoteFilterInput1=y,s.initialNoteFilterInput2=v}static drumsetSynth(e,i,n,s,a){const r=a.invertWave?-1:1,o=e.tempMonoInstrumentSampleBuffer;let l=a.getDrumsetWave(s.drumsetPitch);const h=ae.drumsetIndexReferenceDelta(s.drumsetPitch);let u=s.phaseDeltas[0]/h;const c=+s.phaseDeltaScales[0];let f=+s.expression;const p=+s.expressionDelta,m=s.noteFilters,d=0|s.noteFilterCount;let y=+s.initialNoteFilterInput1,v=+s.initialNoteFilterInput2;const g=oe.applyFilters;let b=s.phases[0]%1*t.spectrumNoiseLength;0==s.phases[0]&&(b=oe.findRandomZeroCrossing(l,t.spectrumNoiseLength,e,s)+u);const M=t.spectrumNoiseLength-1,w=i+n;for(let e=i;e<w;e++){const t=0|b,i=t&M;let n=l[i];const s=b-t;n+=(l[i+1]-n)*s;const a=n*r,h=g(a,y,v,d,m);v=y,y=a,b+=u,u*=c;const w=h*f;f+=p,o[e]+=w}s.phases[0]=b/t.spectrumNoiseLength,s.phaseDeltas[0]=u*h,s.expression=f,e.sanitizeFilters(m),s.initialNoteFilterInput1=y,s.initialNoteFilterInput2=v}static modSynth(e,i,n,s,a){if(!e.song)return;let r=t.modCount-1-s.pitches[0];if(a.invalidModulators[r])return;let o=a.modulators[r],l=[];if(t.modulators[a.modulators[r]].forSong)l.push(0);else if(a.modInstruments[r]==e.song.channels[a.modChannels[r]].instruments.length)for(let t=0;t<e.song.channels[a.modChannels[r]].instruments.length;t++)l.push(t);else a.modInstruments[r]>e.song.channels[a.modChannels[r]].instruments.length?null!=e.song.getPattern(a.modChannels[r],e.bar)&&(l=e.song.getPattern(a.modChannels[r],e.bar).instruments):l.push(a.modInstruments[r]);for(let i=0;i<l.length;i++){e.setModValue(s.expression,s.expression+s.expressionDelta,a.modChannels[r],l[i],o);for(let n=0;n<e.heldMods.length;n++)t.modulators[a.modulators[r]].forSong?e.heldMods[n].setting==o&&e.setModValue(e.heldMods[n].volume,e.heldMods[n].volume,a.modChannels[r],l[i],o):e.heldMods[n].channelIndex==a.modChannels[r]&&e.heldMods[n].instrumentIndex==l[i]&&e.heldMods[n].setting==o&&e.setModValue(e.heldMods[n].volume,e.heldMods[n].volume,a.modChannels[r],l[i],o);if(o==t.modulators.dictionary["reset arp"].index&&0==e.tick&&s.noteStartPart==e.beat*t.partsPerBeat+e.part)e.channels[a.modChannels[r]].instruments[l[i]].arpTime=0;else if(o==t.modulators.dictionary["next bar"].index)e.wantToSkip=!0;else if(o==t.modulators.dictionary["eq filter"].index){const o=e.song.channels[a.modChannels[r]].instruments[l[i]];if(!o.eqFilterType){let i=0|a.modFilterTypes[r];if(0==i){let i=0;const a=e.getTicksIntoBar()/t.ticksPerPart;for(;s.note.start+s.note.pins[i].time<=a;)i++;let r=(a-s.note.start+n/(e.getSamplesPerTick()*t.ticksPerPart)*t.ticksPerPart-s.note.pins[i-1].time)/(s.note.pins[i].time-s.note.pins[i-1].time);null!=o.eqSubFilters[s.note.pins[i-1].size]||null!=o.eqSubFilters[s.note.pins[i].size]?o.tmpEqFilterEnd=Y.lerpFilters(o.eqSubFilters[s.note.pins[i-1].size],o.eqSubFilters[s.note.pins[i].size],r):o.tmpEqFilterEnd=o.eqFilter}else{for(let e=0;e<t.filterMorphCount;e++)o.tmpEqFilterEnd==o.eqSubFilters[e]&&null!=o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new Y,o.tmpEqFilterEnd.fromJsonObject(o.eqSubFilters[e].toJsonObject()));null==o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new Y,o.tmpEqFilterEnd.fromJsonObject(o.eqFilter.toJsonObject())),o.tmpEqFilterEnd.controlPointCount>Math.floor((i-1)/2)&&(i%2?o.tmpEqFilterEnd.controlPoints[Math.floor((i-1)/2)].freq=s.expression+s.expressionDelta:o.tmpEqFilterEnd.controlPoints[Math.floor((i-1)/2)].gain=s.expression+s.expressionDelta)}}}else if(o==t.modulators.dictionary["note filter"].index){const o=e.song.channels[a.modChannels[r]].instruments[l[i]];if(!o.noteFilterType){let i=0|a.modFilterTypes[r];if(0==i){let i=0;const a=e.getTicksIntoBar()/t.ticksPerPart;for(;s.note.start+s.note.pins[i].time<=a;)i++;let r=(a-s.note.start+n/(e.getSamplesPerTick()*t.ticksPerPart)*t.ticksPerPart-s.note.pins[i-1].time)/(s.note.pins[i].time-s.note.pins[i-1].time);null!=o.noteSubFilters[s.note.pins[i-1].size]||null!=o.noteSubFilters[s.note.pins[i].size]?o.tmpNoteFilterEnd=Y.lerpFilters(o.noteSubFilters[s.note.pins[i-1].size],o.noteSubFilters[s.note.pins[i].size],r):o.tmpNoteFilterEnd=o.noteFilter}else{for(let e=0;e<t.filterMorphCount;e++)o.tmpNoteFilterEnd==o.noteSubFilters[e]&&null!=o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new Y,o.tmpNoteFilterEnd.fromJsonObject(o.noteSubFilters[e].toJsonObject()));null==o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new Y,o.tmpNoteFilterEnd.fromJsonObject(o.noteFilter.toJsonObject())),o.tmpNoteFilterEnd.controlPointCount>Math.floor((i-1)/2)&&(i%2?o.tmpNoteFilterEnd.controlPoints[Math.floor((i-1)/2)].freq=s.expression+s.expressionDelta:o.tmpNoteFilterEnd.controlPoints[Math.floor((i-1)/2)].gain=s.expression+s.expressionDelta)}}}}}static findRandomZeroCrossing(e,t,i,n){let s=Math.abs(Math.sin(1e4*(n.noteStartPart+n.noteEndPart+n.pitches[0]+i.bar)))*t;const a=t-1;let r=s&a,o=e[r];for(let i=128;i>0;i--){const i=r+16&a,n=e[i];if(o*n<=0){for(let i=0;i<16;i++){const i=r+1&a,n=e[i];if(o*n<=0){const e=n-o;s=r,Math.abs(e)>1e-8&&(s+=-o/e),s=Math.max(0,s)%t;break}r=i,o=n}break}r=i,o=n}return s}static instrumentVolumeToVolumeMult(e){return e==-t.volumeRange/2?0:Math.pow(2,t.volumeLogScale*e)}static volumeMultToInstrumentVolume(e){return e<=0?-t.volumeRange/2:Math.min(t.volumeRange,Math.log(e)/Math.LN2/t.volumeLogScale)}static noteSizeToVolumeMult(e){return Math.pow(Math.max(0,e)/t.noteSizeMax,1.5)}static volumeMultToNoteSize(e){return Math.pow(Math.max(0,e),1/1.5)*t.noteSizeMax}static fadeInSettingToSeconds(e){return.0125*(.95*e+.05*e*e)}static secondsToFadeInSetting(e){return A(0,t.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*e/.0125))/.1))}static fadeOutSettingToTicks(e){return t.fadeOutTicks[e]}static ticksToFadeOutSetting(e){let i=t.fadeOutTicks[0];if(e<=i)return 0;for(let n=1;n<t.fadeOutTicks.length;n++){let s=t.fadeOutTicks[n];if(e<=s)return e<(i+s)/2?n-1:n;i=s}return t.fadeOutTicks.length-1}static detuneToCents(e){return e-t.detuneCenter}static centsToDetune(e){return e+t.detuneCenter}static getOperatorWave(e,i){return 3!=e?t.operatorWaves[e]:t.pwmOperatorWaves[i]}getSamplesPerTick(){if(null==this.song)return 0;let e=this.song.getBeatsPerMinute();return this.isModActive(t.modulators.dictionary.tempo.index)&&(e=this.getModValue(t.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(e)}getSamplesPerTickSpecificBPM(e){const i=e/60,n=t.partsPerBeat*i,s=t.ticksPerPart*n;return this.samplesPerSecond/s}static fittingPowerOfTwo(e){return 1<<32-Math.clz32(Math.ceil(e)-1)}sanitizeFilters(e){let t=!1;for(const i of e){const e=Math.abs(i.output1),n=Math.abs(i.output2);if(!(e<100&&n<100)){t=!0;break}e<H&&(i.output1=0),n<H&&(i.output2=0)}if(t)for(const t of e)t.output1=0,t.output2=0}static sanitizeDelayLine(e,t,i){for(;;){const n=--t&i,s=Math.abs(e[n]);if(Number.isFinite(s)&&(0==s||s>=H))break;e[n]=0}}static applyFilters(e,t,i,n,s){for(let a=0;a<n;a++){const n=s[a],r=n.output1,o=n.output2,l=n.a1,h=n.a2,u=n.b0,c=n.b1,f=n.b2;e=u*e+c*t+f*i-l*r-h*o,n.a1=l+n.a1Delta,n.a2=h+n.a2Delta,n.useMultiplicativeInputCoefficients?(n.b0=u*n.b0Delta,n.b1=c*n.b1Delta,n.b2=f*n.b2Delta):(n.b0=u+n.b0Delta,n.b1=c+n.b1Delta,n.b2=f+n.b2Delta),n.output2=r,n.output1=e,i=o,t=r}return e}}return oe.tempFilterStartCoefficients=new D,oe.tempFilterEndCoefficients=new D,oe.fmSynthFunctionCache={},oe.effectsFunctionCache=Array(128).fill(void 0),oe.pickedStringFunctionCache=Array(3).fill(void 0),oe.fmSourceTemplate=("\n        const sign = instrument.invertWave ? -1 : 1;\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * "+t.sineWaveLength+";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * "+t.sineWaveLength+";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\n\t\t\tconst inputSample = fmOutput*sign;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\n\t\t\ttone.phases[#] = operator#Phase / "+t.sineWaveLength+";\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / "+t.sineWaveLength+";\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t").split("\n"),oe.operatorSourceTemplate=("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+t.sineWaveMask+";\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),e.Channel=ee,e.Config=t,e.EnvelopeSettings=X,e.FilterControlPoint=_,e.FilterSettings=Y,e.HarmonicsWave=J,e.Instrument=Z,e.Note=B,e.Operator=j,e.Pattern=W,e.Song=te,e.SpectrumWave=U,e.Synth=oe,e.clamp=A,e.makeNotePin=$,Object.defineProperty(e,"j",{value:!0}),e}({});
//# sourceMappingURL=beepbox_synth.min.js.map